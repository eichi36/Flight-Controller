
MPU-9250.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009054  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08009254  08009254  00019254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800932c  0800932c  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800932c  0800932c  0001932c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009334  08009334  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009334  08009334  00019334  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009338  08009338  00019338  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800933c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a68  200001f4  08009530  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001c5c  08009530  00021c5c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a4ee  00000000  00000000  00020222  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a08  00000000  00000000  0003a710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001108  00000000  00000000  0003e118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fa0  00000000  00000000  0003f220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002abd8  00000000  00000000  000401c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000156d7  00000000  00000000  0006ad98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f771a  00000000  00000000  0008046f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00177b89  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004950  00000000  00000000  00177bdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001f4 	.word	0x200001f4
 800021c:	00000000 	.word	0x00000000
 8000220:	0800923c 	.word	0x0800923c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001f8 	.word	0x200001f8
 800023c:	0800923c 	.word	0x0800923c

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <add_2_avg>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void add_2_avg(uint16_t val) {
 80005d8:	b480      	push	{r7}
 80005da:	b083      	sub	sp, #12
 80005dc:	af00      	add	r7, sp, #0
 80005de:	4603      	mov	r3, r0
 80005e0:	80fb      	strh	r3, [r7, #6]
	  static uint32_t sum;
	  if(count == 10) {
 80005e2:	4b12      	ldr	r3, [pc, #72]	; (800062c <add_2_avg+0x54>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	2b0a      	cmp	r3, #10
 80005e8:	d10e      	bne.n	8000608 <add_2_avg+0x30>
		  avg = sum /10;
 80005ea:	4b11      	ldr	r3, [pc, #68]	; (8000630 <add_2_avg+0x58>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	4a11      	ldr	r2, [pc, #68]	; (8000634 <add_2_avg+0x5c>)
 80005f0:	fba2 2303 	umull	r2, r3, r2, r3
 80005f4:	08db      	lsrs	r3, r3, #3
 80005f6:	b29a      	uxth	r2, r3
 80005f8:	4b0f      	ldr	r3, [pc, #60]	; (8000638 <add_2_avg+0x60>)
 80005fa:	801a      	strh	r2, [r3, #0]
		  sum = 0;
 80005fc:	4b0c      	ldr	r3, [pc, #48]	; (8000630 <add_2_avg+0x58>)
 80005fe:	2200      	movs	r2, #0
 8000600:	601a      	str	r2, [r3, #0]
		  count = 0;
 8000602:	4b0a      	ldr	r3, [pc, #40]	; (800062c <add_2_avg+0x54>)
 8000604:	2200      	movs	r2, #0
 8000606:	701a      	strb	r2, [r3, #0]
	  }
	  sum += val;
 8000608:	88fa      	ldrh	r2, [r7, #6]
 800060a:	4b09      	ldr	r3, [pc, #36]	; (8000630 <add_2_avg+0x58>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	4413      	add	r3, r2
 8000610:	4a07      	ldr	r2, [pc, #28]	; (8000630 <add_2_avg+0x58>)
 8000612:	6013      	str	r3, [r2, #0]
	  count++;
 8000614:	4b05      	ldr	r3, [pc, #20]	; (800062c <add_2_avg+0x54>)
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	3301      	adds	r3, #1
 800061a:	b2da      	uxtb	r2, r3
 800061c:	4b03      	ldr	r3, [pc, #12]	; (800062c <add_2_avg+0x54>)
 800061e:	701a      	strb	r2, [r3, #0]

}
 8000620:	bf00      	nop
 8000622:	370c      	adds	r7, #12
 8000624:	46bd      	mov	sp, r7
 8000626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062a:	4770      	bx	lr
 800062c:	20000212 	.word	0x20000212
 8000630:	20000214 	.word	0x20000214
 8000634:	cccccccd 	.word	0xcccccccd
 8000638:	20000210 	.word	0x20000210

0800063c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b088      	sub	sp, #32
 8000640:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000642:	f000 fc4e 	bl	8000ee2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000646:	f000 f8d3 	bl	80007f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800064a:	f000 f9d5 	bl	80009f8 <MX_GPIO_Init>
  MX_SPI1_Init();
 800064e:	f000 f965 	bl	800091c <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8000652:	f000 f9a1 	bl	8000998 <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 8000656:	f007 fbc9 	bl	8007dec <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  uint8_t result_str_len;
  uint16_t read_val = 0x0000;
 800065a:	2300      	movs	r3, #0
 800065c:	81bb      	strh	r3, [r7, #12]
  uint16_t temp = 0x00;
 800065e:	2300      	movs	r3, #0
 8000660:	817b      	strh	r3, [r7, #10]
  const uint16_t data = 0x6B01;
 8000662:	f646 3301 	movw	r3, #27393	; 0x6b01
 8000666:	813b      	strh	r3, [r7, #8]
  volatile uint8_t garb = 0x0;
 8000668:	2300      	movs	r3, #0
 800066a:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef error = 0;
 800066c:	2300      	movs	r3, #0
 800066e:	73fb      	strb	r3, [r7, #15]

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000670:	2200      	movs	r2, #0
 8000672:	2110      	movs	r1, #16
 8000674:	4855      	ldr	r0, [pc, #340]	; (80007cc <main+0x190>)
 8000676:	f000 ff73 	bl	8001560 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, (uint16_t*)&data, 2, 200);
 800067a:	f107 0108 	add.w	r1, r7, #8
 800067e:	23c8      	movs	r3, #200	; 0xc8
 8000680:	2202      	movs	r2, #2
 8000682:	4853      	ldr	r0, [pc, #332]	; (80007d0 <main+0x194>)
 8000684:	f003 fb41 	bl	8003d0a <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000688:	2201      	movs	r2, #1
 800068a:	2110      	movs	r1, #16
 800068c:	484f      	ldr	r0, [pc, #316]	; (80007cc <main+0x190>)
 800068e:	f000 ff67 	bl	8001560 <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(GPIOB, LD1_Pin);
 8000692:	2101      	movs	r1, #1
 8000694:	484f      	ldr	r0, [pc, #316]	; (80007d4 <main+0x198>)
 8000696:	f000 ff7c 	bl	8001592 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
 800069a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800069e:	484d      	ldr	r0, [pc, #308]	; (80007d4 <main+0x198>)
 80006a0:	f000 ff77 	bl	8001592 <HAL_GPIO_TogglePin>

	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80006a4:	2200      	movs	r2, #0
 80006a6:	2110      	movs	r1, #16
 80006a8:	4848      	ldr	r0, [pc, #288]	; (80007cc <main+0x190>)
 80006aa:	f000 ff59 	bl	8001560 <HAL_GPIO_WritePin>
	  HAL_SPI_TransmitReceive(&hspi1, (uint16_t*)&READ_TEMP_H, (uint16_t*)&temp, 1,  200);
 80006ae:	f107 020a 	add.w	r2, r7, #10
 80006b2:	23c8      	movs	r3, #200	; 0xc8
 80006b4:	9300      	str	r3, [sp, #0]
 80006b6:	2301      	movs	r3, #1
 80006b8:	4947      	ldr	r1, [pc, #284]	; (80007d8 <main+0x19c>)
 80006ba:	4845      	ldr	r0, [pc, #276]	; (80007d0 <main+0x194>)
 80006bc:	f003 fc93 	bl	8003fe6 <HAL_SPI_TransmitReceive>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80006c0:	2201      	movs	r2, #1
 80006c2:	2110      	movs	r1, #16
 80006c4:	4841      	ldr	r0, [pc, #260]	; (80007cc <main+0x190>)
 80006c6:	f000 ff4b 	bl	8001560 <HAL_GPIO_WritePin>
	  for(int i = 0; i < 200; i ++) {
 80006ca:	2300      	movs	r3, #0
 80006cc:	617b      	str	r3, [r7, #20]
 80006ce:	e007      	b.n	80006e0 <main+0xa4>
		  garb++;
 80006d0:	79fb      	ldrb	r3, [r7, #7]
 80006d2:	b2db      	uxtb	r3, r3
 80006d4:	3301      	adds	r3, #1
 80006d6:	b2db      	uxtb	r3, r3
 80006d8:	71fb      	strb	r3, [r7, #7]
	  for(int i = 0; i < 200; i ++) {
 80006da:	697b      	ldr	r3, [r7, #20]
 80006dc:	3301      	adds	r3, #1
 80006de:	617b      	str	r3, [r7, #20]
 80006e0:	697b      	ldr	r3, [r7, #20]
 80006e2:	2bc7      	cmp	r3, #199	; 0xc7
 80006e4:	ddf4      	ble.n	80006d0 <main+0x94>
	  }
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80006e6:	2200      	movs	r2, #0
 80006e8:	2110      	movs	r1, #16
 80006ea:	4838      	ldr	r0, [pc, #224]	; (80007cc <main+0x190>)
 80006ec:	f000 ff38 	bl	8001560 <HAL_GPIO_WritePin>
	  HAL_SPI_TransmitReceive(&hspi1, (uint16_t*)&READ_TEMP_L, (uint16_t*)&read_val, 1, 200);
 80006f0:	f107 020c 	add.w	r2, r7, #12
 80006f4:	23c8      	movs	r3, #200	; 0xc8
 80006f6:	9300      	str	r3, [sp, #0]
 80006f8:	2301      	movs	r3, #1
 80006fa:	4938      	ldr	r1, [pc, #224]	; (80007dc <main+0x1a0>)
 80006fc:	4834      	ldr	r0, [pc, #208]	; (80007d0 <main+0x194>)
 80006fe:	f003 fc72 	bl	8003fe6 <HAL_SPI_TransmitReceive>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000702:	2201      	movs	r2, #1
 8000704:	2110      	movs	r1, #16
 8000706:	4831      	ldr	r0, [pc, #196]	; (80007cc <main+0x190>)
 8000708:	f000 ff2a 	bl	8001560 <HAL_GPIO_WritePin>
	  read_val = read_val & 255;
 800070c:	89bb      	ldrh	r3, [r7, #12]
 800070e:	b2db      	uxtb	r3, r3
 8000710:	b29b      	uxth	r3, r3
 8000712:	81bb      	strh	r3, [r7, #12]
	  temp = temp & 255;
 8000714:	897b      	ldrh	r3, [r7, #10]
 8000716:	b2db      	uxtb	r3, r3
 8000718:	b29b      	uxth	r3, r3
 800071a:	817b      	strh	r3, [r7, #10]
	  read_val = (temp << 8) | read_val;
 800071c:	897b      	ldrh	r3, [r7, #10]
 800071e:	021b      	lsls	r3, r3, #8
 8000720:	b21a      	sxth	r2, r3
 8000722:	89bb      	ldrh	r3, [r7, #12]
 8000724:	b21b      	sxth	r3, r3
 8000726:	4313      	orrs	r3, r2
 8000728:	b21b      	sxth	r3, r3
 800072a:	b29b      	uxth	r3, r3
 800072c:	81bb      	strh	r3, [r7, #12]
	  add_2_avg(read_val);
 800072e:	89bb      	ldrh	r3, [r7, #12]
 8000730:	4618      	mov	r0, r3
 8000732:	f7ff ff51 	bl	80005d8 <add_2_avg>
	  uint32_t tempc = 0;
 8000736:	2300      	movs	r3, #0
 8000738:	613b      	str	r3, [r7, #16]
	  if(avg & 0x4000) {
 800073a:	4b29      	ldr	r3, [pc, #164]	; (80007e0 <main+0x1a4>)
 800073c:	881b      	ldrh	r3, [r3, #0]
 800073e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000742:	2b00      	cmp	r3, #0
 8000744:	d016      	beq.n	8000774 <main+0x138>
		  tempc = 0x7FFF -avg;
 8000746:	4b26      	ldr	r3, [pc, #152]	; (80007e0 <main+0x1a4>)
 8000748:	881b      	ldrh	r3, [r3, #0]
 800074a:	461a      	mov	r2, r3
 800074c:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8000750:	1a9b      	subs	r3, r3, r2
 8000752:	613b      	str	r3, [r7, #16]
		  tempc *=100;
 8000754:	693b      	ldr	r3, [r7, #16]
 8000756:	2264      	movs	r2, #100	; 0x64
 8000758:	fb02 f303 	mul.w	r3, r2, r3
 800075c:	613b      	str	r3, [r7, #16]
		  tempc/=3339;
 800075e:	693b      	ldr	r3, [r7, #16]
 8000760:	4a20      	ldr	r2, [pc, #128]	; (80007e4 <main+0x1a8>)
 8000762:	fba2 2303 	umull	r2, r3, r2, r3
 8000766:	0adb      	lsrs	r3, r3, #11
 8000768:	613b      	str	r3, [r7, #16]
		  tempc = 210-41 - tempc;
 800076a:	693b      	ldr	r3, [r7, #16]
 800076c:	f1c3 03a9 	rsb	r3, r3, #169	; 0xa9
 8000770:	613b      	str	r3, [r7, #16]
 8000772:	e012      	b.n	800079a <main+0x15e>

	  }else {
		  tempc  = avg *100;
 8000774:	4b1a      	ldr	r3, [pc, #104]	; (80007e0 <main+0x1a4>)
 8000776:	881b      	ldrh	r3, [r3, #0]
 8000778:	461a      	mov	r2, r3
 800077a:	2364      	movs	r3, #100	; 0x64
 800077c:	fb03 f302 	mul.w	r3, r3, r2
 8000780:	613b      	str	r3, [r7, #16]
		  tempc = tempc/3339;
 8000782:	693b      	ldr	r3, [r7, #16]
 8000784:	4a17      	ldr	r2, [pc, #92]	; (80007e4 <main+0x1a8>)
 8000786:	fba2 2303 	umull	r2, r3, r2, r3
 800078a:	0adb      	lsrs	r3, r3, #11
 800078c:	613b      	str	r3, [r7, #16]
		  tempc += 210;
 800078e:	693b      	ldr	r3, [r7, #16]
 8000790:	33d2      	adds	r3, #210	; 0xd2
 8000792:	613b      	str	r3, [r7, #16]
		  tempc-=41;
 8000794:	693b      	ldr	r3, [r7, #16]
 8000796:	3b29      	subs	r3, #41	; 0x29
 8000798:	613b      	str	r3, [r7, #16]
	  }

	  result_str_len = sprintf(usb_buf, "Temp: %6d\tAvg: %5d\tTemp: %d\r", read_val, avg, tempc );
 800079a:	89bb      	ldrh	r3, [r7, #12]
 800079c:	461a      	mov	r2, r3
 800079e:	4b10      	ldr	r3, [pc, #64]	; (80007e0 <main+0x1a4>)
 80007a0:	881b      	ldrh	r3, [r3, #0]
 80007a2:	4619      	mov	r1, r3
 80007a4:	693b      	ldr	r3, [r7, #16]
 80007a6:	9300      	str	r3, [sp, #0]
 80007a8:	460b      	mov	r3, r1
 80007aa:	490f      	ldr	r1, [pc, #60]	; (80007e8 <main+0x1ac>)
 80007ac:	480f      	ldr	r0, [pc, #60]	; (80007ec <main+0x1b0>)
 80007ae:	f008 f9d1 	bl	8008b54 <siprintf>
 80007b2:	4603      	mov	r3, r0
 80007b4:	73bb      	strb	r3, [r7, #14]
	  CDC_Transmit_FS(usb_buf, result_str_len);
 80007b6:	7bbb      	ldrb	r3, [r7, #14]
 80007b8:	b29b      	uxth	r3, r3
 80007ba:	4619      	mov	r1, r3
 80007bc:	480b      	ldr	r0, [pc, #44]	; (80007ec <main+0x1b0>)
 80007be:	f007 fc13 	bl	8007fe8 <CDC_Transmit_FS>
	  HAL_Delay(250);
 80007c2:	20fa      	movs	r0, #250	; 0xfa
 80007c4:	f000 fbea 	bl	8000f9c <HAL_Delay>
  {
 80007c8:	e763      	b.n	8000692 <main+0x56>
 80007ca:	bf00      	nop
 80007cc:	40020000 	.word	0x40020000
 80007d0:	20000310 	.word	0x20000310
 80007d4:	40020400 	.word	0x40020400
 80007d8:	080092da 	.word	0x080092da
 80007dc:	080092dc 	.word	0x080092dc
 80007e0:	20000210 	.word	0x20000210
 80007e4:	9d04fbc9 	.word	0x9d04fbc9
 80007e8:	0800926c 	.word	0x0800926c
 80007ec:	20000228 	.word	0x20000228

080007f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b0b8      	sub	sp, #224	; 0xe0
 80007f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007f6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80007fa:	2234      	movs	r2, #52	; 0x34
 80007fc:	2100      	movs	r1, #0
 80007fe:	4618      	mov	r0, r3
 8000800:	f008 f8e6 	bl	80089d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000804:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	605a      	str	r2, [r3, #4]
 800080e:	609a      	str	r2, [r3, #8]
 8000810:	60da      	str	r2, [r3, #12]
 8000812:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000814:	f107 0308 	add.w	r3, r7, #8
 8000818:	2290      	movs	r2, #144	; 0x90
 800081a:	2100      	movs	r1, #0
 800081c:	4618      	mov	r0, r3
 800081e:	f008 f8d7 	bl	80089d0 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000822:	f002 f88f 	bl	8002944 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000826:	4b3a      	ldr	r3, [pc, #232]	; (8000910 <SystemClock_Config+0x120>)
 8000828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082a:	4a39      	ldr	r2, [pc, #228]	; (8000910 <SystemClock_Config+0x120>)
 800082c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000830:	6413      	str	r3, [r2, #64]	; 0x40
 8000832:	4b37      	ldr	r3, [pc, #220]	; (8000910 <SystemClock_Config+0x120>)
 8000834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800083a:	607b      	str	r3, [r7, #4]
 800083c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800083e:	4b35      	ldr	r3, [pc, #212]	; (8000914 <SystemClock_Config+0x124>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	4a34      	ldr	r2, [pc, #208]	; (8000914 <SystemClock_Config+0x124>)
 8000844:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000848:	6013      	str	r3, [r2, #0]
 800084a:	4b32      	ldr	r3, [pc, #200]	; (8000914 <SystemClock_Config+0x124>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000852:	603b      	str	r3, [r7, #0]
 8000854:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000856:	2301      	movs	r3, #1
 8000858:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800085c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000860:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000864:	2302      	movs	r3, #2
 8000866:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800086a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800086e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000872:	2304      	movs	r3, #4
 8000874:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000878:	23d8      	movs	r3, #216	; 0xd8
 800087a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800087e:	2302      	movs	r3, #2
 8000880:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000884:	2309      	movs	r3, #9
 8000886:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800088a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800088e:	4618      	mov	r0, r3
 8000890:	f002 f8b8 	bl	8002a04 <HAL_RCC_OscConfig>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800089a:	f000 f9a7 	bl	8000bec <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800089e:	f002 f861 	bl	8002964 <HAL_PWREx_EnableOverDrive>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80008a8:	f000 f9a0 	bl	8000bec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ac:	230f      	movs	r3, #15
 80008ae:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008b2:	2302      	movs	r3, #2
 80008b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008b8:	2300      	movs	r3, #0
 80008ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008be:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008ca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80008ce:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80008d2:	2107      	movs	r1, #7
 80008d4:	4618      	mov	r0, r3
 80008d6:	f002 fb43 	bl	8002f60 <HAL_RCC_ClockConfig>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 80008e0:	f000 f984 	bl	8000bec <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 80008e4:	4b0c      	ldr	r3, [pc, #48]	; (8000918 <SystemClock_Config+0x128>)
 80008e6:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80008e8:	2300      	movs	r3, #0
 80008ea:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80008ec:	2300      	movs	r3, #0
 80008ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008f2:	f107 0308 	add.w	r3, r7, #8
 80008f6:	4618      	mov	r0, r3
 80008f8:	f002 fd34 	bl	8003364 <HAL_RCCEx_PeriphCLKConfig>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <SystemClock_Config+0x116>
  {
    Error_Handler();
 8000902:	f000 f973 	bl	8000bec <Error_Handler>
  }
}
 8000906:	bf00      	nop
 8000908:	37e0      	adds	r7, #224	; 0xe0
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	40023800 	.word	0x40023800
 8000914:	40007000 	.word	0x40007000
 8000918:	00200100 	.word	0x00200100

0800091c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000920:	4b1b      	ldr	r3, [pc, #108]	; (8000990 <MX_SPI1_Init+0x74>)
 8000922:	4a1c      	ldr	r2, [pc, #112]	; (8000994 <MX_SPI1_Init+0x78>)
 8000924:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000926:	4b1a      	ldr	r3, [pc, #104]	; (8000990 <MX_SPI1_Init+0x74>)
 8000928:	f44f 7282 	mov.w	r2, #260	; 0x104
 800092c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800092e:	4b18      	ldr	r3, [pc, #96]	; (8000990 <MX_SPI1_Init+0x74>)
 8000930:	2200      	movs	r2, #0
 8000932:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000934:	4b16      	ldr	r3, [pc, #88]	; (8000990 <MX_SPI1_Init+0x74>)
 8000936:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 800093a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800093c:	4b14      	ldr	r3, [pc, #80]	; (8000990 <MX_SPI1_Init+0x74>)
 800093e:	2202      	movs	r2, #2
 8000940:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000942:	4b13      	ldr	r3, [pc, #76]	; (8000990 <MX_SPI1_Init+0x74>)
 8000944:	2200      	movs	r2, #0
 8000946:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000948:	4b11      	ldr	r3, [pc, #68]	; (8000990 <MX_SPI1_Init+0x74>)
 800094a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800094e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000950:	4b0f      	ldr	r3, [pc, #60]	; (8000990 <MX_SPI1_Init+0x74>)
 8000952:	2230      	movs	r2, #48	; 0x30
 8000954:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000956:	4b0e      	ldr	r3, [pc, #56]	; (8000990 <MX_SPI1_Init+0x74>)
 8000958:	2200      	movs	r2, #0
 800095a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800095c:	4b0c      	ldr	r3, [pc, #48]	; (8000990 <MX_SPI1_Init+0x74>)
 800095e:	2200      	movs	r2, #0
 8000960:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000962:	4b0b      	ldr	r3, [pc, #44]	; (8000990 <MX_SPI1_Init+0x74>)
 8000964:	2200      	movs	r2, #0
 8000966:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000968:	4b09      	ldr	r3, [pc, #36]	; (8000990 <MX_SPI1_Init+0x74>)
 800096a:	2207      	movs	r2, #7
 800096c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800096e:	4b08      	ldr	r3, [pc, #32]	; (8000990 <MX_SPI1_Init+0x74>)
 8000970:	2200      	movs	r2, #0
 8000972:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000974:	4b06      	ldr	r3, [pc, #24]	; (8000990 <MX_SPI1_Init+0x74>)
 8000976:	2208      	movs	r2, #8
 8000978:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800097a:	4805      	ldr	r0, [pc, #20]	; (8000990 <MX_SPI1_Init+0x74>)
 800097c:	f003 f91a 	bl	8003bb4 <HAL_SPI_Init>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000986:	f000 f931 	bl	8000bec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	20000310 	.word	0x20000310
 8000994:	40013000 	.word	0x40013000

08000998 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800099c:	4b14      	ldr	r3, [pc, #80]	; (80009f0 <MX_USART3_UART_Init+0x58>)
 800099e:	4a15      	ldr	r2, [pc, #84]	; (80009f4 <MX_USART3_UART_Init+0x5c>)
 80009a0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009a2:	4b13      	ldr	r3, [pc, #76]	; (80009f0 <MX_USART3_UART_Init+0x58>)
 80009a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009a8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009aa:	4b11      	ldr	r3, [pc, #68]	; (80009f0 <MX_USART3_UART_Init+0x58>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009b0:	4b0f      	ldr	r3, [pc, #60]	; (80009f0 <MX_USART3_UART_Init+0x58>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009b6:	4b0e      	ldr	r3, [pc, #56]	; (80009f0 <MX_USART3_UART_Init+0x58>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009bc:	4b0c      	ldr	r3, [pc, #48]	; (80009f0 <MX_USART3_UART_Init+0x58>)
 80009be:	220c      	movs	r2, #12
 80009c0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009c2:	4b0b      	ldr	r3, [pc, #44]	; (80009f0 <MX_USART3_UART_Init+0x58>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009c8:	4b09      	ldr	r3, [pc, #36]	; (80009f0 <MX_USART3_UART_Init+0x58>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ce:	4b08      	ldr	r3, [pc, #32]	; (80009f0 <MX_USART3_UART_Init+0x58>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009d4:	4b06      	ldr	r3, [pc, #24]	; (80009f0 <MX_USART3_UART_Init+0x58>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009da:	4805      	ldr	r0, [pc, #20]	; (80009f0 <MX_USART3_UART_Init+0x58>)
 80009dc:	f003 fe76 	bl	80046cc <HAL_UART_Init>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80009e6:	f000 f901 	bl	8000bec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009ea:	bf00      	nop
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	2000028c 	.word	0x2000028c
 80009f4:	40004800 	.word	0x40004800

080009f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b08c      	sub	sp, #48	; 0x30
 80009fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fe:	f107 031c 	add.w	r3, r7, #28
 8000a02:	2200      	movs	r2, #0
 8000a04:	601a      	str	r2, [r3, #0]
 8000a06:	605a      	str	r2, [r3, #4]
 8000a08:	609a      	str	r2, [r3, #8]
 8000a0a:	60da      	str	r2, [r3, #12]
 8000a0c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a0e:	4b71      	ldr	r3, [pc, #452]	; (8000bd4 <MX_GPIO_Init+0x1dc>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	4a70      	ldr	r2, [pc, #448]	; (8000bd4 <MX_GPIO_Init+0x1dc>)
 8000a14:	f043 0304 	orr.w	r3, r3, #4
 8000a18:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1a:	4b6e      	ldr	r3, [pc, #440]	; (8000bd4 <MX_GPIO_Init+0x1dc>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	f003 0304 	and.w	r3, r3, #4
 8000a22:	61bb      	str	r3, [r7, #24]
 8000a24:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a26:	4b6b      	ldr	r3, [pc, #428]	; (8000bd4 <MX_GPIO_Init+0x1dc>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	4a6a      	ldr	r2, [pc, #424]	; (8000bd4 <MX_GPIO_Init+0x1dc>)
 8000a2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a30:	6313      	str	r3, [r2, #48]	; 0x30
 8000a32:	4b68      	ldr	r3, [pc, #416]	; (8000bd4 <MX_GPIO_Init+0x1dc>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a3a:	617b      	str	r3, [r7, #20]
 8000a3c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3e:	4b65      	ldr	r3, [pc, #404]	; (8000bd4 <MX_GPIO_Init+0x1dc>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	4a64      	ldr	r2, [pc, #400]	; (8000bd4 <MX_GPIO_Init+0x1dc>)
 8000a44:	f043 0301 	orr.w	r3, r3, #1
 8000a48:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4a:	4b62      	ldr	r3, [pc, #392]	; (8000bd4 <MX_GPIO_Init+0x1dc>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	f003 0301 	and.w	r3, r3, #1
 8000a52:	613b      	str	r3, [r7, #16]
 8000a54:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a56:	4b5f      	ldr	r3, [pc, #380]	; (8000bd4 <MX_GPIO_Init+0x1dc>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	4a5e      	ldr	r2, [pc, #376]	; (8000bd4 <MX_GPIO_Init+0x1dc>)
 8000a5c:	f043 0302 	orr.w	r3, r3, #2
 8000a60:	6313      	str	r3, [r2, #48]	; 0x30
 8000a62:	4b5c      	ldr	r3, [pc, #368]	; (8000bd4 <MX_GPIO_Init+0x1dc>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	f003 0302 	and.w	r3, r3, #2
 8000a6a:	60fb      	str	r3, [r7, #12]
 8000a6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a6e:	4b59      	ldr	r3, [pc, #356]	; (8000bd4 <MX_GPIO_Init+0x1dc>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	4a58      	ldr	r2, [pc, #352]	; (8000bd4 <MX_GPIO_Init+0x1dc>)
 8000a74:	f043 0308 	orr.w	r3, r3, #8
 8000a78:	6313      	str	r3, [r2, #48]	; 0x30
 8000a7a:	4b56      	ldr	r3, [pc, #344]	; (8000bd4 <MX_GPIO_Init+0x1dc>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	f003 0308 	and.w	r3, r3, #8
 8000a82:	60bb      	str	r3, [r7, #8]
 8000a84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a86:	4b53      	ldr	r3, [pc, #332]	; (8000bd4 <MX_GPIO_Init+0x1dc>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	4a52      	ldr	r2, [pc, #328]	; (8000bd4 <MX_GPIO_Init+0x1dc>)
 8000a8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a90:	6313      	str	r3, [r2, #48]	; 0x30
 8000a92:	4b50      	ldr	r3, [pc, #320]	; (8000bd4 <MX_GPIO_Init+0x1dc>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a9a:	607b      	str	r3, [r7, #4]
 8000a9c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	2110      	movs	r1, #16
 8000aa2:	484d      	ldr	r0, [pc, #308]	; (8000bd8 <MX_GPIO_Init+0x1e0>)
 8000aa4:	f000 fd5c 	bl	8001560 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	f244 0181 	movw	r1, #16513	; 0x4081
 8000aae:	484b      	ldr	r0, [pc, #300]	; (8000bdc <MX_GPIO_Init+0x1e4>)
 8000ab0:	f000 fd56 	bl	8001560 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	2140      	movs	r1, #64	; 0x40
 8000ab8:	4849      	ldr	r0, [pc, #292]	; (8000be0 <MX_GPIO_Init+0x1e8>)
 8000aba:	f000 fd51 	bl	8001560 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000abe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ac2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ac4:	4b47      	ldr	r3, [pc, #284]	; (8000be4 <MX_GPIO_Init+0x1ec>)
 8000ac6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000acc:	f107 031c 	add.w	r3, r7, #28
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4845      	ldr	r0, [pc, #276]	; (8000be8 <MX_GPIO_Init+0x1f0>)
 8000ad4:	f000 fb98 	bl	8001208 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000ad8:	2332      	movs	r3, #50	; 0x32
 8000ada:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000adc:	2302      	movs	r3, #2
 8000ade:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae4:	2303      	movs	r3, #3
 8000ae6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ae8:	230b      	movs	r3, #11
 8000aea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aec:	f107 031c 	add.w	r3, r7, #28
 8000af0:	4619      	mov	r1, r3
 8000af2:	483d      	ldr	r0, [pc, #244]	; (8000be8 <MX_GPIO_Init+0x1f0>)
 8000af4:	f000 fb88 	bl	8001208 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000af8:	2386      	movs	r3, #134	; 0x86
 8000afa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afc:	2302      	movs	r3, #2
 8000afe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b00:	2300      	movs	r3, #0
 8000b02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b04:	2303      	movs	r3, #3
 8000b06:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b08:	230b      	movs	r3, #11
 8000b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b0c:	f107 031c 	add.w	r3, r7, #28
 8000b10:	4619      	mov	r1, r3
 8000b12:	4831      	ldr	r0, [pc, #196]	; (8000bd8 <MX_GPIO_Init+0x1e0>)
 8000b14:	f000 fb78 	bl	8001208 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000b18:	2310      	movs	r3, #16
 8000b1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b20:	2300      	movs	r3, #0
 8000b22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b24:	2300      	movs	r3, #0
 8000b26:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b28:	f107 031c 	add.w	r3, r7, #28
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	482a      	ldr	r0, [pc, #168]	; (8000bd8 <MX_GPIO_Init+0x1e0>)
 8000b30:	f000 fb6a 	bl	8001208 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000b34:	f244 0381 	movw	r3, #16513	; 0x4081
 8000b38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b42:	2300      	movs	r3, #0
 8000b44:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b46:	f107 031c 	add.w	r3, r7, #28
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	4823      	ldr	r0, [pc, #140]	; (8000bdc <MX_GPIO_Init+0x1e4>)
 8000b4e:	f000 fb5b 	bl	8001208 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000b52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b60:	2303      	movs	r3, #3
 8000b62:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b64:	230b      	movs	r3, #11
 8000b66:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000b68:	f107 031c 	add.w	r3, r7, #28
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	481b      	ldr	r0, [pc, #108]	; (8000bdc <MX_GPIO_Init+0x1e4>)
 8000b70:	f000 fb4a 	bl	8001208 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000b74:	2340      	movs	r3, #64	; 0x40
 8000b76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b80:	2300      	movs	r3, #0
 8000b82:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b84:	f107 031c 	add.w	r3, r7, #28
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4815      	ldr	r0, [pc, #84]	; (8000be0 <MX_GPIO_Init+0x1e8>)
 8000b8c:	f000 fb3c 	bl	8001208 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b90:	2380      	movs	r3, #128	; 0x80
 8000b92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b94:	2300      	movs	r3, #0
 8000b96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b9c:	f107 031c 	add.w	r3, r7, #28
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	480f      	ldr	r0, [pc, #60]	; (8000be0 <MX_GPIO_Init+0x1e8>)
 8000ba4:	f000 fb30 	bl	8001208 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000ba8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000bac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bae:	2302      	movs	r3, #2
 8000bb0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb6:	2303      	movs	r3, #3
 8000bb8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bba:	230b      	movs	r3, #11
 8000bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bbe:	f107 031c 	add.w	r3, r7, #28
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	4806      	ldr	r0, [pc, #24]	; (8000be0 <MX_GPIO_Init+0x1e8>)
 8000bc6:	f000 fb1f 	bl	8001208 <HAL_GPIO_Init>

}
 8000bca:	bf00      	nop
 8000bcc:	3730      	adds	r7, #48	; 0x30
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	40023800 	.word	0x40023800
 8000bd8:	40020000 	.word	0x40020000
 8000bdc:	40020400 	.word	0x40020400
 8000be0:	40021800 	.word	0x40021800
 8000be4:	10110000 	.word	0x10110000
 8000be8:	40020800 	.word	0x40020800

08000bec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000bf0:	bf00      	nop
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
	...

08000bfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c02:	4b0f      	ldr	r3, [pc, #60]	; (8000c40 <HAL_MspInit+0x44>)
 8000c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c06:	4a0e      	ldr	r2, [pc, #56]	; (8000c40 <HAL_MspInit+0x44>)
 8000c08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c0e:	4b0c      	ldr	r3, [pc, #48]	; (8000c40 <HAL_MspInit+0x44>)
 8000c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c16:	607b      	str	r3, [r7, #4]
 8000c18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c1a:	4b09      	ldr	r3, [pc, #36]	; (8000c40 <HAL_MspInit+0x44>)
 8000c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c1e:	4a08      	ldr	r2, [pc, #32]	; (8000c40 <HAL_MspInit+0x44>)
 8000c20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c24:	6453      	str	r3, [r2, #68]	; 0x44
 8000c26:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <HAL_MspInit+0x44>)
 8000c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c2e:	603b      	str	r3, [r7, #0]
 8000c30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c32:	bf00      	nop
 8000c34:	370c      	adds	r7, #12
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	40023800 	.word	0x40023800

08000c44 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b08a      	sub	sp, #40	; 0x28
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4c:	f107 0314 	add.w	r3, r7, #20
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	605a      	str	r2, [r3, #4]
 8000c56:	609a      	str	r2, [r3, #8]
 8000c58:	60da      	str	r2, [r3, #12]
 8000c5a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a25      	ldr	r2, [pc, #148]	; (8000cf8 <HAL_SPI_MspInit+0xb4>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d143      	bne.n	8000cee <HAL_SPI_MspInit+0xaa>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c66:	4b25      	ldr	r3, [pc, #148]	; (8000cfc <HAL_SPI_MspInit+0xb8>)
 8000c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c6a:	4a24      	ldr	r2, [pc, #144]	; (8000cfc <HAL_SPI_MspInit+0xb8>)
 8000c6c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c70:	6453      	str	r3, [r2, #68]	; 0x44
 8000c72:	4b22      	ldr	r3, [pc, #136]	; (8000cfc <HAL_SPI_MspInit+0xb8>)
 8000c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c7a:	613b      	str	r3, [r7, #16]
 8000c7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c7e:	4b1f      	ldr	r3, [pc, #124]	; (8000cfc <HAL_SPI_MspInit+0xb8>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	4a1e      	ldr	r2, [pc, #120]	; (8000cfc <HAL_SPI_MspInit+0xb8>)
 8000c84:	f043 0301 	orr.w	r3, r3, #1
 8000c88:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8a:	4b1c      	ldr	r3, [pc, #112]	; (8000cfc <HAL_SPI_MspInit+0xb8>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	f003 0301 	and.w	r3, r3, #1
 8000c92:	60fb      	str	r3, [r7, #12]
 8000c94:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c96:	4b19      	ldr	r3, [pc, #100]	; (8000cfc <HAL_SPI_MspInit+0xb8>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	4a18      	ldr	r2, [pc, #96]	; (8000cfc <HAL_SPI_MspInit+0xb8>)
 8000c9c:	f043 0302 	orr.w	r3, r3, #2
 8000ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca2:	4b16      	ldr	r3, [pc, #88]	; (8000cfc <HAL_SPI_MspInit+0xb8>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	f003 0302 	and.w	r3, r3, #2
 8000caa:	60bb      	str	r3, [r7, #8]
 8000cac:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000cae:	2360      	movs	r3, #96	; 0x60
 8000cb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cba:	2303      	movs	r3, #3
 8000cbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cbe:	2305      	movs	r3, #5
 8000cc0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc2:	f107 0314 	add.w	r3, r7, #20
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	480d      	ldr	r0, [pc, #52]	; (8000d00 <HAL_SPI_MspInit+0xbc>)
 8000cca:	f000 fa9d 	bl	8001208 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000cce:	2320      	movs	r3, #32
 8000cd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cda:	2303      	movs	r3, #3
 8000cdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cde:	2305      	movs	r3, #5
 8000ce0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ce2:	f107 0314 	add.w	r3, r7, #20
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	4806      	ldr	r0, [pc, #24]	; (8000d04 <HAL_SPI_MspInit+0xc0>)
 8000cea:	f000 fa8d 	bl	8001208 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000cee:	bf00      	nop
 8000cf0:	3728      	adds	r7, #40	; 0x28
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	40013000 	.word	0x40013000
 8000cfc:	40023800 	.word	0x40023800
 8000d00:	40020000 	.word	0x40020000
 8000d04:	40020400 	.word	0x40020400

08000d08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b08a      	sub	sp, #40	; 0x28
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d10:	f107 0314 	add.w	r3, r7, #20
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	605a      	str	r2, [r3, #4]
 8000d1a:	609a      	str	r2, [r3, #8]
 8000d1c:	60da      	str	r2, [r3, #12]
 8000d1e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a17      	ldr	r2, [pc, #92]	; (8000d84 <HAL_UART_MspInit+0x7c>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d128      	bne.n	8000d7c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d2a:	4b17      	ldr	r3, [pc, #92]	; (8000d88 <HAL_UART_MspInit+0x80>)
 8000d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2e:	4a16      	ldr	r2, [pc, #88]	; (8000d88 <HAL_UART_MspInit+0x80>)
 8000d30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d34:	6413      	str	r3, [r2, #64]	; 0x40
 8000d36:	4b14      	ldr	r3, [pc, #80]	; (8000d88 <HAL_UART_MspInit+0x80>)
 8000d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d3e:	613b      	str	r3, [r7, #16]
 8000d40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d42:	4b11      	ldr	r3, [pc, #68]	; (8000d88 <HAL_UART_MspInit+0x80>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d46:	4a10      	ldr	r2, [pc, #64]	; (8000d88 <HAL_UART_MspInit+0x80>)
 8000d48:	f043 0308 	orr.w	r3, r3, #8
 8000d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d4e:	4b0e      	ldr	r3, [pc, #56]	; (8000d88 <HAL_UART_MspInit+0x80>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d52:	f003 0308 	and.w	r3, r3, #8
 8000d56:	60fb      	str	r3, [r7, #12]
 8000d58:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000d5a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d60:	2302      	movs	r3, #2
 8000d62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d64:	2300      	movs	r3, #0
 8000d66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d68:	2303      	movs	r3, #3
 8000d6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d6c:	2307      	movs	r3, #7
 8000d6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d70:	f107 0314 	add.w	r3, r7, #20
 8000d74:	4619      	mov	r1, r3
 8000d76:	4805      	ldr	r0, [pc, #20]	; (8000d8c <HAL_UART_MspInit+0x84>)
 8000d78:	f000 fa46 	bl	8001208 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d7c:	bf00      	nop
 8000d7e:	3728      	adds	r7, #40	; 0x28
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	40004800 	.word	0x40004800
 8000d88:	40023800 	.word	0x40023800
 8000d8c:	40020c00 	.word	0x40020c00

08000d90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000d94:	bf00      	nop
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr

08000d9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d9e:	b480      	push	{r7}
 8000da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000da2:	e7fe      	b.n	8000da2 <HardFault_Handler+0x4>

08000da4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000da8:	e7fe      	b.n	8000da8 <MemManage_Handler+0x4>

08000daa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000daa:	b480      	push	{r7}
 8000dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dae:	e7fe      	b.n	8000dae <BusFault_Handler+0x4>

08000db0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000db4:	e7fe      	b.n	8000db4 <UsageFault_Handler+0x4>

08000db6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000db6:	b480      	push	{r7}
 8000db8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dba:	bf00      	nop
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr

08000dc4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dc8:	bf00      	nop
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr

08000dd2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dd2:	b480      	push	{r7}
 8000dd4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr

08000de0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000de4:	f000 f8ba 	bl	8000f5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000de8:	bf00      	nop
 8000dea:	bd80      	pop	{r7, pc}

08000dec <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000df0:	4802      	ldr	r0, [pc, #8]	; (8000dfc <OTG_FS_IRQHandler+0x10>)
 8000df2:	f000 fd2e 	bl	8001852 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000df6:	bf00      	nop
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	20001848 	.word	0x20001848

08000e00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b086      	sub	sp, #24
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e08:	4a14      	ldr	r2, [pc, #80]	; (8000e5c <_sbrk+0x5c>)
 8000e0a:	4b15      	ldr	r3, [pc, #84]	; (8000e60 <_sbrk+0x60>)
 8000e0c:	1ad3      	subs	r3, r2, r3
 8000e0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e14:	4b13      	ldr	r3, [pc, #76]	; (8000e64 <_sbrk+0x64>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d102      	bne.n	8000e22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e1c:	4b11      	ldr	r3, [pc, #68]	; (8000e64 <_sbrk+0x64>)
 8000e1e:	4a12      	ldr	r2, [pc, #72]	; (8000e68 <_sbrk+0x68>)
 8000e20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e22:	4b10      	ldr	r3, [pc, #64]	; (8000e64 <_sbrk+0x64>)
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4413      	add	r3, r2
 8000e2a:	693a      	ldr	r2, [r7, #16]
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	d207      	bcs.n	8000e40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e30:	f007 fd94 	bl	800895c <__errno>
 8000e34:	4603      	mov	r3, r0
 8000e36:	220c      	movs	r2, #12
 8000e38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e3e:	e009      	b.n	8000e54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e40:	4b08      	ldr	r3, [pc, #32]	; (8000e64 <_sbrk+0x64>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e46:	4b07      	ldr	r3, [pc, #28]	; (8000e64 <_sbrk+0x64>)
 8000e48:	681a      	ldr	r2, [r3, #0]
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4413      	add	r3, r2
 8000e4e:	4a05      	ldr	r2, [pc, #20]	; (8000e64 <_sbrk+0x64>)
 8000e50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e52:	68fb      	ldr	r3, [r7, #12]
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	3718      	adds	r7, #24
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	20080000 	.word	0x20080000
 8000e60:	00000400 	.word	0x00000400
 8000e64:	20000218 	.word	0x20000218
 8000e68:	20001c60 	.word	0x20001c60

08000e6c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e70:	4b06      	ldr	r3, [pc, #24]	; (8000e8c <SystemInit+0x20>)
 8000e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e76:	4a05      	ldr	r2, [pc, #20]	; (8000e8c <SystemInit+0x20>)
 8000e78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e80:	bf00      	nop
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	e000ed00 	.word	0xe000ed00

08000e90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ec8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e94:	480d      	ldr	r0, [pc, #52]	; (8000ecc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e96:	490e      	ldr	r1, [pc, #56]	; (8000ed0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e98:	4a0e      	ldr	r2, [pc, #56]	; (8000ed4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e9c:	e002      	b.n	8000ea4 <LoopCopyDataInit>

08000e9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ea0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ea2:	3304      	adds	r3, #4

08000ea4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ea4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ea6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ea8:	d3f9      	bcc.n	8000e9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eaa:	4a0b      	ldr	r2, [pc, #44]	; (8000ed8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000eac:	4c0b      	ldr	r4, [pc, #44]	; (8000edc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000eae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000eb0:	e001      	b.n	8000eb6 <LoopFillZerobss>

08000eb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eb4:	3204      	adds	r2, #4

08000eb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eb8:	d3fb      	bcc.n	8000eb2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000eba:	f7ff ffd7 	bl	8000e6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ebe:	f007 fd53 	bl	8008968 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ec2:	f7ff fbbb 	bl	800063c <main>
  bx  lr    
 8000ec6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ec8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000ecc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ed0:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8000ed4:	0800933c 	.word	0x0800933c
  ldr r2, =_sbss
 8000ed8:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8000edc:	20001c5c 	.word	0x20001c5c

08000ee0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ee0:	e7fe      	b.n	8000ee0 <ADC_IRQHandler>

08000ee2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ee6:	2003      	movs	r0, #3
 8000ee8:	f000 f94c 	bl	8001184 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eec:	2000      	movs	r0, #0
 8000eee:	f000 f805 	bl	8000efc <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000ef2:	f7ff fe83 	bl	8000bfc <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000ef6:	2300      	movs	r3, #0
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	bd80      	pop	{r7, pc}

08000efc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f04:	4b12      	ldr	r3, [pc, #72]	; (8000f50 <HAL_InitTick+0x54>)
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	4b12      	ldr	r3, [pc, #72]	; (8000f54 <HAL_InitTick+0x58>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f12:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f000 f967 	bl	80011ee <HAL_SYSTICK_Config>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f26:	2301      	movs	r3, #1
 8000f28:	e00e      	b.n	8000f48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2b0f      	cmp	r3, #15
 8000f2e:	d80a      	bhi.n	8000f46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f30:	2200      	movs	r2, #0
 8000f32:	6879      	ldr	r1, [r7, #4]
 8000f34:	f04f 30ff 	mov.w	r0, #4294967295
 8000f38:	f000 f92f 	bl	800119a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f3c:	4a06      	ldr	r2, [pc, #24]	; (8000f58 <HAL_InitTick+0x5c>)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f42:	2300      	movs	r3, #0
 8000f44:	e000      	b.n	8000f48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f46:	2301      	movs	r3, #1
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	3708      	adds	r7, #8
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	20000000 	.word	0x20000000
 8000f54:	20000008 	.word	0x20000008
 8000f58:	20000004 	.word	0x20000004

08000f5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f60:	4b06      	ldr	r3, [pc, #24]	; (8000f7c <HAL_IncTick+0x20>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	461a      	mov	r2, r3
 8000f66:	4b06      	ldr	r3, [pc, #24]	; (8000f80 <HAL_IncTick+0x24>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4413      	add	r3, r2
 8000f6c:	4a04      	ldr	r2, [pc, #16]	; (8000f80 <HAL_IncTick+0x24>)
 8000f6e:	6013      	str	r3, [r2, #0]
}
 8000f70:	bf00      	nop
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	20000008 	.word	0x20000008
 8000f80:	20000374 	.word	0x20000374

08000f84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  return uwTick;
 8000f88:	4b03      	ldr	r3, [pc, #12]	; (8000f98 <HAL_GetTick+0x14>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	20000374 	.word	0x20000374

08000f9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fa4:	f7ff ffee 	bl	8000f84 <HAL_GetTick>
 8000fa8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fb4:	d005      	beq.n	8000fc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fb6:	4b0a      	ldr	r3, [pc, #40]	; (8000fe0 <HAL_Delay+0x44>)
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	461a      	mov	r2, r3
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	4413      	add	r3, r2
 8000fc0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fc2:	bf00      	nop
 8000fc4:	f7ff ffde 	bl	8000f84 <HAL_GetTick>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	68bb      	ldr	r3, [r7, #8]
 8000fcc:	1ad3      	subs	r3, r2, r3
 8000fce:	68fa      	ldr	r2, [r7, #12]
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	d8f7      	bhi.n	8000fc4 <HAL_Delay+0x28>
  {
  }
}
 8000fd4:	bf00      	nop
 8000fd6:	bf00      	nop
 8000fd8:	3710      	adds	r7, #16
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	20000008 	.word	0x20000008

08000fe4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b085      	sub	sp, #20
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	f003 0307 	and.w	r3, r3, #7
 8000ff2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ff4:	4b0b      	ldr	r3, [pc, #44]	; (8001024 <__NVIC_SetPriorityGrouping+0x40>)
 8000ff6:	68db      	ldr	r3, [r3, #12]
 8000ff8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ffa:	68ba      	ldr	r2, [r7, #8]
 8000ffc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001000:	4013      	ands	r3, r2
 8001002:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800100c:	4b06      	ldr	r3, [pc, #24]	; (8001028 <__NVIC_SetPriorityGrouping+0x44>)
 800100e:	4313      	orrs	r3, r2
 8001010:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001012:	4a04      	ldr	r2, [pc, #16]	; (8001024 <__NVIC_SetPriorityGrouping+0x40>)
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	60d3      	str	r3, [r2, #12]
}
 8001018:	bf00      	nop
 800101a:	3714      	adds	r7, #20
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr
 8001024:	e000ed00 	.word	0xe000ed00
 8001028:	05fa0000 	.word	0x05fa0000

0800102c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001030:	4b04      	ldr	r3, [pc, #16]	; (8001044 <__NVIC_GetPriorityGrouping+0x18>)
 8001032:	68db      	ldr	r3, [r3, #12]
 8001034:	0a1b      	lsrs	r3, r3, #8
 8001036:	f003 0307 	and.w	r3, r3, #7
}
 800103a:	4618      	mov	r0, r3
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr
 8001044:	e000ed00 	.word	0xe000ed00

08001048 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001056:	2b00      	cmp	r3, #0
 8001058:	db0b      	blt.n	8001072 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800105a:	79fb      	ldrb	r3, [r7, #7]
 800105c:	f003 021f 	and.w	r2, r3, #31
 8001060:	4907      	ldr	r1, [pc, #28]	; (8001080 <__NVIC_EnableIRQ+0x38>)
 8001062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001066:	095b      	lsrs	r3, r3, #5
 8001068:	2001      	movs	r0, #1
 800106a:	fa00 f202 	lsl.w	r2, r0, r2
 800106e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001072:	bf00      	nop
 8001074:	370c      	adds	r7, #12
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	e000e100 	.word	0xe000e100

08001084 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	4603      	mov	r3, r0
 800108c:	6039      	str	r1, [r7, #0]
 800108e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001090:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001094:	2b00      	cmp	r3, #0
 8001096:	db0a      	blt.n	80010ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	b2da      	uxtb	r2, r3
 800109c:	490c      	ldr	r1, [pc, #48]	; (80010d0 <__NVIC_SetPriority+0x4c>)
 800109e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a2:	0112      	lsls	r2, r2, #4
 80010a4:	b2d2      	uxtb	r2, r2
 80010a6:	440b      	add	r3, r1
 80010a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010ac:	e00a      	b.n	80010c4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	b2da      	uxtb	r2, r3
 80010b2:	4908      	ldr	r1, [pc, #32]	; (80010d4 <__NVIC_SetPriority+0x50>)
 80010b4:	79fb      	ldrb	r3, [r7, #7]
 80010b6:	f003 030f 	and.w	r3, r3, #15
 80010ba:	3b04      	subs	r3, #4
 80010bc:	0112      	lsls	r2, r2, #4
 80010be:	b2d2      	uxtb	r2, r2
 80010c0:	440b      	add	r3, r1
 80010c2:	761a      	strb	r2, [r3, #24]
}
 80010c4:	bf00      	nop
 80010c6:	370c      	adds	r7, #12
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr
 80010d0:	e000e100 	.word	0xe000e100
 80010d4:	e000ed00 	.word	0xe000ed00

080010d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010d8:	b480      	push	{r7}
 80010da:	b089      	sub	sp, #36	; 0x24
 80010dc:	af00      	add	r7, sp, #0
 80010de:	60f8      	str	r0, [r7, #12]
 80010e0:	60b9      	str	r1, [r7, #8]
 80010e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	f003 0307 	and.w	r3, r3, #7
 80010ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010ec:	69fb      	ldr	r3, [r7, #28]
 80010ee:	f1c3 0307 	rsb	r3, r3, #7
 80010f2:	2b04      	cmp	r3, #4
 80010f4:	bf28      	it	cs
 80010f6:	2304      	movcs	r3, #4
 80010f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	3304      	adds	r3, #4
 80010fe:	2b06      	cmp	r3, #6
 8001100:	d902      	bls.n	8001108 <NVIC_EncodePriority+0x30>
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	3b03      	subs	r3, #3
 8001106:	e000      	b.n	800110a <NVIC_EncodePriority+0x32>
 8001108:	2300      	movs	r3, #0
 800110a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800110c:	f04f 32ff 	mov.w	r2, #4294967295
 8001110:	69bb      	ldr	r3, [r7, #24]
 8001112:	fa02 f303 	lsl.w	r3, r2, r3
 8001116:	43da      	mvns	r2, r3
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	401a      	ands	r2, r3
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001120:	f04f 31ff 	mov.w	r1, #4294967295
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	fa01 f303 	lsl.w	r3, r1, r3
 800112a:	43d9      	mvns	r1, r3
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001130:	4313      	orrs	r3, r2
         );
}
 8001132:	4618      	mov	r0, r3
 8001134:	3724      	adds	r7, #36	; 0x24
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
	...

08001140 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	3b01      	subs	r3, #1
 800114c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001150:	d301      	bcc.n	8001156 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001152:	2301      	movs	r3, #1
 8001154:	e00f      	b.n	8001176 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001156:	4a0a      	ldr	r2, [pc, #40]	; (8001180 <SysTick_Config+0x40>)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	3b01      	subs	r3, #1
 800115c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800115e:	210f      	movs	r1, #15
 8001160:	f04f 30ff 	mov.w	r0, #4294967295
 8001164:	f7ff ff8e 	bl	8001084 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001168:	4b05      	ldr	r3, [pc, #20]	; (8001180 <SysTick_Config+0x40>)
 800116a:	2200      	movs	r2, #0
 800116c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800116e:	4b04      	ldr	r3, [pc, #16]	; (8001180 <SysTick_Config+0x40>)
 8001170:	2207      	movs	r2, #7
 8001172:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001174:	2300      	movs	r3, #0
}
 8001176:	4618      	mov	r0, r3
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	e000e010 	.word	0xe000e010

08001184 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800118c:	6878      	ldr	r0, [r7, #4]
 800118e:	f7ff ff29 	bl	8000fe4 <__NVIC_SetPriorityGrouping>
}
 8001192:	bf00      	nop
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}

0800119a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800119a:	b580      	push	{r7, lr}
 800119c:	b086      	sub	sp, #24
 800119e:	af00      	add	r7, sp, #0
 80011a0:	4603      	mov	r3, r0
 80011a2:	60b9      	str	r1, [r7, #8]
 80011a4:	607a      	str	r2, [r7, #4]
 80011a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80011a8:	2300      	movs	r3, #0
 80011aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011ac:	f7ff ff3e 	bl	800102c <__NVIC_GetPriorityGrouping>
 80011b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011b2:	687a      	ldr	r2, [r7, #4]
 80011b4:	68b9      	ldr	r1, [r7, #8]
 80011b6:	6978      	ldr	r0, [r7, #20]
 80011b8:	f7ff ff8e 	bl	80010d8 <NVIC_EncodePriority>
 80011bc:	4602      	mov	r2, r0
 80011be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011c2:	4611      	mov	r1, r2
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff ff5d 	bl	8001084 <__NVIC_SetPriority>
}
 80011ca:	bf00      	nop
 80011cc:	3718      	adds	r7, #24
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}

080011d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011d2:	b580      	push	{r7, lr}
 80011d4:	b082      	sub	sp, #8
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	4603      	mov	r3, r0
 80011da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7ff ff31 	bl	8001048 <__NVIC_EnableIRQ>
}
 80011e6:	bf00      	nop
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}

080011ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011ee:	b580      	push	{r7, lr}
 80011f0:	b082      	sub	sp, #8
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	f7ff ffa2 	bl	8001140 <SysTick_Config>
 80011fc:	4603      	mov	r3, r0
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
	...

08001208 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001208:	b480      	push	{r7}
 800120a:	b089      	sub	sp, #36	; 0x24
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001212:	2300      	movs	r3, #0
 8001214:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001216:	2300      	movs	r3, #0
 8001218:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800121a:	2300      	movs	r3, #0
 800121c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800121e:	2300      	movs	r3, #0
 8001220:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001222:	2300      	movs	r3, #0
 8001224:	61fb      	str	r3, [r7, #28]
 8001226:	e175      	b.n	8001514 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001228:	2201      	movs	r2, #1
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	697a      	ldr	r2, [r7, #20]
 8001238:	4013      	ands	r3, r2
 800123a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800123c:	693a      	ldr	r2, [r7, #16]
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	429a      	cmp	r2, r3
 8001242:	f040 8164 	bne.w	800150e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	2b01      	cmp	r3, #1
 800124c:	d00b      	beq.n	8001266 <HAL_GPIO_Init+0x5e>
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	2b02      	cmp	r3, #2
 8001254:	d007      	beq.n	8001266 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800125a:	2b11      	cmp	r3, #17
 800125c:	d003      	beq.n	8001266 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	2b12      	cmp	r3, #18
 8001264:	d130      	bne.n	80012c8 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	005b      	lsls	r3, r3, #1
 8001270:	2203      	movs	r2, #3
 8001272:	fa02 f303 	lsl.w	r3, r2, r3
 8001276:	43db      	mvns	r3, r3
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	4013      	ands	r3, r2
 800127c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	68da      	ldr	r2, [r3, #12]
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	005b      	lsls	r3, r3, #1
 8001286:	fa02 f303 	lsl.w	r3, r2, r3
 800128a:	69ba      	ldr	r2, [r7, #24]
 800128c:	4313      	orrs	r3, r2
 800128e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	69ba      	ldr	r2, [r7, #24]
 8001294:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800129c:	2201      	movs	r2, #1
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	43db      	mvns	r3, r3
 80012a6:	69ba      	ldr	r2, [r7, #24]
 80012a8:	4013      	ands	r3, r2
 80012aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	091b      	lsrs	r3, r3, #4
 80012b2:	f003 0201 	and.w	r2, r3, #1
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	fa02 f303 	lsl.w	r3, r2, r3
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	4313      	orrs	r3, r2
 80012c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	68db      	ldr	r3, [r3, #12]
 80012cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	005b      	lsls	r3, r3, #1
 80012d2:	2203      	movs	r2, #3
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	43db      	mvns	r3, r3
 80012da:	69ba      	ldr	r2, [r7, #24]
 80012dc:	4013      	ands	r3, r2
 80012de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	689a      	ldr	r2, [r3, #8]
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	005b      	lsls	r3, r3, #1
 80012e8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	2b02      	cmp	r3, #2
 80012fe:	d003      	beq.n	8001308 <HAL_GPIO_Init+0x100>
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	2b12      	cmp	r3, #18
 8001306:	d123      	bne.n	8001350 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	08da      	lsrs	r2, r3, #3
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	3208      	adds	r2, #8
 8001310:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001314:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	f003 0307 	and.w	r3, r3, #7
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	220f      	movs	r2, #15
 8001320:	fa02 f303 	lsl.w	r3, r2, r3
 8001324:	43db      	mvns	r3, r3
 8001326:	69ba      	ldr	r2, [r7, #24]
 8001328:	4013      	ands	r3, r2
 800132a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	691a      	ldr	r2, [r3, #16]
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	f003 0307 	and.w	r3, r3, #7
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	fa02 f303 	lsl.w	r3, r2, r3
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	4313      	orrs	r3, r2
 8001340:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	08da      	lsrs	r2, r3, #3
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	3208      	adds	r2, #8
 800134a:	69b9      	ldr	r1, [r7, #24]
 800134c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	2203      	movs	r2, #3
 800135c:	fa02 f303 	lsl.w	r3, r2, r3
 8001360:	43db      	mvns	r3, r3
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	4013      	ands	r3, r2
 8001366:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f003 0203 	and.w	r2, r3, #3
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	005b      	lsls	r3, r3, #1
 8001374:	fa02 f303 	lsl.w	r3, r2, r3
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	4313      	orrs	r3, r2
 800137c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	69ba      	ldr	r2, [r7, #24]
 8001382:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800138c:	2b00      	cmp	r3, #0
 800138e:	f000 80be 	beq.w	800150e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001392:	4b66      	ldr	r3, [pc, #408]	; (800152c <HAL_GPIO_Init+0x324>)
 8001394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001396:	4a65      	ldr	r2, [pc, #404]	; (800152c <HAL_GPIO_Init+0x324>)
 8001398:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800139c:	6453      	str	r3, [r2, #68]	; 0x44
 800139e:	4b63      	ldr	r3, [pc, #396]	; (800152c <HAL_GPIO_Init+0x324>)
 80013a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013a6:	60fb      	str	r3, [r7, #12]
 80013a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80013aa:	4a61      	ldr	r2, [pc, #388]	; (8001530 <HAL_GPIO_Init+0x328>)
 80013ac:	69fb      	ldr	r3, [r7, #28]
 80013ae:	089b      	lsrs	r3, r3, #2
 80013b0:	3302      	adds	r3, #2
 80013b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	f003 0303 	and.w	r3, r3, #3
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	220f      	movs	r2, #15
 80013c2:	fa02 f303 	lsl.w	r3, r2, r3
 80013c6:	43db      	mvns	r3, r3
 80013c8:	69ba      	ldr	r2, [r7, #24]
 80013ca:	4013      	ands	r3, r2
 80013cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4a58      	ldr	r2, [pc, #352]	; (8001534 <HAL_GPIO_Init+0x32c>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d037      	beq.n	8001446 <HAL_GPIO_Init+0x23e>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4a57      	ldr	r2, [pc, #348]	; (8001538 <HAL_GPIO_Init+0x330>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d031      	beq.n	8001442 <HAL_GPIO_Init+0x23a>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4a56      	ldr	r2, [pc, #344]	; (800153c <HAL_GPIO_Init+0x334>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d02b      	beq.n	800143e <HAL_GPIO_Init+0x236>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4a55      	ldr	r2, [pc, #340]	; (8001540 <HAL_GPIO_Init+0x338>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d025      	beq.n	800143a <HAL_GPIO_Init+0x232>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4a54      	ldr	r2, [pc, #336]	; (8001544 <HAL_GPIO_Init+0x33c>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d01f      	beq.n	8001436 <HAL_GPIO_Init+0x22e>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4a53      	ldr	r2, [pc, #332]	; (8001548 <HAL_GPIO_Init+0x340>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d019      	beq.n	8001432 <HAL_GPIO_Init+0x22a>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4a52      	ldr	r2, [pc, #328]	; (800154c <HAL_GPIO_Init+0x344>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d013      	beq.n	800142e <HAL_GPIO_Init+0x226>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4a51      	ldr	r2, [pc, #324]	; (8001550 <HAL_GPIO_Init+0x348>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d00d      	beq.n	800142a <HAL_GPIO_Init+0x222>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4a50      	ldr	r2, [pc, #320]	; (8001554 <HAL_GPIO_Init+0x34c>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d007      	beq.n	8001426 <HAL_GPIO_Init+0x21e>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4a4f      	ldr	r2, [pc, #316]	; (8001558 <HAL_GPIO_Init+0x350>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d101      	bne.n	8001422 <HAL_GPIO_Init+0x21a>
 800141e:	2309      	movs	r3, #9
 8001420:	e012      	b.n	8001448 <HAL_GPIO_Init+0x240>
 8001422:	230a      	movs	r3, #10
 8001424:	e010      	b.n	8001448 <HAL_GPIO_Init+0x240>
 8001426:	2308      	movs	r3, #8
 8001428:	e00e      	b.n	8001448 <HAL_GPIO_Init+0x240>
 800142a:	2307      	movs	r3, #7
 800142c:	e00c      	b.n	8001448 <HAL_GPIO_Init+0x240>
 800142e:	2306      	movs	r3, #6
 8001430:	e00a      	b.n	8001448 <HAL_GPIO_Init+0x240>
 8001432:	2305      	movs	r3, #5
 8001434:	e008      	b.n	8001448 <HAL_GPIO_Init+0x240>
 8001436:	2304      	movs	r3, #4
 8001438:	e006      	b.n	8001448 <HAL_GPIO_Init+0x240>
 800143a:	2303      	movs	r3, #3
 800143c:	e004      	b.n	8001448 <HAL_GPIO_Init+0x240>
 800143e:	2302      	movs	r3, #2
 8001440:	e002      	b.n	8001448 <HAL_GPIO_Init+0x240>
 8001442:	2301      	movs	r3, #1
 8001444:	e000      	b.n	8001448 <HAL_GPIO_Init+0x240>
 8001446:	2300      	movs	r3, #0
 8001448:	69fa      	ldr	r2, [r7, #28]
 800144a:	f002 0203 	and.w	r2, r2, #3
 800144e:	0092      	lsls	r2, r2, #2
 8001450:	4093      	lsls	r3, r2
 8001452:	69ba      	ldr	r2, [r7, #24]
 8001454:	4313      	orrs	r3, r2
 8001456:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001458:	4935      	ldr	r1, [pc, #212]	; (8001530 <HAL_GPIO_Init+0x328>)
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	089b      	lsrs	r3, r3, #2
 800145e:	3302      	adds	r3, #2
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001466:	4b3d      	ldr	r3, [pc, #244]	; (800155c <HAL_GPIO_Init+0x354>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	43db      	mvns	r3, r3
 8001470:	69ba      	ldr	r2, [r7, #24]
 8001472:	4013      	ands	r3, r2
 8001474:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800147e:	2b00      	cmp	r3, #0
 8001480:	d003      	beq.n	800148a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001482:	69ba      	ldr	r2, [r7, #24]
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	4313      	orrs	r3, r2
 8001488:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800148a:	4a34      	ldr	r2, [pc, #208]	; (800155c <HAL_GPIO_Init+0x354>)
 800148c:	69bb      	ldr	r3, [r7, #24]
 800148e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001490:	4b32      	ldr	r3, [pc, #200]	; (800155c <HAL_GPIO_Init+0x354>)
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	43db      	mvns	r3, r3
 800149a:	69ba      	ldr	r2, [r7, #24]
 800149c:	4013      	ands	r3, r2
 800149e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d003      	beq.n	80014b4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80014ac:	69ba      	ldr	r2, [r7, #24]
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	4313      	orrs	r3, r2
 80014b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014b4:	4a29      	ldr	r2, [pc, #164]	; (800155c <HAL_GPIO_Init+0x354>)
 80014b6:	69bb      	ldr	r3, [r7, #24]
 80014b8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014ba:	4b28      	ldr	r3, [pc, #160]	; (800155c <HAL_GPIO_Init+0x354>)
 80014bc:	689b      	ldr	r3, [r3, #8]
 80014be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	43db      	mvns	r3, r3
 80014c4:	69ba      	ldr	r2, [r7, #24]
 80014c6:	4013      	ands	r3, r2
 80014c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d003      	beq.n	80014de <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80014d6:	69ba      	ldr	r2, [r7, #24]
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	4313      	orrs	r3, r2
 80014dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014de:	4a1f      	ldr	r2, [pc, #124]	; (800155c <HAL_GPIO_Init+0x354>)
 80014e0:	69bb      	ldr	r3, [r7, #24]
 80014e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014e4:	4b1d      	ldr	r3, [pc, #116]	; (800155c <HAL_GPIO_Init+0x354>)
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	43db      	mvns	r3, r3
 80014ee:	69ba      	ldr	r2, [r7, #24]
 80014f0:	4013      	ands	r3, r2
 80014f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d003      	beq.n	8001508 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001500:	69ba      	ldr	r2, [r7, #24]
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	4313      	orrs	r3, r2
 8001506:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001508:	4a14      	ldr	r2, [pc, #80]	; (800155c <HAL_GPIO_Init+0x354>)
 800150a:	69bb      	ldr	r3, [r7, #24]
 800150c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	3301      	adds	r3, #1
 8001512:	61fb      	str	r3, [r7, #28]
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	2b0f      	cmp	r3, #15
 8001518:	f67f ae86 	bls.w	8001228 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800151c:	bf00      	nop
 800151e:	bf00      	nop
 8001520:	3724      	adds	r7, #36	; 0x24
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	40023800 	.word	0x40023800
 8001530:	40013800 	.word	0x40013800
 8001534:	40020000 	.word	0x40020000
 8001538:	40020400 	.word	0x40020400
 800153c:	40020800 	.word	0x40020800
 8001540:	40020c00 	.word	0x40020c00
 8001544:	40021000 	.word	0x40021000
 8001548:	40021400 	.word	0x40021400
 800154c:	40021800 	.word	0x40021800
 8001550:	40021c00 	.word	0x40021c00
 8001554:	40022000 	.word	0x40022000
 8001558:	40022400 	.word	0x40022400
 800155c:	40013c00 	.word	0x40013c00

08001560 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	460b      	mov	r3, r1
 800156a:	807b      	strh	r3, [r7, #2]
 800156c:	4613      	mov	r3, r2
 800156e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001570:	787b      	ldrb	r3, [r7, #1]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d003      	beq.n	800157e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001576:	887a      	ldrh	r2, [r7, #2]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800157c:	e003      	b.n	8001586 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800157e:	887b      	ldrh	r3, [r7, #2]
 8001580:	041a      	lsls	r2, r3, #16
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	619a      	str	r2, [r3, #24]
}
 8001586:	bf00      	nop
 8001588:	370c      	adds	r7, #12
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr

08001592 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001592:	b480      	push	{r7}
 8001594:	b085      	sub	sp, #20
 8001596:	af00      	add	r7, sp, #0
 8001598:	6078      	str	r0, [r7, #4]
 800159a:	460b      	mov	r3, r1
 800159c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	695b      	ldr	r3, [r3, #20]
 80015a2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80015a4:	887a      	ldrh	r2, [r7, #2]
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	4013      	ands	r3, r2
 80015aa:	041a      	lsls	r2, r3, #16
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	43d9      	mvns	r1, r3
 80015b0:	887b      	ldrh	r3, [r7, #2]
 80015b2:	400b      	ands	r3, r1
 80015b4:	431a      	orrs	r2, r3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	619a      	str	r2, [r3, #24]
}
 80015ba:	bf00      	nop
 80015bc:	3714      	adds	r7, #20
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr

080015c6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80015c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015c8:	b08f      	sub	sp, #60	; 0x3c
 80015ca:	af0a      	add	r7, sp, #40	; 0x28
 80015cc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d101      	bne.n	80015d8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80015d4:	2301      	movs	r3, #1
 80015d6:	e116      	b.n	8001806 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d106      	bne.n	80015f8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2200      	movs	r2, #0
 80015ee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80015f2:	6878      	ldr	r0, [r7, #4]
 80015f4:	f006 fe52 	bl	800829c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2203      	movs	r2, #3
 80015fc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001604:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001608:	2b00      	cmp	r3, #0
 800160a:	d102      	bne.n	8001612 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2200      	movs	r2, #0
 8001610:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4618      	mov	r0, r3
 8001618:	f003 fd7b 	bl	8005112 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	603b      	str	r3, [r7, #0]
 8001622:	687e      	ldr	r6, [r7, #4]
 8001624:	466d      	mov	r5, sp
 8001626:	f106 0410 	add.w	r4, r6, #16
 800162a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800162c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800162e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001630:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001632:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001636:	e885 0003 	stmia.w	r5, {r0, r1}
 800163a:	1d33      	adds	r3, r6, #4
 800163c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800163e:	6838      	ldr	r0, [r7, #0]
 8001640:	f003 fc5c 	bl	8004efc <USB_CoreInit>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d005      	beq.n	8001656 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2202      	movs	r2, #2
 800164e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e0d7      	b.n	8001806 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	2100      	movs	r1, #0
 800165c:	4618      	mov	r0, r3
 800165e:	f003 fd69 	bl	8005134 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001662:	2300      	movs	r3, #0
 8001664:	73fb      	strb	r3, [r7, #15]
 8001666:	e04a      	b.n	80016fe <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001668:	7bfa      	ldrb	r2, [r7, #15]
 800166a:	6879      	ldr	r1, [r7, #4]
 800166c:	4613      	mov	r3, r2
 800166e:	00db      	lsls	r3, r3, #3
 8001670:	1a9b      	subs	r3, r3, r2
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	440b      	add	r3, r1
 8001676:	333d      	adds	r3, #61	; 0x3d
 8001678:	2201      	movs	r2, #1
 800167a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800167c:	7bfa      	ldrb	r2, [r7, #15]
 800167e:	6879      	ldr	r1, [r7, #4]
 8001680:	4613      	mov	r3, r2
 8001682:	00db      	lsls	r3, r3, #3
 8001684:	1a9b      	subs	r3, r3, r2
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	440b      	add	r3, r1
 800168a:	333c      	adds	r3, #60	; 0x3c
 800168c:	7bfa      	ldrb	r2, [r7, #15]
 800168e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001690:	7bfa      	ldrb	r2, [r7, #15]
 8001692:	7bfb      	ldrb	r3, [r7, #15]
 8001694:	b298      	uxth	r0, r3
 8001696:	6879      	ldr	r1, [r7, #4]
 8001698:	4613      	mov	r3, r2
 800169a:	00db      	lsls	r3, r3, #3
 800169c:	1a9b      	subs	r3, r3, r2
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	440b      	add	r3, r1
 80016a2:	3342      	adds	r3, #66	; 0x42
 80016a4:	4602      	mov	r2, r0
 80016a6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80016a8:	7bfa      	ldrb	r2, [r7, #15]
 80016aa:	6879      	ldr	r1, [r7, #4]
 80016ac:	4613      	mov	r3, r2
 80016ae:	00db      	lsls	r3, r3, #3
 80016b0:	1a9b      	subs	r3, r3, r2
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	440b      	add	r3, r1
 80016b6:	333f      	adds	r3, #63	; 0x3f
 80016b8:	2200      	movs	r2, #0
 80016ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80016bc:	7bfa      	ldrb	r2, [r7, #15]
 80016be:	6879      	ldr	r1, [r7, #4]
 80016c0:	4613      	mov	r3, r2
 80016c2:	00db      	lsls	r3, r3, #3
 80016c4:	1a9b      	subs	r3, r3, r2
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	440b      	add	r3, r1
 80016ca:	3344      	adds	r3, #68	; 0x44
 80016cc:	2200      	movs	r2, #0
 80016ce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80016d0:	7bfa      	ldrb	r2, [r7, #15]
 80016d2:	6879      	ldr	r1, [r7, #4]
 80016d4:	4613      	mov	r3, r2
 80016d6:	00db      	lsls	r3, r3, #3
 80016d8:	1a9b      	subs	r3, r3, r2
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	440b      	add	r3, r1
 80016de:	3348      	adds	r3, #72	; 0x48
 80016e0:	2200      	movs	r2, #0
 80016e2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80016e4:	7bfa      	ldrb	r2, [r7, #15]
 80016e6:	6879      	ldr	r1, [r7, #4]
 80016e8:	4613      	mov	r3, r2
 80016ea:	00db      	lsls	r3, r3, #3
 80016ec:	1a9b      	subs	r3, r3, r2
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	440b      	add	r3, r1
 80016f2:	3350      	adds	r3, #80	; 0x50
 80016f4:	2200      	movs	r2, #0
 80016f6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016f8:	7bfb      	ldrb	r3, [r7, #15]
 80016fa:	3301      	adds	r3, #1
 80016fc:	73fb      	strb	r3, [r7, #15]
 80016fe:	7bfa      	ldrb	r2, [r7, #15]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	429a      	cmp	r2, r3
 8001706:	d3af      	bcc.n	8001668 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001708:	2300      	movs	r3, #0
 800170a:	73fb      	strb	r3, [r7, #15]
 800170c:	e044      	b.n	8001798 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800170e:	7bfa      	ldrb	r2, [r7, #15]
 8001710:	6879      	ldr	r1, [r7, #4]
 8001712:	4613      	mov	r3, r2
 8001714:	00db      	lsls	r3, r3, #3
 8001716:	1a9b      	subs	r3, r3, r2
 8001718:	009b      	lsls	r3, r3, #2
 800171a:	440b      	add	r3, r1
 800171c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001720:	2200      	movs	r2, #0
 8001722:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001724:	7bfa      	ldrb	r2, [r7, #15]
 8001726:	6879      	ldr	r1, [r7, #4]
 8001728:	4613      	mov	r3, r2
 800172a:	00db      	lsls	r3, r3, #3
 800172c:	1a9b      	subs	r3, r3, r2
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	440b      	add	r3, r1
 8001732:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001736:	7bfa      	ldrb	r2, [r7, #15]
 8001738:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800173a:	7bfa      	ldrb	r2, [r7, #15]
 800173c:	6879      	ldr	r1, [r7, #4]
 800173e:	4613      	mov	r3, r2
 8001740:	00db      	lsls	r3, r3, #3
 8001742:	1a9b      	subs	r3, r3, r2
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	440b      	add	r3, r1
 8001748:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800174c:	2200      	movs	r2, #0
 800174e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001750:	7bfa      	ldrb	r2, [r7, #15]
 8001752:	6879      	ldr	r1, [r7, #4]
 8001754:	4613      	mov	r3, r2
 8001756:	00db      	lsls	r3, r3, #3
 8001758:	1a9b      	subs	r3, r3, r2
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	440b      	add	r3, r1
 800175e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001762:	2200      	movs	r2, #0
 8001764:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001766:	7bfa      	ldrb	r2, [r7, #15]
 8001768:	6879      	ldr	r1, [r7, #4]
 800176a:	4613      	mov	r3, r2
 800176c:	00db      	lsls	r3, r3, #3
 800176e:	1a9b      	subs	r3, r3, r2
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	440b      	add	r3, r1
 8001774:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001778:	2200      	movs	r2, #0
 800177a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800177c:	7bfa      	ldrb	r2, [r7, #15]
 800177e:	6879      	ldr	r1, [r7, #4]
 8001780:	4613      	mov	r3, r2
 8001782:	00db      	lsls	r3, r3, #3
 8001784:	1a9b      	subs	r3, r3, r2
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	440b      	add	r3, r1
 800178a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800178e:	2200      	movs	r2, #0
 8001790:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001792:	7bfb      	ldrb	r3, [r7, #15]
 8001794:	3301      	adds	r3, #1
 8001796:	73fb      	strb	r3, [r7, #15]
 8001798:	7bfa      	ldrb	r2, [r7, #15]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	429a      	cmp	r2, r3
 80017a0:	d3b5      	bcc.n	800170e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	603b      	str	r3, [r7, #0]
 80017a8:	687e      	ldr	r6, [r7, #4]
 80017aa:	466d      	mov	r5, sp
 80017ac:	f106 0410 	add.w	r4, r6, #16
 80017b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017b8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80017bc:	e885 0003 	stmia.w	r5, {r0, r1}
 80017c0:	1d33      	adds	r3, r6, #4
 80017c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017c4:	6838      	ldr	r0, [r7, #0]
 80017c6:	f003 fcdf 	bl	8005188 <USB_DevInit>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d005      	beq.n	80017dc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2202      	movs	r2, #2
 80017d4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80017d8:	2301      	movs	r3, #1
 80017da:	e014      	b.n	8001806 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2200      	movs	r2, #0
 80017e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2201      	movs	r2, #1
 80017e8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d102      	bne.n	80017fa <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f001 f881 	bl	80028fc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4618      	mov	r0, r3
 8001800:	f004 fd37 	bl	8006272 <USB_DevDisconnect>

  return HAL_OK;
 8001804:	2300      	movs	r3, #0
}
 8001806:	4618      	mov	r0, r3
 8001808:	3714      	adds	r7, #20
 800180a:	46bd      	mov	sp, r7
 800180c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800180e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800180e:	b580      	push	{r7, lr}
 8001810:	b082      	sub	sp, #8
 8001812:	af00      	add	r7, sp, #0
 8001814:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800181c:	2b01      	cmp	r3, #1
 800181e:	d101      	bne.n	8001824 <HAL_PCD_Start+0x16>
 8001820:	2302      	movs	r3, #2
 8001822:	e012      	b.n	800184a <HAL_PCD_Start+0x3c>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2201      	movs	r2, #1
 8001828:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  __HAL_PCD_ENABLE(hpcd);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4618      	mov	r0, r3
 8001832:	f003 fc5d 	bl	80050f0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4618      	mov	r0, r3
 800183c:	f004 fcf8 	bl	8006230 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2200      	movs	r2, #0
 8001844:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001848:	2300      	movs	r3, #0
}
 800184a:	4618      	mov	r0, r3
 800184c:	3708      	adds	r7, #8
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}

08001852 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001852:	b590      	push	{r4, r7, lr}
 8001854:	b08d      	sub	sp, #52	; 0x34
 8001856:	af00      	add	r7, sp, #0
 8001858:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001860:	6a3b      	ldr	r3, [r7, #32]
 8001862:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4618      	mov	r0, r3
 800186a:	f004 fdb6 	bl	80063da <USB_GetMode>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	f040 83ca 	bne.w	800200a <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4618      	mov	r0, r3
 800187c:	f004 fd1a 	bl	80062b4 <USB_ReadInterrupts>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	f000 83c0 	beq.w	8002008 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4618      	mov	r0, r3
 800188e:	f004 fd11 	bl	80062b4 <USB_ReadInterrupts>
 8001892:	4603      	mov	r3, r0
 8001894:	f003 0302 	and.w	r3, r3, #2
 8001898:	2b02      	cmp	r3, #2
 800189a:	d107      	bne.n	80018ac <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	695a      	ldr	r2, [r3, #20]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f002 0202 	and.w	r2, r2, #2
 80018aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4618      	mov	r0, r3
 80018b2:	f004 fcff 	bl	80062b4 <USB_ReadInterrupts>
 80018b6:	4603      	mov	r3, r0
 80018b8:	f003 0310 	and.w	r3, r3, #16
 80018bc:	2b10      	cmp	r3, #16
 80018be:	d161      	bne.n	8001984 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	699a      	ldr	r2, [r3, #24]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f022 0210 	bic.w	r2, r2, #16
 80018ce:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80018d0:	6a3b      	ldr	r3, [r7, #32]
 80018d2:	6a1b      	ldr	r3, [r3, #32]
 80018d4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80018d6:	69bb      	ldr	r3, [r7, #24]
 80018d8:	f003 020f 	and.w	r2, r3, #15
 80018dc:	4613      	mov	r3, r2
 80018de:	00db      	lsls	r3, r3, #3
 80018e0:	1a9b      	subs	r3, r3, r2
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80018e8:	687a      	ldr	r2, [r7, #4]
 80018ea:	4413      	add	r3, r2
 80018ec:	3304      	adds	r3, #4
 80018ee:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80018f0:	69bb      	ldr	r3, [r7, #24]
 80018f2:	0c5b      	lsrs	r3, r3, #17
 80018f4:	f003 030f 	and.w	r3, r3, #15
 80018f8:	2b02      	cmp	r3, #2
 80018fa:	d124      	bne.n	8001946 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80018fc:	69ba      	ldr	r2, [r7, #24]
 80018fe:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001902:	4013      	ands	r3, r2
 8001904:	2b00      	cmp	r3, #0
 8001906:	d035      	beq.n	8001974 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800190c:	69bb      	ldr	r3, [r7, #24]
 800190e:	091b      	lsrs	r3, r3, #4
 8001910:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001912:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001916:	b29b      	uxth	r3, r3
 8001918:	461a      	mov	r2, r3
 800191a:	6a38      	ldr	r0, [r7, #32]
 800191c:	f004 fb65 	bl	8005fea <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	68da      	ldr	r2, [r3, #12]
 8001924:	69bb      	ldr	r3, [r7, #24]
 8001926:	091b      	lsrs	r3, r3, #4
 8001928:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800192c:	441a      	add	r2, r3
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	699a      	ldr	r2, [r3, #24]
 8001936:	69bb      	ldr	r3, [r7, #24]
 8001938:	091b      	lsrs	r3, r3, #4
 800193a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800193e:	441a      	add	r2, r3
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	619a      	str	r2, [r3, #24]
 8001944:	e016      	b.n	8001974 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001946:	69bb      	ldr	r3, [r7, #24]
 8001948:	0c5b      	lsrs	r3, r3, #17
 800194a:	f003 030f 	and.w	r3, r3, #15
 800194e:	2b06      	cmp	r3, #6
 8001950:	d110      	bne.n	8001974 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001958:	2208      	movs	r2, #8
 800195a:	4619      	mov	r1, r3
 800195c:	6a38      	ldr	r0, [r7, #32]
 800195e:	f004 fb44 	bl	8005fea <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	699a      	ldr	r2, [r3, #24]
 8001966:	69bb      	ldr	r3, [r7, #24]
 8001968:	091b      	lsrs	r3, r3, #4
 800196a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800196e:	441a      	add	r2, r3
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	699a      	ldr	r2, [r3, #24]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f042 0210 	orr.w	r2, r2, #16
 8001982:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4618      	mov	r0, r3
 800198a:	f004 fc93 	bl	80062b4 <USB_ReadInterrupts>
 800198e:	4603      	mov	r3, r0
 8001990:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001994:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001998:	d16e      	bne.n	8001a78 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800199a:	2300      	movs	r3, #0
 800199c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4618      	mov	r0, r3
 80019a4:	f004 fc99 	bl	80062da <USB_ReadDevAllOutEpInterrupt>
 80019a8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80019aa:	e062      	b.n	8001a72 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80019ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019ae:	f003 0301 	and.w	r3, r3, #1
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d057      	beq.n	8001a66 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019bc:	b2d2      	uxtb	r2, r2
 80019be:	4611      	mov	r1, r2
 80019c0:	4618      	mov	r0, r3
 80019c2:	f004 fcbe 	bl	8006342 <USB_ReadDevOutEPInterrupt>
 80019c6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	f003 0301 	and.w	r3, r3, #1
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d00c      	beq.n	80019ec <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80019d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d4:	015a      	lsls	r2, r3, #5
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	4413      	add	r3, r2
 80019da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80019de:	461a      	mov	r2, r3
 80019e0:	2301      	movs	r3, #1
 80019e2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80019e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f000 fdde 	bl	80025a8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	f003 0308 	and.w	r3, r3, #8
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d00c      	beq.n	8001a10 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80019f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f8:	015a      	lsls	r2, r3, #5
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	4413      	add	r3, r2
 80019fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a02:	461a      	mov	r2, r3
 8001a04:	2308      	movs	r3, #8
 8001a06:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001a08:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f000 fed8 	bl	80027c0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	f003 0310 	and.w	r3, r3, #16
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d008      	beq.n	8001a2c <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1c:	015a      	lsls	r2, r3, #5
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	4413      	add	r3, r2
 8001a22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a26:	461a      	mov	r2, r3
 8001a28:	2310      	movs	r3, #16
 8001a2a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	f003 0320 	and.w	r3, r3, #32
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d008      	beq.n	8001a48 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a38:	015a      	lsls	r2, r3, #5
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	4413      	add	r3, r2
 8001a3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a42:	461a      	mov	r2, r3
 8001a44:	2320      	movs	r3, #32
 8001a46:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d009      	beq.n	8001a66 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a54:	015a      	lsls	r2, r3, #5
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	4413      	add	r3, r2
 8001a5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a5e:	461a      	mov	r2, r3
 8001a60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a64:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a68:	3301      	adds	r3, #1
 8001a6a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a6e:	085b      	lsrs	r3, r3, #1
 8001a70:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d199      	bne.n	80019ac <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f004 fc19 	bl	80062b4 <USB_ReadInterrupts>
 8001a82:	4603      	mov	r3, r0
 8001a84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a88:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001a8c:	f040 80c0 	bne.w	8001c10 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4618      	mov	r0, r3
 8001a96:	f004 fc3a 	bl	800630e <USB_ReadDevAllInEpInterrupt>
 8001a9a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001aa0:	e0b2      	b.n	8001c08 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aa4:	f003 0301 	and.w	r3, r3, #1
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	f000 80a7 	beq.w	8001bfc <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ab4:	b2d2      	uxtb	r2, r2
 8001ab6:	4611      	mov	r1, r2
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f004 fc60 	bl	800637e <USB_ReadDevInEPInterrupt>
 8001abe:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	f003 0301 	and.w	r3, r3, #1
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d057      	beq.n	8001b7a <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001acc:	f003 030f 	and.w	r3, r3, #15
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ade:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	43db      	mvns	r3, r3
 8001ae4:	69f9      	ldr	r1, [r7, #28]
 8001ae6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001aea:	4013      	ands	r3, r2
 8001aec:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af0:	015a      	lsls	r2, r3, #5
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	4413      	add	r3, r2
 8001af6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001afa:	461a      	mov	r2, r3
 8001afc:	2301      	movs	r3, #1
 8001afe:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	691b      	ldr	r3, [r3, #16]
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d132      	bne.n	8001b6e <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001b08:	6879      	ldr	r1, [r7, #4]
 8001b0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	00db      	lsls	r3, r3, #3
 8001b10:	1a9b      	subs	r3, r3, r2
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	440b      	add	r3, r1
 8001b16:	3348      	adds	r3, #72	; 0x48
 8001b18:	6819      	ldr	r1, [r3, #0]
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b1e:	4613      	mov	r3, r2
 8001b20:	00db      	lsls	r3, r3, #3
 8001b22:	1a9b      	subs	r3, r3, r2
 8001b24:	009b      	lsls	r3, r3, #2
 8001b26:	4403      	add	r3, r0
 8001b28:	3344      	adds	r3, #68	; 0x44
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4419      	add	r1, r3
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b32:	4613      	mov	r3, r2
 8001b34:	00db      	lsls	r3, r3, #3
 8001b36:	1a9b      	subs	r3, r3, r2
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	4403      	add	r3, r0
 8001b3c:	3348      	adds	r3, #72	; 0x48
 8001b3e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d113      	bne.n	8001b6e <HAL_PCD_IRQHandler+0x31c>
 8001b46:	6879      	ldr	r1, [r7, #4]
 8001b48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b4a:	4613      	mov	r3, r2
 8001b4c:	00db      	lsls	r3, r3, #3
 8001b4e:	1a9b      	subs	r3, r3, r2
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	440b      	add	r3, r1
 8001b54:	3350      	adds	r3, #80	; 0x50
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d108      	bne.n	8001b6e <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6818      	ldr	r0, [r3, #0]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001b66:	461a      	mov	r2, r3
 8001b68:	2101      	movs	r1, #1
 8001b6a:	f004 fc69 	bl	8006440 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	4619      	mov	r1, r3
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f006 fc22 	bl	80083be <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	f003 0308 	and.w	r3, r3, #8
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d008      	beq.n	8001b96 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b86:	015a      	lsls	r2, r3, #5
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b90:	461a      	mov	r2, r3
 8001b92:	2308      	movs	r3, #8
 8001b94:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	f003 0310 	and.w	r3, r3, #16
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d008      	beq.n	8001bb2 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba2:	015a      	lsls	r2, r3, #5
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001bac:	461a      	mov	r2, r3
 8001bae:	2310      	movs	r3, #16
 8001bb0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d008      	beq.n	8001bce <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bbe:	015a      	lsls	r2, r3, #5
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	4413      	add	r3, r2
 8001bc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001bc8:	461a      	mov	r2, r3
 8001bca:	2340      	movs	r3, #64	; 0x40
 8001bcc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	f003 0302 	and.w	r3, r3, #2
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d008      	beq.n	8001bea <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bda:	015a      	lsls	r2, r3, #5
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	4413      	add	r3, r2
 8001be0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001be4:	461a      	mov	r2, r3
 8001be6:	2302      	movs	r3, #2
 8001be8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d003      	beq.n	8001bfc <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001bf4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f000 fc48 	bl	800248c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bfe:	3301      	adds	r3, #1
 8001c00:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c04:	085b      	lsrs	r3, r3, #1
 8001c06:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	f47f af49 	bne.w	8001aa2 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4618      	mov	r0, r3
 8001c16:	f004 fb4d 	bl	80062b4 <USB_ReadInterrupts>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001c20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001c24:	d122      	bne.n	8001c6c <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	69fa      	ldr	r2, [r7, #28]
 8001c30:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c34:	f023 0301 	bic.w	r3, r3, #1
 8001c38:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d108      	bne.n	8001c56 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2200      	movs	r2, #0
 8001c48:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001c4c:	2100      	movs	r1, #0
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f006 fe04 	bl	800885c <HAL_PCDEx_LPM_Callback>
 8001c54:	e002      	b.n	8001c5c <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f006 fc28 	bl	80084ac <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	695a      	ldr	r2, [r3, #20]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001c6a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4618      	mov	r0, r3
 8001c72:	f004 fb1f 	bl	80062b4 <USB_ReadInterrupts>
 8001c76:	4603      	mov	r3, r0
 8001c78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001c80:	d112      	bne.n	8001ca8 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	f003 0301 	and.w	r3, r3, #1
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d102      	bne.n	8001c98 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f006 fbe4 	bl	8008460 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	695a      	ldr	r2, [r3, #20]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001ca6:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4618      	mov	r0, r3
 8001cae:	f004 fb01 	bl	80062b4 <USB_ReadInterrupts>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001cb8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001cbc:	d121      	bne.n	8001d02 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	695a      	ldr	r2, [r3, #20]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8001ccc:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d111      	bne.n	8001cfc <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2201      	movs	r2, #1
 8001cdc:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ce6:	089b      	lsrs	r3, r3, #2
 8001ce8:	f003 020f 	and.w	r2, r3, #15
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001cf2:	2101      	movs	r1, #1
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	f006 fdb1 	bl	800885c <HAL_PCDEx_LPM_Callback>
 8001cfa:	e002      	b.n	8001d02 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f006 fbaf 	bl	8008460 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4618      	mov	r0, r3
 8001d08:	f004 fad4 	bl	80062b4 <USB_ReadInterrupts>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d16:	f040 80c7 	bne.w	8001ea8 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	69fa      	ldr	r2, [r7, #28]
 8001d24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d28:	f023 0301 	bic.w	r3, r3, #1
 8001d2c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	2110      	movs	r1, #16
 8001d34:	4618      	mov	r0, r3
 8001d36:	f003 fb95 	bl	8005464 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d3e:	e056      	b.n	8001dee <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d42:	015a      	lsls	r2, r3, #5
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	4413      	add	r3, r2
 8001d48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001d52:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d56:	015a      	lsls	r2, r3, #5
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	4413      	add	r3, r2
 8001d5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d64:	0151      	lsls	r1, r2, #5
 8001d66:	69fa      	ldr	r2, [r7, #28]
 8001d68:	440a      	add	r2, r1
 8001d6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001d6e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001d72:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8001d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d76:	015a      	lsls	r2, r3, #5
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	4413      	add	r3, r2
 8001d7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d84:	0151      	lsls	r1, r2, #5
 8001d86:	69fa      	ldr	r2, [r7, #28]
 8001d88:	440a      	add	r2, r1
 8001d8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001d8e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001d92:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d96:	015a      	lsls	r2, r3, #5
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	4413      	add	r3, r2
 8001d9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001da0:	461a      	mov	r2, r3
 8001da2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001da6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001daa:	015a      	lsls	r2, r3, #5
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	4413      	add	r3, r2
 8001db0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001db8:	0151      	lsls	r1, r2, #5
 8001dba:	69fa      	ldr	r2, [r7, #28]
 8001dbc:	440a      	add	r2, r1
 8001dbe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001dc2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001dc6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dca:	015a      	lsls	r2, r3, #5
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	4413      	add	r3, r2
 8001dd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001dd8:	0151      	lsls	r1, r2, #5
 8001dda:	69fa      	ldr	r2, [r7, #28]
 8001ddc:	440a      	add	r2, r1
 8001dde:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001de2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001de6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dea:	3301      	adds	r3, #1
 8001dec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d3a3      	bcc.n	8001d40 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001dfe:	69db      	ldr	r3, [r3, #28]
 8001e00:	69fa      	ldr	r2, [r7, #28]
 8001e02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e06:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001e0a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d016      	beq.n	8001e42 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e1e:	69fa      	ldr	r2, [r7, #28]
 8001e20:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e24:	f043 030b 	orr.w	r3, r3, #11
 8001e28:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e34:	69fa      	ldr	r2, [r7, #28]
 8001e36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e3a:	f043 030b 	orr.w	r3, r3, #11
 8001e3e:	6453      	str	r3, [r2, #68]	; 0x44
 8001e40:	e015      	b.n	8001e6e <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e48:	695a      	ldr	r2, [r3, #20]
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e50:	4619      	mov	r1, r3
 8001e52:	f242 032b 	movw	r3, #8235	; 0x202b
 8001e56:	4313      	orrs	r3, r2
 8001e58:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e60:	691b      	ldr	r3, [r3, #16]
 8001e62:	69fa      	ldr	r2, [r7, #28]
 8001e64:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e68:	f043 030b 	orr.w	r3, r3, #11
 8001e6c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	69fa      	ldr	r2, [r7, #28]
 8001e78:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e7c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001e80:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6818      	ldr	r0, [r3, #0]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	691b      	ldr	r3, [r3, #16]
 8001e8a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001e92:	461a      	mov	r2, r3
 8001e94:	f004 fad4 	bl	8006440 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	695a      	ldr	r2, [r3, #20]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001ea6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4618      	mov	r0, r3
 8001eae:	f004 fa01 	bl	80062b4 <USB_ReadInterrupts>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001eb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ebc:	d124      	bne.n	8001f08 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f004 fa98 	bl	80063f8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f003 fb2a 	bl	8005526 <USB_GetDevSpeed>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681c      	ldr	r4, [r3, #0]
 8001ede:	f001 fa0d 	bl	80032fc <HAL_RCC_GetHCLKFreq>
 8001ee2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	461a      	mov	r2, r3
 8001eec:	4620      	mov	r0, r4
 8001eee:	f003 f85d 	bl	8004fac <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f006 fa8b 	bl	800840e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	695a      	ldr	r2, [r3, #20]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001f06:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f004 f9d1 	bl	80062b4 <USB_ReadInterrupts>
 8001f12:	4603      	mov	r3, r0
 8001f14:	f003 0308 	and.w	r3, r3, #8
 8001f18:	2b08      	cmp	r3, #8
 8001f1a:	d10a      	bne.n	8001f32 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	f006 fa68 	bl	80083f2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	695a      	ldr	r2, [r3, #20]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f002 0208 	and.w	r2, r2, #8
 8001f30:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4618      	mov	r0, r3
 8001f38:	f004 f9bc 	bl	80062b4 <USB_ReadInterrupts>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001f46:	d10f      	bne.n	8001f68 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	4619      	mov	r1, r3
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f006 faca 	bl	80084ec <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	695a      	ldr	r2, [r3, #20]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001f66:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f004 f9a1 	bl	80062b4 <USB_ReadInterrupts>
 8001f72:	4603      	mov	r3, r0
 8001f74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f78:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001f7c:	d10f      	bne.n	8001f9e <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	4619      	mov	r1, r3
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f006 fa9d 	bl	80084c8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	695a      	ldr	r2, [r3, #20]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001f9c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f004 f986 	bl	80062b4 <USB_ReadInterrupts>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001fae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fb2:	d10a      	bne.n	8001fca <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	f006 faab 	bl	8008510 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	695a      	ldr	r2, [r3, #20]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001fc8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f004 f970 	bl	80062b4 <USB_ReadInterrupts>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	f003 0304 	and.w	r3, r3, #4
 8001fda:	2b04      	cmp	r3, #4
 8001fdc:	d115      	bne.n	800200a <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001fe6:	69bb      	ldr	r3, [r7, #24]
 8001fe8:	f003 0304 	and.w	r3, r3, #4
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d002      	beq.n	8001ff6 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	f006 fa9b 	bl	800852c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	6859      	ldr	r1, [r3, #4]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	69ba      	ldr	r2, [r7, #24]
 8002002:	430a      	orrs	r2, r1
 8002004:	605a      	str	r2, [r3, #4]
 8002006:	e000      	b.n	800200a <HAL_PCD_IRQHandler+0x7b8>
      return;
 8002008:	bf00      	nop
    }
  }
}
 800200a:	3734      	adds	r7, #52	; 0x34
 800200c:	46bd      	mov	sp, r7
 800200e:	bd90      	pop	{r4, r7, pc}

08002010 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	460b      	mov	r3, r1
 800201a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002022:	2b01      	cmp	r3, #1
 8002024:	d101      	bne.n	800202a <HAL_PCD_SetAddress+0x1a>
 8002026:	2302      	movs	r3, #2
 8002028:	e013      	b.n	8002052 <HAL_PCD_SetAddress+0x42>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2201      	movs	r2, #1
 800202e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	78fa      	ldrb	r2, [r7, #3]
 8002036:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	78fa      	ldrb	r2, [r7, #3]
 8002040:	4611      	mov	r1, r2
 8002042:	4618      	mov	r0, r3
 8002044:	f004 f8ce 	bl	80061e4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2200      	movs	r2, #0
 800204c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002050:	2300      	movs	r3, #0
}
 8002052:	4618      	mov	r0, r3
 8002054:	3708      	adds	r7, #8
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}

0800205a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800205a:	b580      	push	{r7, lr}
 800205c:	b084      	sub	sp, #16
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]
 8002062:	4608      	mov	r0, r1
 8002064:	4611      	mov	r1, r2
 8002066:	461a      	mov	r2, r3
 8002068:	4603      	mov	r3, r0
 800206a:	70fb      	strb	r3, [r7, #3]
 800206c:	460b      	mov	r3, r1
 800206e:	803b      	strh	r3, [r7, #0]
 8002070:	4613      	mov	r3, r2
 8002072:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002074:	2300      	movs	r3, #0
 8002076:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002078:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800207c:	2b00      	cmp	r3, #0
 800207e:	da0f      	bge.n	80020a0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002080:	78fb      	ldrb	r3, [r7, #3]
 8002082:	f003 020f 	and.w	r2, r3, #15
 8002086:	4613      	mov	r3, r2
 8002088:	00db      	lsls	r3, r3, #3
 800208a:	1a9b      	subs	r3, r3, r2
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	3338      	adds	r3, #56	; 0x38
 8002090:	687a      	ldr	r2, [r7, #4]
 8002092:	4413      	add	r3, r2
 8002094:	3304      	adds	r3, #4
 8002096:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2201      	movs	r2, #1
 800209c:	705a      	strb	r2, [r3, #1]
 800209e:	e00f      	b.n	80020c0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020a0:	78fb      	ldrb	r3, [r7, #3]
 80020a2:	f003 020f 	and.w	r2, r3, #15
 80020a6:	4613      	mov	r3, r2
 80020a8:	00db      	lsls	r3, r3, #3
 80020aa:	1a9b      	subs	r3, r3, r2
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80020b2:	687a      	ldr	r2, [r7, #4]
 80020b4:	4413      	add	r3, r2
 80020b6:	3304      	adds	r3, #4
 80020b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2200      	movs	r2, #0
 80020be:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80020c0:	78fb      	ldrb	r3, [r7, #3]
 80020c2:	f003 030f 	and.w	r3, r3, #15
 80020c6:	b2da      	uxtb	r2, r3
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80020cc:	883a      	ldrh	r2, [r7, #0]
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	78ba      	ldrb	r2, [r7, #2]
 80020d6:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	785b      	ldrb	r3, [r3, #1]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d004      	beq.n	80020ea <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	b29a      	uxth	r2, r3
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80020ea:	78bb      	ldrb	r3, [r7, #2]
 80020ec:	2b02      	cmp	r3, #2
 80020ee:	d102      	bne.n	80020f6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2200      	movs	r2, #0
 80020f4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d101      	bne.n	8002104 <HAL_PCD_EP_Open+0xaa>
 8002100:	2302      	movs	r3, #2
 8002102:	e00e      	b.n	8002122 <HAL_PCD_EP_Open+0xc8>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2201      	movs	r2, #1
 8002108:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	68f9      	ldr	r1, [r7, #12]
 8002112:	4618      	mov	r0, r3
 8002114:	f003 fa2c 	bl	8005570 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2200      	movs	r2, #0
 800211c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002120:	7afb      	ldrb	r3, [r7, #11]
}
 8002122:	4618      	mov	r0, r3
 8002124:	3710      	adds	r7, #16
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}

0800212a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800212a:	b580      	push	{r7, lr}
 800212c:	b084      	sub	sp, #16
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
 8002132:	460b      	mov	r3, r1
 8002134:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002136:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800213a:	2b00      	cmp	r3, #0
 800213c:	da0f      	bge.n	800215e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800213e:	78fb      	ldrb	r3, [r7, #3]
 8002140:	f003 020f 	and.w	r2, r3, #15
 8002144:	4613      	mov	r3, r2
 8002146:	00db      	lsls	r3, r3, #3
 8002148:	1a9b      	subs	r3, r3, r2
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	3338      	adds	r3, #56	; 0x38
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	4413      	add	r3, r2
 8002152:	3304      	adds	r3, #4
 8002154:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2201      	movs	r2, #1
 800215a:	705a      	strb	r2, [r3, #1]
 800215c:	e00f      	b.n	800217e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800215e:	78fb      	ldrb	r3, [r7, #3]
 8002160:	f003 020f 	and.w	r2, r3, #15
 8002164:	4613      	mov	r3, r2
 8002166:	00db      	lsls	r3, r3, #3
 8002168:	1a9b      	subs	r3, r3, r2
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002170:	687a      	ldr	r2, [r7, #4]
 8002172:	4413      	add	r3, r2
 8002174:	3304      	adds	r3, #4
 8002176:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	2200      	movs	r2, #0
 800217c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800217e:	78fb      	ldrb	r3, [r7, #3]
 8002180:	f003 030f 	and.w	r3, r3, #15
 8002184:	b2da      	uxtb	r2, r3
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002190:	2b01      	cmp	r3, #1
 8002192:	d101      	bne.n	8002198 <HAL_PCD_EP_Close+0x6e>
 8002194:	2302      	movs	r3, #2
 8002196:	e00e      	b.n	80021b6 <HAL_PCD_EP_Close+0x8c>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2201      	movs	r2, #1
 800219c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	68f9      	ldr	r1, [r7, #12]
 80021a6:	4618      	mov	r0, r3
 80021a8:	f003 fa6a 	bl	8005680 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2200      	movs	r2, #0
 80021b0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80021b4:	2300      	movs	r3, #0
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3710      	adds	r7, #16
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}

080021be <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80021be:	b580      	push	{r7, lr}
 80021c0:	b086      	sub	sp, #24
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	60f8      	str	r0, [r7, #12]
 80021c6:	607a      	str	r2, [r7, #4]
 80021c8:	603b      	str	r3, [r7, #0]
 80021ca:	460b      	mov	r3, r1
 80021cc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021ce:	7afb      	ldrb	r3, [r7, #11]
 80021d0:	f003 020f 	and.w	r2, r3, #15
 80021d4:	4613      	mov	r3, r2
 80021d6:	00db      	lsls	r3, r3, #3
 80021d8:	1a9b      	subs	r3, r3, r2
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80021e0:	68fa      	ldr	r2, [r7, #12]
 80021e2:	4413      	add	r3, r2
 80021e4:	3304      	adds	r3, #4
 80021e6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	683a      	ldr	r2, [r7, #0]
 80021f2:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	2200      	movs	r2, #0
 80021f8:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	2200      	movs	r2, #0
 80021fe:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002200:	7afb      	ldrb	r3, [r7, #11]
 8002202:	f003 030f 	and.w	r3, r3, #15
 8002206:	b2da      	uxtb	r2, r3
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	691b      	ldr	r3, [r3, #16]
 8002210:	2b01      	cmp	r3, #1
 8002212:	d102      	bne.n	800221a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800221a:	7afb      	ldrb	r3, [r7, #11]
 800221c:	f003 030f 	and.w	r3, r3, #15
 8002220:	2b00      	cmp	r3, #0
 8002222:	d109      	bne.n	8002238 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	6818      	ldr	r0, [r3, #0]
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	691b      	ldr	r3, [r3, #16]
 800222c:	b2db      	uxtb	r3, r3
 800222e:	461a      	mov	r2, r3
 8002230:	6979      	ldr	r1, [r7, #20]
 8002232:	f003 fd4d 	bl	8005cd0 <USB_EP0StartXfer>
 8002236:	e008      	b.n	800224a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	6818      	ldr	r0, [r3, #0]
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	691b      	ldr	r3, [r3, #16]
 8002240:	b2db      	uxtb	r3, r3
 8002242:	461a      	mov	r2, r3
 8002244:	6979      	ldr	r1, [r7, #20]
 8002246:	f003 faf7 	bl	8005838 <USB_EPStartXfer>
  }

  return HAL_OK;
 800224a:	2300      	movs	r3, #0
}
 800224c:	4618      	mov	r0, r3
 800224e:	3718      	adds	r7, #24
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}

08002254 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	460b      	mov	r3, r1
 800225e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002260:	78fb      	ldrb	r3, [r7, #3]
 8002262:	f003 020f 	and.w	r2, r3, #15
 8002266:	6879      	ldr	r1, [r7, #4]
 8002268:	4613      	mov	r3, r2
 800226a:	00db      	lsls	r3, r3, #3
 800226c:	1a9b      	subs	r3, r3, r2
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	440b      	add	r3, r1
 8002272:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002276:	681b      	ldr	r3, [r3, #0]
}
 8002278:	4618      	mov	r0, r3
 800227a:	370c      	adds	r7, #12
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr

08002284 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b086      	sub	sp, #24
 8002288:	af00      	add	r7, sp, #0
 800228a:	60f8      	str	r0, [r7, #12]
 800228c:	607a      	str	r2, [r7, #4]
 800228e:	603b      	str	r3, [r7, #0]
 8002290:	460b      	mov	r3, r1
 8002292:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002294:	7afb      	ldrb	r3, [r7, #11]
 8002296:	f003 020f 	and.w	r2, r3, #15
 800229a:	4613      	mov	r3, r2
 800229c:	00db      	lsls	r3, r3, #3
 800229e:	1a9b      	subs	r3, r3, r2
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	3338      	adds	r3, #56	; 0x38
 80022a4:	68fa      	ldr	r2, [r7, #12]
 80022a6:	4413      	add	r3, r2
 80022a8:	3304      	adds	r3, #4
 80022aa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	683a      	ldr	r2, [r7, #0]
 80022b6:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	2200      	movs	r2, #0
 80022bc:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	2201      	movs	r2, #1
 80022c2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80022c4:	7afb      	ldrb	r3, [r7, #11]
 80022c6:	f003 030f 	and.w	r3, r3, #15
 80022ca:	b2da      	uxtb	r2, r3
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	691b      	ldr	r3, [r3, #16]
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d102      	bne.n	80022de <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80022d8:	687a      	ldr	r2, [r7, #4]
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80022de:	7afb      	ldrb	r3, [r7, #11]
 80022e0:	f003 030f 	and.w	r3, r3, #15
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d109      	bne.n	80022fc <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	6818      	ldr	r0, [r3, #0]
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	691b      	ldr	r3, [r3, #16]
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	461a      	mov	r2, r3
 80022f4:	6979      	ldr	r1, [r7, #20]
 80022f6:	f003 fceb 	bl	8005cd0 <USB_EP0StartXfer>
 80022fa:	e008      	b.n	800230e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	6818      	ldr	r0, [r3, #0]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	691b      	ldr	r3, [r3, #16]
 8002304:	b2db      	uxtb	r3, r3
 8002306:	461a      	mov	r2, r3
 8002308:	6979      	ldr	r1, [r7, #20]
 800230a:	f003 fa95 	bl	8005838 <USB_EPStartXfer>
  }

  return HAL_OK;
 800230e:	2300      	movs	r3, #0
}
 8002310:	4618      	mov	r0, r3
 8002312:	3718      	adds	r7, #24
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}

08002318 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	460b      	mov	r3, r1
 8002322:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002324:	78fb      	ldrb	r3, [r7, #3]
 8002326:	f003 020f 	and.w	r2, r3, #15
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	429a      	cmp	r2, r3
 8002330:	d901      	bls.n	8002336 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e050      	b.n	80023d8 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002336:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800233a:	2b00      	cmp	r3, #0
 800233c:	da0f      	bge.n	800235e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800233e:	78fb      	ldrb	r3, [r7, #3]
 8002340:	f003 020f 	and.w	r2, r3, #15
 8002344:	4613      	mov	r3, r2
 8002346:	00db      	lsls	r3, r3, #3
 8002348:	1a9b      	subs	r3, r3, r2
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	3338      	adds	r3, #56	; 0x38
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	4413      	add	r3, r2
 8002352:	3304      	adds	r3, #4
 8002354:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2201      	movs	r2, #1
 800235a:	705a      	strb	r2, [r3, #1]
 800235c:	e00d      	b.n	800237a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800235e:	78fa      	ldrb	r2, [r7, #3]
 8002360:	4613      	mov	r3, r2
 8002362:	00db      	lsls	r3, r3, #3
 8002364:	1a9b      	subs	r3, r3, r2
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	4413      	add	r3, r2
 8002370:	3304      	adds	r3, #4
 8002372:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2200      	movs	r2, #0
 8002378:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2201      	movs	r2, #1
 800237e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002380:	78fb      	ldrb	r3, [r7, #3]
 8002382:	f003 030f 	and.w	r3, r3, #15
 8002386:	b2da      	uxtb	r2, r3
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002392:	2b01      	cmp	r3, #1
 8002394:	d101      	bne.n	800239a <HAL_PCD_EP_SetStall+0x82>
 8002396:	2302      	movs	r3, #2
 8002398:	e01e      	b.n	80023d8 <HAL_PCD_EP_SetStall+0xc0>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2201      	movs	r2, #1
 800239e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	68f9      	ldr	r1, [r7, #12]
 80023a8:	4618      	mov	r0, r3
 80023aa:	f003 fe47 	bl	800603c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80023ae:	78fb      	ldrb	r3, [r7, #3]
 80023b0:	f003 030f 	and.w	r3, r3, #15
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d10a      	bne.n	80023ce <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6818      	ldr	r0, [r3, #0]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	691b      	ldr	r3, [r3, #16]
 80023c0:	b2d9      	uxtb	r1, r3
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80023c8:	461a      	mov	r2, r3
 80023ca:	f004 f839 	bl	8006440 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2200      	movs	r2, #0
 80023d2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80023d6:	2300      	movs	r3, #0
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3710      	adds	r7, #16
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}

080023e0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b084      	sub	sp, #16
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
 80023e8:	460b      	mov	r3, r1
 80023ea:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80023ec:	78fb      	ldrb	r3, [r7, #3]
 80023ee:	f003 020f 	and.w	r2, r3, #15
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d901      	bls.n	80023fe <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e042      	b.n	8002484 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80023fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002402:	2b00      	cmp	r3, #0
 8002404:	da0f      	bge.n	8002426 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002406:	78fb      	ldrb	r3, [r7, #3]
 8002408:	f003 020f 	and.w	r2, r3, #15
 800240c:	4613      	mov	r3, r2
 800240e:	00db      	lsls	r3, r3, #3
 8002410:	1a9b      	subs	r3, r3, r2
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	3338      	adds	r3, #56	; 0x38
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	4413      	add	r3, r2
 800241a:	3304      	adds	r3, #4
 800241c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2201      	movs	r2, #1
 8002422:	705a      	strb	r2, [r3, #1]
 8002424:	e00f      	b.n	8002446 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002426:	78fb      	ldrb	r3, [r7, #3]
 8002428:	f003 020f 	and.w	r2, r3, #15
 800242c:	4613      	mov	r3, r2
 800242e:	00db      	lsls	r3, r3, #3
 8002430:	1a9b      	subs	r3, r3, r2
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	4413      	add	r3, r2
 800243c:	3304      	adds	r3, #4
 800243e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2200      	movs	r2, #0
 8002444:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2200      	movs	r2, #0
 800244a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800244c:	78fb      	ldrb	r3, [r7, #3]
 800244e:	f003 030f 	and.w	r3, r3, #15
 8002452:	b2da      	uxtb	r2, r3
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800245e:	2b01      	cmp	r3, #1
 8002460:	d101      	bne.n	8002466 <HAL_PCD_EP_ClrStall+0x86>
 8002462:	2302      	movs	r3, #2
 8002464:	e00e      	b.n	8002484 <HAL_PCD_EP_ClrStall+0xa4>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2201      	movs	r2, #1
 800246a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	68f9      	ldr	r1, [r7, #12]
 8002474:	4618      	mov	r0, r3
 8002476:	f003 fe4f 	bl	8006118 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2200      	movs	r2, #0
 800247e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002482:	2300      	movs	r3, #0
}
 8002484:	4618      	mov	r0, r3
 8002486:	3710      	adds	r7, #16
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}

0800248c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b08a      	sub	sp, #40	; 0x28
 8002490:	af02      	add	r7, sp, #8
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80024a0:	683a      	ldr	r2, [r7, #0]
 80024a2:	4613      	mov	r3, r2
 80024a4:	00db      	lsls	r3, r3, #3
 80024a6:	1a9b      	subs	r3, r3, r2
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	3338      	adds	r3, #56	; 0x38
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	4413      	add	r3, r2
 80024b0:	3304      	adds	r3, #4
 80024b2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	699a      	ldr	r2, [r3, #24]
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	695b      	ldr	r3, [r3, #20]
 80024bc:	429a      	cmp	r2, r3
 80024be:	d901      	bls.n	80024c4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e06c      	b.n	800259e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	695a      	ldr	r2, [r3, #20]
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	699b      	ldr	r3, [r3, #24]
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	69fa      	ldr	r2, [r7, #28]
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d902      	bls.n	80024e0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	3303      	adds	r3, #3
 80024e4:	089b      	lsrs	r3, r3, #2
 80024e6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80024e8:	e02b      	b.n	8002542 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	695a      	ldr	r2, [r3, #20]
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	699b      	ldr	r3, [r3, #24]
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	69fa      	ldr	r2, [r7, #28]
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d902      	bls.n	8002506 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	3303      	adds	r3, #3
 800250a:	089b      	lsrs	r3, r3, #2
 800250c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	68d9      	ldr	r1, [r3, #12]
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	b2da      	uxtb	r2, r3
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800251e:	b2db      	uxtb	r3, r3
 8002520:	9300      	str	r3, [sp, #0]
 8002522:	4603      	mov	r3, r0
 8002524:	6978      	ldr	r0, [r7, #20]
 8002526:	f003 fd2b 	bl	8005f80 <USB_WritePacket>

    ep->xfer_buff  += len;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	68da      	ldr	r2, [r3, #12]
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	441a      	add	r2, r3
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	699a      	ldr	r2, [r3, #24]
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	441a      	add	r2, r3
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	015a      	lsls	r2, r3, #5
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	4413      	add	r3, r2
 800254a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800254e:	699b      	ldr	r3, [r3, #24]
 8002550:	b29b      	uxth	r3, r3
 8002552:	69ba      	ldr	r2, [r7, #24]
 8002554:	429a      	cmp	r2, r3
 8002556:	d809      	bhi.n	800256c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	699a      	ldr	r2, [r3, #24]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002560:	429a      	cmp	r2, r3
 8002562:	d203      	bcs.n	800256c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	695b      	ldr	r3, [r3, #20]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d1be      	bne.n	80024ea <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	695a      	ldr	r2, [r3, #20]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	699b      	ldr	r3, [r3, #24]
 8002574:	429a      	cmp	r2, r3
 8002576:	d811      	bhi.n	800259c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	f003 030f 	and.w	r3, r3, #15
 800257e:	2201      	movs	r2, #1
 8002580:	fa02 f303 	lsl.w	r3, r2, r3
 8002584:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800258c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	43db      	mvns	r3, r3
 8002592:	6939      	ldr	r1, [r7, #16]
 8002594:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002598:	4013      	ands	r3, r2
 800259a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800259c:	2300      	movs	r3, #0
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3720      	adds	r7, #32
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
	...

080025a8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b086      	sub	sp, #24
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	333c      	adds	r3, #60	; 0x3c
 80025c0:	3304      	adds	r3, #4
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	015a      	lsls	r2, r3, #5
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	4413      	add	r3, r2
 80025ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	691b      	ldr	r3, [r3, #16]
 80025da:	2b01      	cmp	r3, #1
 80025dc:	f040 80a0 	bne.w	8002720 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	f003 0308 	and.w	r3, r3, #8
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d015      	beq.n	8002616 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	4a72      	ldr	r2, [pc, #456]	; (80027b8 <PCD_EP_OutXfrComplete_int+0x210>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	f240 80dd 	bls.w	80027ae <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	f000 80d7 	beq.w	80027ae <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	015a      	lsls	r2, r3, #5
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	4413      	add	r3, r2
 8002608:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800260c:	461a      	mov	r2, r3
 800260e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002612:	6093      	str	r3, [r2, #8]
 8002614:	e0cb      	b.n	80027ae <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	f003 0320 	and.w	r3, r3, #32
 800261c:	2b00      	cmp	r3, #0
 800261e:	d009      	beq.n	8002634 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	015a      	lsls	r2, r3, #5
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	4413      	add	r3, r2
 8002628:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800262c:	461a      	mov	r2, r3
 800262e:	2320      	movs	r3, #32
 8002630:	6093      	str	r3, [r2, #8]
 8002632:	e0bc      	b.n	80027ae <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800263a:	2b00      	cmp	r3, #0
 800263c:	f040 80b7 	bne.w	80027ae <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	4a5d      	ldr	r2, [pc, #372]	; (80027b8 <PCD_EP_OutXfrComplete_int+0x210>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d90f      	bls.n	8002668 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800264e:	2b00      	cmp	r3, #0
 8002650:	d00a      	beq.n	8002668 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	015a      	lsls	r2, r3, #5
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	4413      	add	r3, r2
 800265a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800265e:	461a      	mov	r2, r3
 8002660:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002664:	6093      	str	r3, [r2, #8]
 8002666:	e0a2      	b.n	80027ae <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002668:	6879      	ldr	r1, [r7, #4]
 800266a:	683a      	ldr	r2, [r7, #0]
 800266c:	4613      	mov	r3, r2
 800266e:	00db      	lsls	r3, r3, #3
 8002670:	1a9b      	subs	r3, r3, r2
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	440b      	add	r3, r1
 8002676:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800267a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	0159      	lsls	r1, r3, #5
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	440b      	add	r3, r1
 8002684:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002688:	691b      	ldr	r3, [r3, #16]
 800268a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800268e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002690:	6878      	ldr	r0, [r7, #4]
 8002692:	683a      	ldr	r2, [r7, #0]
 8002694:	4613      	mov	r3, r2
 8002696:	00db      	lsls	r3, r3, #3
 8002698:	1a9b      	subs	r3, r3, r2
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	4403      	add	r3, r0
 800269e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80026a2:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80026a4:	6879      	ldr	r1, [r7, #4]
 80026a6:	683a      	ldr	r2, [r7, #0]
 80026a8:	4613      	mov	r3, r2
 80026aa:	00db      	lsls	r3, r3, #3
 80026ac:	1a9b      	subs	r3, r3, r2
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	440b      	add	r3, r1
 80026b2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80026b6:	6819      	ldr	r1, [r3, #0]
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	683a      	ldr	r2, [r7, #0]
 80026bc:	4613      	mov	r3, r2
 80026be:	00db      	lsls	r3, r3, #3
 80026c0:	1a9b      	subs	r3, r3, r2
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	4403      	add	r3, r0
 80026c6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4419      	add	r1, r3
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	683a      	ldr	r2, [r7, #0]
 80026d2:	4613      	mov	r3, r2
 80026d4:	00db      	lsls	r3, r3, #3
 80026d6:	1a9b      	subs	r3, r3, r2
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	4403      	add	r3, r0
 80026dc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80026e0:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d114      	bne.n	8002712 <PCD_EP_OutXfrComplete_int+0x16a>
 80026e8:	6879      	ldr	r1, [r7, #4]
 80026ea:	683a      	ldr	r2, [r7, #0]
 80026ec:	4613      	mov	r3, r2
 80026ee:	00db      	lsls	r3, r3, #3
 80026f0:	1a9b      	subs	r3, r3, r2
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	440b      	add	r3, r1
 80026f6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d108      	bne.n	8002712 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6818      	ldr	r0, [r3, #0]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800270a:	461a      	mov	r2, r3
 800270c:	2101      	movs	r1, #1
 800270e:	f003 fe97 	bl	8006440 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	b2db      	uxtb	r3, r3
 8002716:	4619      	mov	r1, r3
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f005 fe35 	bl	8008388 <HAL_PCD_DataOutStageCallback>
 800271e:	e046      	b.n	80027ae <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	4a26      	ldr	r2, [pc, #152]	; (80027bc <PCD_EP_OutXfrComplete_int+0x214>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d124      	bne.n	8002772 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d00a      	beq.n	8002748 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	015a      	lsls	r2, r3, #5
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	4413      	add	r3, r2
 800273a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800273e:	461a      	mov	r2, r3
 8002740:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002744:	6093      	str	r3, [r2, #8]
 8002746:	e032      	b.n	80027ae <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	f003 0320 	and.w	r3, r3, #32
 800274e:	2b00      	cmp	r3, #0
 8002750:	d008      	beq.n	8002764 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	015a      	lsls	r2, r3, #5
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	4413      	add	r3, r2
 800275a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800275e:	461a      	mov	r2, r3
 8002760:	2320      	movs	r3, #32
 8002762:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	b2db      	uxtb	r3, r3
 8002768:	4619      	mov	r1, r3
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f005 fe0c 	bl	8008388 <HAL_PCD_DataOutStageCallback>
 8002770:	e01d      	b.n	80027ae <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d114      	bne.n	80027a2 <PCD_EP_OutXfrComplete_int+0x1fa>
 8002778:	6879      	ldr	r1, [r7, #4]
 800277a:	683a      	ldr	r2, [r7, #0]
 800277c:	4613      	mov	r3, r2
 800277e:	00db      	lsls	r3, r3, #3
 8002780:	1a9b      	subs	r3, r3, r2
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	440b      	add	r3, r1
 8002786:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d108      	bne.n	80027a2 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6818      	ldr	r0, [r3, #0]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800279a:	461a      	mov	r2, r3
 800279c:	2100      	movs	r1, #0
 800279e:	f003 fe4f 	bl	8006440 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	4619      	mov	r1, r3
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	f005 fded 	bl	8008388 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80027ae:	2300      	movs	r3, #0
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3718      	adds	r7, #24
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	4f54300a 	.word	0x4f54300a
 80027bc:	4f54310a 	.word	0x4f54310a

080027c0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b086      	sub	sp, #24
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	333c      	adds	r3, #60	; 0x3c
 80027d8:	3304      	adds	r3, #4
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	015a      	lsls	r2, r3, #5
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	4413      	add	r3, r2
 80027e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	4a15      	ldr	r2, [pc, #84]	; (8002848 <PCD_EP_OutSetupPacket_int+0x88>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d90e      	bls.n	8002814 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d009      	beq.n	8002814 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	015a      	lsls	r2, r3, #5
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	4413      	add	r3, r2
 8002808:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800280c:	461a      	mov	r2, r3
 800280e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002812:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	f005 fda5 	bl	8008364 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	4a0a      	ldr	r2, [pc, #40]	; (8002848 <PCD_EP_OutSetupPacket_int+0x88>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d90c      	bls.n	800283c <PCD_EP_OutSetupPacket_int+0x7c>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	691b      	ldr	r3, [r3, #16]
 8002826:	2b01      	cmp	r3, #1
 8002828:	d108      	bne.n	800283c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6818      	ldr	r0, [r3, #0]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002834:	461a      	mov	r2, r3
 8002836:	2101      	movs	r1, #1
 8002838:	f003 fe02 	bl	8006440 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800283c:	2300      	movs	r3, #0
}
 800283e:	4618      	mov	r0, r3
 8002840:	3718      	adds	r7, #24
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	4f54300a 	.word	0x4f54300a

0800284c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800284c:	b480      	push	{r7}
 800284e:	b085      	sub	sp, #20
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	460b      	mov	r3, r1
 8002856:	70fb      	strb	r3, [r7, #3]
 8002858:	4613      	mov	r3, r2
 800285a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002862:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002864:	78fb      	ldrb	r3, [r7, #3]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d107      	bne.n	800287a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800286a:	883b      	ldrh	r3, [r7, #0]
 800286c:	0419      	lsls	r1, r3, #16
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	68ba      	ldr	r2, [r7, #8]
 8002874:	430a      	orrs	r2, r1
 8002876:	629a      	str	r2, [r3, #40]	; 0x28
 8002878:	e028      	b.n	80028cc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002880:	0c1b      	lsrs	r3, r3, #16
 8002882:	68ba      	ldr	r2, [r7, #8]
 8002884:	4413      	add	r3, r2
 8002886:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002888:	2300      	movs	r3, #0
 800288a:	73fb      	strb	r3, [r7, #15]
 800288c:	e00d      	b.n	80028aa <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	7bfb      	ldrb	r3, [r7, #15]
 8002894:	3340      	adds	r3, #64	; 0x40
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	4413      	add	r3, r2
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	0c1b      	lsrs	r3, r3, #16
 800289e:	68ba      	ldr	r2, [r7, #8]
 80028a0:	4413      	add	r3, r2
 80028a2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80028a4:	7bfb      	ldrb	r3, [r7, #15]
 80028a6:	3301      	adds	r3, #1
 80028a8:	73fb      	strb	r3, [r7, #15]
 80028aa:	7bfa      	ldrb	r2, [r7, #15]
 80028ac:	78fb      	ldrb	r3, [r7, #3]
 80028ae:	3b01      	subs	r3, #1
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d3ec      	bcc.n	800288e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80028b4:	883b      	ldrh	r3, [r7, #0]
 80028b6:	0418      	lsls	r0, r3, #16
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6819      	ldr	r1, [r3, #0]
 80028bc:	78fb      	ldrb	r3, [r7, #3]
 80028be:	3b01      	subs	r3, #1
 80028c0:	68ba      	ldr	r2, [r7, #8]
 80028c2:	4302      	orrs	r2, r0
 80028c4:	3340      	adds	r3, #64	; 0x40
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	440b      	add	r3, r1
 80028ca:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80028cc:	2300      	movs	r3, #0
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3714      	adds	r7, #20
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr

080028da <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80028da:	b480      	push	{r7}
 80028dc:	b083      	sub	sp, #12
 80028de:	af00      	add	r7, sp, #0
 80028e0:	6078      	str	r0, [r7, #4]
 80028e2:	460b      	mov	r3, r1
 80028e4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	887a      	ldrh	r2, [r7, #2]
 80028ec:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80028ee:	2300      	movs	r3, #0
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	370c      	adds	r7, #12
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr

080028fc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b085      	sub	sp, #20
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2201      	movs	r2, #1
 800290e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	699b      	ldr	r3, [r3, #24]
 800291e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800292a:	4b05      	ldr	r3, [pc, #20]	; (8002940 <HAL_PCDEx_ActivateLPM+0x44>)
 800292c:	4313      	orrs	r3, r2
 800292e:	68fa      	ldr	r2, [r7, #12]
 8002930:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002932:	2300      	movs	r3, #0
}
 8002934:	4618      	mov	r0, r3
 8002936:	3714      	adds	r7, #20
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr
 8002940:	10000003 	.word	0x10000003

08002944 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002944:	b480      	push	{r7}
 8002946:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002948:	4b05      	ldr	r3, [pc, #20]	; (8002960 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a04      	ldr	r2, [pc, #16]	; (8002960 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800294e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002952:	6013      	str	r3, [r2, #0]
}
 8002954:	bf00      	nop
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr
 800295e:	bf00      	nop
 8002960:	40007000 	.word	0x40007000

08002964 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800296a:	2300      	movs	r3, #0
 800296c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800296e:	4b23      	ldr	r3, [pc, #140]	; (80029fc <HAL_PWREx_EnableOverDrive+0x98>)
 8002970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002972:	4a22      	ldr	r2, [pc, #136]	; (80029fc <HAL_PWREx_EnableOverDrive+0x98>)
 8002974:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002978:	6413      	str	r3, [r2, #64]	; 0x40
 800297a:	4b20      	ldr	r3, [pc, #128]	; (80029fc <HAL_PWREx_EnableOverDrive+0x98>)
 800297c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002982:	603b      	str	r3, [r7, #0]
 8002984:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002986:	4b1e      	ldr	r3, [pc, #120]	; (8002a00 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a1d      	ldr	r2, [pc, #116]	; (8002a00 <HAL_PWREx_EnableOverDrive+0x9c>)
 800298c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002990:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002992:	f7fe faf7 	bl	8000f84 <HAL_GetTick>
 8002996:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002998:	e009      	b.n	80029ae <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800299a:	f7fe faf3 	bl	8000f84 <HAL_GetTick>
 800299e:	4602      	mov	r2, r0
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80029a8:	d901      	bls.n	80029ae <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	e022      	b.n	80029f4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80029ae:	4b14      	ldr	r3, [pc, #80]	; (8002a00 <HAL_PWREx_EnableOverDrive+0x9c>)
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029ba:	d1ee      	bne.n	800299a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80029bc:	4b10      	ldr	r3, [pc, #64]	; (8002a00 <HAL_PWREx_EnableOverDrive+0x9c>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a0f      	ldr	r2, [pc, #60]	; (8002a00 <HAL_PWREx_EnableOverDrive+0x9c>)
 80029c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029c6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80029c8:	f7fe fadc 	bl	8000f84 <HAL_GetTick>
 80029cc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80029ce:	e009      	b.n	80029e4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80029d0:	f7fe fad8 	bl	8000f84 <HAL_GetTick>
 80029d4:	4602      	mov	r2, r0
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80029de:	d901      	bls.n	80029e4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80029e0:	2303      	movs	r3, #3
 80029e2:	e007      	b.n	80029f4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80029e4:	4b06      	ldr	r3, [pc, #24]	; (8002a00 <HAL_PWREx_EnableOverDrive+0x9c>)
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80029f0:	d1ee      	bne.n	80029d0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80029f2:	2300      	movs	r3, #0
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3708      	adds	r7, #8
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	40023800 	.word	0x40023800
 8002a00:	40007000 	.word	0x40007000

08002a04 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b086      	sub	sp, #24
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d101      	bne.n	8002a1a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e29b      	b.n	8002f52 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0301 	and.w	r3, r3, #1
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	f000 8087 	beq.w	8002b36 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a28:	4b96      	ldr	r3, [pc, #600]	; (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	f003 030c 	and.w	r3, r3, #12
 8002a30:	2b04      	cmp	r3, #4
 8002a32:	d00c      	beq.n	8002a4e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a34:	4b93      	ldr	r3, [pc, #588]	; (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	f003 030c 	and.w	r3, r3, #12
 8002a3c:	2b08      	cmp	r3, #8
 8002a3e:	d112      	bne.n	8002a66 <HAL_RCC_OscConfig+0x62>
 8002a40:	4b90      	ldr	r3, [pc, #576]	; (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a4c:	d10b      	bne.n	8002a66 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a4e:	4b8d      	ldr	r3, [pc, #564]	; (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d06c      	beq.n	8002b34 <HAL_RCC_OscConfig+0x130>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d168      	bne.n	8002b34 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e275      	b.n	8002f52 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a6e:	d106      	bne.n	8002a7e <HAL_RCC_OscConfig+0x7a>
 8002a70:	4b84      	ldr	r3, [pc, #528]	; (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a83      	ldr	r2, [pc, #524]	; (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002a76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a7a:	6013      	str	r3, [r2, #0]
 8002a7c:	e02e      	b.n	8002adc <HAL_RCC_OscConfig+0xd8>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d10c      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x9c>
 8002a86:	4b7f      	ldr	r3, [pc, #508]	; (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a7e      	ldr	r2, [pc, #504]	; (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002a8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a90:	6013      	str	r3, [r2, #0]
 8002a92:	4b7c      	ldr	r3, [pc, #496]	; (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a7b      	ldr	r2, [pc, #492]	; (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002a98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a9c:	6013      	str	r3, [r2, #0]
 8002a9e:	e01d      	b.n	8002adc <HAL_RCC_OscConfig+0xd8>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002aa8:	d10c      	bne.n	8002ac4 <HAL_RCC_OscConfig+0xc0>
 8002aaa:	4b76      	ldr	r3, [pc, #472]	; (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a75      	ldr	r2, [pc, #468]	; (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002ab0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ab4:	6013      	str	r3, [r2, #0]
 8002ab6:	4b73      	ldr	r3, [pc, #460]	; (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a72      	ldr	r2, [pc, #456]	; (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002abc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ac0:	6013      	str	r3, [r2, #0]
 8002ac2:	e00b      	b.n	8002adc <HAL_RCC_OscConfig+0xd8>
 8002ac4:	4b6f      	ldr	r3, [pc, #444]	; (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a6e      	ldr	r2, [pc, #440]	; (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002aca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ace:	6013      	str	r3, [r2, #0]
 8002ad0:	4b6c      	ldr	r3, [pc, #432]	; (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a6b      	ldr	r2, [pc, #428]	; (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002ad6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ada:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d013      	beq.n	8002b0c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ae4:	f7fe fa4e 	bl	8000f84 <HAL_GetTick>
 8002ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aea:	e008      	b.n	8002afe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002aec:	f7fe fa4a 	bl	8000f84 <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	2b64      	cmp	r3, #100	; 0x64
 8002af8:	d901      	bls.n	8002afe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e229      	b.n	8002f52 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002afe:	4b61      	ldr	r3, [pc, #388]	; (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d0f0      	beq.n	8002aec <HAL_RCC_OscConfig+0xe8>
 8002b0a:	e014      	b.n	8002b36 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b0c:	f7fe fa3a 	bl	8000f84 <HAL_GetTick>
 8002b10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b12:	e008      	b.n	8002b26 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b14:	f7fe fa36 	bl	8000f84 <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	2b64      	cmp	r3, #100	; 0x64
 8002b20:	d901      	bls.n	8002b26 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e215      	b.n	8002f52 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b26:	4b57      	ldr	r3, [pc, #348]	; (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d1f0      	bne.n	8002b14 <HAL_RCC_OscConfig+0x110>
 8002b32:	e000      	b.n	8002b36 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0302 	and.w	r3, r3, #2
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d069      	beq.n	8002c16 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b42:	4b50      	ldr	r3, [pc, #320]	; (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	f003 030c 	and.w	r3, r3, #12
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d00b      	beq.n	8002b66 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b4e:	4b4d      	ldr	r3, [pc, #308]	; (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	f003 030c 	and.w	r3, r3, #12
 8002b56:	2b08      	cmp	r3, #8
 8002b58:	d11c      	bne.n	8002b94 <HAL_RCC_OscConfig+0x190>
 8002b5a:	4b4a      	ldr	r3, [pc, #296]	; (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d116      	bne.n	8002b94 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b66:	4b47      	ldr	r3, [pc, #284]	; (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0302 	and.w	r3, r3, #2
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d005      	beq.n	8002b7e <HAL_RCC_OscConfig+0x17a>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d001      	beq.n	8002b7e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e1e9      	b.n	8002f52 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b7e:	4b41      	ldr	r3, [pc, #260]	; (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	691b      	ldr	r3, [r3, #16]
 8002b8a:	00db      	lsls	r3, r3, #3
 8002b8c:	493d      	ldr	r1, [pc, #244]	; (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b92:	e040      	b.n	8002c16 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d023      	beq.n	8002be4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b9c:	4b39      	ldr	r3, [pc, #228]	; (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a38      	ldr	r2, [pc, #224]	; (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002ba2:	f043 0301 	orr.w	r3, r3, #1
 8002ba6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba8:	f7fe f9ec 	bl	8000f84 <HAL_GetTick>
 8002bac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bae:	e008      	b.n	8002bc2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bb0:	f7fe f9e8 	bl	8000f84 <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d901      	bls.n	8002bc2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e1c7      	b.n	8002f52 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bc2:	4b30      	ldr	r3, [pc, #192]	; (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0302 	and.w	r3, r3, #2
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d0f0      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bce:	4b2d      	ldr	r3, [pc, #180]	; (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	691b      	ldr	r3, [r3, #16]
 8002bda:	00db      	lsls	r3, r3, #3
 8002bdc:	4929      	ldr	r1, [pc, #164]	; (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002bde:	4313      	orrs	r3, r2
 8002be0:	600b      	str	r3, [r1, #0]
 8002be2:	e018      	b.n	8002c16 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002be4:	4b27      	ldr	r3, [pc, #156]	; (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a26      	ldr	r2, [pc, #152]	; (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002bea:	f023 0301 	bic.w	r3, r3, #1
 8002bee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf0:	f7fe f9c8 	bl	8000f84 <HAL_GetTick>
 8002bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bf6:	e008      	b.n	8002c0a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bf8:	f7fe f9c4 	bl	8000f84 <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d901      	bls.n	8002c0a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e1a3      	b.n	8002f52 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c0a:	4b1e      	ldr	r3, [pc, #120]	; (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0302 	and.w	r3, r3, #2
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d1f0      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0308 	and.w	r3, r3, #8
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d038      	beq.n	8002c94 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	695b      	ldr	r3, [r3, #20]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d019      	beq.n	8002c5e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c2a:	4b16      	ldr	r3, [pc, #88]	; (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002c2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c2e:	4a15      	ldr	r2, [pc, #84]	; (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002c30:	f043 0301 	orr.w	r3, r3, #1
 8002c34:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c36:	f7fe f9a5 	bl	8000f84 <HAL_GetTick>
 8002c3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c3c:	e008      	b.n	8002c50 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c3e:	f7fe f9a1 	bl	8000f84 <HAL_GetTick>
 8002c42:	4602      	mov	r2, r0
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	2b02      	cmp	r3, #2
 8002c4a:	d901      	bls.n	8002c50 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002c4c:	2303      	movs	r3, #3
 8002c4e:	e180      	b.n	8002f52 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c50:	4b0c      	ldr	r3, [pc, #48]	; (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002c52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c54:	f003 0302 	and.w	r3, r3, #2
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d0f0      	beq.n	8002c3e <HAL_RCC_OscConfig+0x23a>
 8002c5c:	e01a      	b.n	8002c94 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c5e:	4b09      	ldr	r3, [pc, #36]	; (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002c60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c62:	4a08      	ldr	r2, [pc, #32]	; (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002c64:	f023 0301 	bic.w	r3, r3, #1
 8002c68:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c6a:	f7fe f98b 	bl	8000f84 <HAL_GetTick>
 8002c6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c70:	e00a      	b.n	8002c88 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c72:	f7fe f987 	bl	8000f84 <HAL_GetTick>
 8002c76:	4602      	mov	r2, r0
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	2b02      	cmp	r3, #2
 8002c7e:	d903      	bls.n	8002c88 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002c80:	2303      	movs	r3, #3
 8002c82:	e166      	b.n	8002f52 <HAL_RCC_OscConfig+0x54e>
 8002c84:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c88:	4b92      	ldr	r3, [pc, #584]	; (8002ed4 <HAL_RCC_OscConfig+0x4d0>)
 8002c8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c8c:	f003 0302 	and.w	r3, r3, #2
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d1ee      	bne.n	8002c72 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 0304 	and.w	r3, r3, #4
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	f000 80a4 	beq.w	8002dea <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ca2:	4b8c      	ldr	r3, [pc, #560]	; (8002ed4 <HAL_RCC_OscConfig+0x4d0>)
 8002ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d10d      	bne.n	8002cca <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cae:	4b89      	ldr	r3, [pc, #548]	; (8002ed4 <HAL_RCC_OscConfig+0x4d0>)
 8002cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb2:	4a88      	ldr	r2, [pc, #544]	; (8002ed4 <HAL_RCC_OscConfig+0x4d0>)
 8002cb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cb8:	6413      	str	r3, [r2, #64]	; 0x40
 8002cba:	4b86      	ldr	r3, [pc, #536]	; (8002ed4 <HAL_RCC_OscConfig+0x4d0>)
 8002cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cc2:	60bb      	str	r3, [r7, #8]
 8002cc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cca:	4b83      	ldr	r3, [pc, #524]	; (8002ed8 <HAL_RCC_OscConfig+0x4d4>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d118      	bne.n	8002d08 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002cd6:	4b80      	ldr	r3, [pc, #512]	; (8002ed8 <HAL_RCC_OscConfig+0x4d4>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a7f      	ldr	r2, [pc, #508]	; (8002ed8 <HAL_RCC_OscConfig+0x4d4>)
 8002cdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ce0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ce2:	f7fe f94f 	bl	8000f84 <HAL_GetTick>
 8002ce6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ce8:	e008      	b.n	8002cfc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cea:	f7fe f94b 	bl	8000f84 <HAL_GetTick>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	2b64      	cmp	r3, #100	; 0x64
 8002cf6:	d901      	bls.n	8002cfc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	e12a      	b.n	8002f52 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cfc:	4b76      	ldr	r3, [pc, #472]	; (8002ed8 <HAL_RCC_OscConfig+0x4d4>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d0f0      	beq.n	8002cea <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d106      	bne.n	8002d1e <HAL_RCC_OscConfig+0x31a>
 8002d10:	4b70      	ldr	r3, [pc, #448]	; (8002ed4 <HAL_RCC_OscConfig+0x4d0>)
 8002d12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d14:	4a6f      	ldr	r2, [pc, #444]	; (8002ed4 <HAL_RCC_OscConfig+0x4d0>)
 8002d16:	f043 0301 	orr.w	r3, r3, #1
 8002d1a:	6713      	str	r3, [r2, #112]	; 0x70
 8002d1c:	e02d      	b.n	8002d7a <HAL_RCC_OscConfig+0x376>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d10c      	bne.n	8002d40 <HAL_RCC_OscConfig+0x33c>
 8002d26:	4b6b      	ldr	r3, [pc, #428]	; (8002ed4 <HAL_RCC_OscConfig+0x4d0>)
 8002d28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d2a:	4a6a      	ldr	r2, [pc, #424]	; (8002ed4 <HAL_RCC_OscConfig+0x4d0>)
 8002d2c:	f023 0301 	bic.w	r3, r3, #1
 8002d30:	6713      	str	r3, [r2, #112]	; 0x70
 8002d32:	4b68      	ldr	r3, [pc, #416]	; (8002ed4 <HAL_RCC_OscConfig+0x4d0>)
 8002d34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d36:	4a67      	ldr	r2, [pc, #412]	; (8002ed4 <HAL_RCC_OscConfig+0x4d0>)
 8002d38:	f023 0304 	bic.w	r3, r3, #4
 8002d3c:	6713      	str	r3, [r2, #112]	; 0x70
 8002d3e:	e01c      	b.n	8002d7a <HAL_RCC_OscConfig+0x376>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	2b05      	cmp	r3, #5
 8002d46:	d10c      	bne.n	8002d62 <HAL_RCC_OscConfig+0x35e>
 8002d48:	4b62      	ldr	r3, [pc, #392]	; (8002ed4 <HAL_RCC_OscConfig+0x4d0>)
 8002d4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d4c:	4a61      	ldr	r2, [pc, #388]	; (8002ed4 <HAL_RCC_OscConfig+0x4d0>)
 8002d4e:	f043 0304 	orr.w	r3, r3, #4
 8002d52:	6713      	str	r3, [r2, #112]	; 0x70
 8002d54:	4b5f      	ldr	r3, [pc, #380]	; (8002ed4 <HAL_RCC_OscConfig+0x4d0>)
 8002d56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d58:	4a5e      	ldr	r2, [pc, #376]	; (8002ed4 <HAL_RCC_OscConfig+0x4d0>)
 8002d5a:	f043 0301 	orr.w	r3, r3, #1
 8002d5e:	6713      	str	r3, [r2, #112]	; 0x70
 8002d60:	e00b      	b.n	8002d7a <HAL_RCC_OscConfig+0x376>
 8002d62:	4b5c      	ldr	r3, [pc, #368]	; (8002ed4 <HAL_RCC_OscConfig+0x4d0>)
 8002d64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d66:	4a5b      	ldr	r2, [pc, #364]	; (8002ed4 <HAL_RCC_OscConfig+0x4d0>)
 8002d68:	f023 0301 	bic.w	r3, r3, #1
 8002d6c:	6713      	str	r3, [r2, #112]	; 0x70
 8002d6e:	4b59      	ldr	r3, [pc, #356]	; (8002ed4 <HAL_RCC_OscConfig+0x4d0>)
 8002d70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d72:	4a58      	ldr	r2, [pc, #352]	; (8002ed4 <HAL_RCC_OscConfig+0x4d0>)
 8002d74:	f023 0304 	bic.w	r3, r3, #4
 8002d78:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d015      	beq.n	8002dae <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d82:	f7fe f8ff 	bl	8000f84 <HAL_GetTick>
 8002d86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d88:	e00a      	b.n	8002da0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d8a:	f7fe f8fb 	bl	8000f84 <HAL_GetTick>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d901      	bls.n	8002da0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	e0d8      	b.n	8002f52 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002da0:	4b4c      	ldr	r3, [pc, #304]	; (8002ed4 <HAL_RCC_OscConfig+0x4d0>)
 8002da2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002da4:	f003 0302 	and.w	r3, r3, #2
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d0ee      	beq.n	8002d8a <HAL_RCC_OscConfig+0x386>
 8002dac:	e014      	b.n	8002dd8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dae:	f7fe f8e9 	bl	8000f84 <HAL_GetTick>
 8002db2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002db4:	e00a      	b.n	8002dcc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002db6:	f7fe f8e5 	bl	8000f84 <HAL_GetTick>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	1ad3      	subs	r3, r2, r3
 8002dc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d901      	bls.n	8002dcc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	e0c2      	b.n	8002f52 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dcc:	4b41      	ldr	r3, [pc, #260]	; (8002ed4 <HAL_RCC_OscConfig+0x4d0>)
 8002dce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dd0:	f003 0302 	and.w	r3, r3, #2
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d1ee      	bne.n	8002db6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002dd8:	7dfb      	ldrb	r3, [r7, #23]
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d105      	bne.n	8002dea <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dde:	4b3d      	ldr	r3, [pc, #244]	; (8002ed4 <HAL_RCC_OscConfig+0x4d0>)
 8002de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de2:	4a3c      	ldr	r2, [pc, #240]	; (8002ed4 <HAL_RCC_OscConfig+0x4d0>)
 8002de4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002de8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	699b      	ldr	r3, [r3, #24]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	f000 80ae 	beq.w	8002f50 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002df4:	4b37      	ldr	r3, [pc, #220]	; (8002ed4 <HAL_RCC_OscConfig+0x4d0>)
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	f003 030c 	and.w	r3, r3, #12
 8002dfc:	2b08      	cmp	r3, #8
 8002dfe:	d06d      	beq.n	8002edc <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	699b      	ldr	r3, [r3, #24]
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	d14b      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e08:	4b32      	ldr	r3, [pc, #200]	; (8002ed4 <HAL_RCC_OscConfig+0x4d0>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a31      	ldr	r2, [pc, #196]	; (8002ed4 <HAL_RCC_OscConfig+0x4d0>)
 8002e0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e14:	f7fe f8b6 	bl	8000f84 <HAL_GetTick>
 8002e18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e1a:	e008      	b.n	8002e2e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e1c:	f7fe f8b2 	bl	8000f84 <HAL_GetTick>
 8002e20:	4602      	mov	r2, r0
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	d901      	bls.n	8002e2e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	e091      	b.n	8002f52 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e2e:	4b29      	ldr	r3, [pc, #164]	; (8002ed4 <HAL_RCC_OscConfig+0x4d0>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d1f0      	bne.n	8002e1c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	69da      	ldr	r2, [r3, #28]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6a1b      	ldr	r3, [r3, #32]
 8002e42:	431a      	orrs	r2, r3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e48:	019b      	lsls	r3, r3, #6
 8002e4a:	431a      	orrs	r2, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e50:	085b      	lsrs	r3, r3, #1
 8002e52:	3b01      	subs	r3, #1
 8002e54:	041b      	lsls	r3, r3, #16
 8002e56:	431a      	orrs	r2, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e5c:	061b      	lsls	r3, r3, #24
 8002e5e:	431a      	orrs	r2, r3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e64:	071b      	lsls	r3, r3, #28
 8002e66:	491b      	ldr	r1, [pc, #108]	; (8002ed4 <HAL_RCC_OscConfig+0x4d0>)
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e6c:	4b19      	ldr	r3, [pc, #100]	; (8002ed4 <HAL_RCC_OscConfig+0x4d0>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a18      	ldr	r2, [pc, #96]	; (8002ed4 <HAL_RCC_OscConfig+0x4d0>)
 8002e72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e78:	f7fe f884 	bl	8000f84 <HAL_GetTick>
 8002e7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e7e:	e008      	b.n	8002e92 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e80:	f7fe f880 	bl	8000f84 <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d901      	bls.n	8002e92 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e05f      	b.n	8002f52 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e92:	4b10      	ldr	r3, [pc, #64]	; (8002ed4 <HAL_RCC_OscConfig+0x4d0>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d0f0      	beq.n	8002e80 <HAL_RCC_OscConfig+0x47c>
 8002e9e:	e057      	b.n	8002f50 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ea0:	4b0c      	ldr	r3, [pc, #48]	; (8002ed4 <HAL_RCC_OscConfig+0x4d0>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a0b      	ldr	r2, [pc, #44]	; (8002ed4 <HAL_RCC_OscConfig+0x4d0>)
 8002ea6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002eaa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eac:	f7fe f86a 	bl	8000f84 <HAL_GetTick>
 8002eb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eb2:	e008      	b.n	8002ec6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eb4:	f7fe f866 	bl	8000f84 <HAL_GetTick>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	2b02      	cmp	r3, #2
 8002ec0:	d901      	bls.n	8002ec6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e045      	b.n	8002f52 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ec6:	4b03      	ldr	r3, [pc, #12]	; (8002ed4 <HAL_RCC_OscConfig+0x4d0>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d1f0      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x4b0>
 8002ed2:	e03d      	b.n	8002f50 <HAL_RCC_OscConfig+0x54c>
 8002ed4:	40023800 	.word	0x40023800
 8002ed8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002edc:	4b1f      	ldr	r3, [pc, #124]	; (8002f5c <HAL_RCC_OscConfig+0x558>)
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	699b      	ldr	r3, [r3, #24]
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d030      	beq.n	8002f4c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d129      	bne.n	8002f4c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d122      	bne.n	8002f4c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f06:	68fa      	ldr	r2, [r7, #12]
 8002f08:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f12:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d119      	bne.n	8002f4c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f22:	085b      	lsrs	r3, r3, #1
 8002f24:	3b01      	subs	r3, #1
 8002f26:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d10f      	bne.n	8002f4c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f36:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d107      	bne.n	8002f4c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f46:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d001      	beq.n	8002f50 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e000      	b.n	8002f52 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002f50:	2300      	movs	r3, #0
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3718      	adds	r7, #24
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	40023800 	.word	0x40023800

08002f60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b084      	sub	sp, #16
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d101      	bne.n	8002f78 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e0d0      	b.n	800311a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f78:	4b6a      	ldr	r3, [pc, #424]	; (8003124 <HAL_RCC_ClockConfig+0x1c4>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 030f 	and.w	r3, r3, #15
 8002f80:	683a      	ldr	r2, [r7, #0]
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d910      	bls.n	8002fa8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f86:	4b67      	ldr	r3, [pc, #412]	; (8003124 <HAL_RCC_ClockConfig+0x1c4>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f023 020f 	bic.w	r2, r3, #15
 8002f8e:	4965      	ldr	r1, [pc, #404]	; (8003124 <HAL_RCC_ClockConfig+0x1c4>)
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f96:	4b63      	ldr	r3, [pc, #396]	; (8003124 <HAL_RCC_ClockConfig+0x1c4>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 030f 	and.w	r3, r3, #15
 8002f9e:	683a      	ldr	r2, [r7, #0]
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d001      	beq.n	8002fa8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e0b8      	b.n	800311a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 0302 	and.w	r3, r3, #2
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d020      	beq.n	8002ff6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0304 	and.w	r3, r3, #4
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d005      	beq.n	8002fcc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fc0:	4b59      	ldr	r3, [pc, #356]	; (8003128 <HAL_RCC_ClockConfig+0x1c8>)
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	4a58      	ldr	r2, [pc, #352]	; (8003128 <HAL_RCC_ClockConfig+0x1c8>)
 8002fc6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002fca:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0308 	and.w	r3, r3, #8
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d005      	beq.n	8002fe4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fd8:	4b53      	ldr	r3, [pc, #332]	; (8003128 <HAL_RCC_ClockConfig+0x1c8>)
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	4a52      	ldr	r2, [pc, #328]	; (8003128 <HAL_RCC_ClockConfig+0x1c8>)
 8002fde:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002fe2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fe4:	4b50      	ldr	r3, [pc, #320]	; (8003128 <HAL_RCC_ClockConfig+0x1c8>)
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	494d      	ldr	r1, [pc, #308]	; (8003128 <HAL_RCC_ClockConfig+0x1c8>)
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0301 	and.w	r3, r3, #1
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d040      	beq.n	8003084 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	2b01      	cmp	r3, #1
 8003008:	d107      	bne.n	800301a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800300a:	4b47      	ldr	r3, [pc, #284]	; (8003128 <HAL_RCC_ClockConfig+0x1c8>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d115      	bne.n	8003042 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e07f      	b.n	800311a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	2b02      	cmp	r3, #2
 8003020:	d107      	bne.n	8003032 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003022:	4b41      	ldr	r3, [pc, #260]	; (8003128 <HAL_RCC_ClockConfig+0x1c8>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d109      	bne.n	8003042 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e073      	b.n	800311a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003032:	4b3d      	ldr	r3, [pc, #244]	; (8003128 <HAL_RCC_ClockConfig+0x1c8>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0302 	and.w	r3, r3, #2
 800303a:	2b00      	cmp	r3, #0
 800303c:	d101      	bne.n	8003042 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e06b      	b.n	800311a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003042:	4b39      	ldr	r3, [pc, #228]	; (8003128 <HAL_RCC_ClockConfig+0x1c8>)
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	f023 0203 	bic.w	r2, r3, #3
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	4936      	ldr	r1, [pc, #216]	; (8003128 <HAL_RCC_ClockConfig+0x1c8>)
 8003050:	4313      	orrs	r3, r2
 8003052:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003054:	f7fd ff96 	bl	8000f84 <HAL_GetTick>
 8003058:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800305a:	e00a      	b.n	8003072 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800305c:	f7fd ff92 	bl	8000f84 <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	f241 3288 	movw	r2, #5000	; 0x1388
 800306a:	4293      	cmp	r3, r2
 800306c:	d901      	bls.n	8003072 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	e053      	b.n	800311a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003072:	4b2d      	ldr	r3, [pc, #180]	; (8003128 <HAL_RCC_ClockConfig+0x1c8>)
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	f003 020c 	and.w	r2, r3, #12
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	429a      	cmp	r2, r3
 8003082:	d1eb      	bne.n	800305c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003084:	4b27      	ldr	r3, [pc, #156]	; (8003124 <HAL_RCC_ClockConfig+0x1c4>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 030f 	and.w	r3, r3, #15
 800308c:	683a      	ldr	r2, [r7, #0]
 800308e:	429a      	cmp	r2, r3
 8003090:	d210      	bcs.n	80030b4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003092:	4b24      	ldr	r3, [pc, #144]	; (8003124 <HAL_RCC_ClockConfig+0x1c4>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f023 020f 	bic.w	r2, r3, #15
 800309a:	4922      	ldr	r1, [pc, #136]	; (8003124 <HAL_RCC_ClockConfig+0x1c4>)
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	4313      	orrs	r3, r2
 80030a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030a2:	4b20      	ldr	r3, [pc, #128]	; (8003124 <HAL_RCC_ClockConfig+0x1c4>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 030f 	and.w	r3, r3, #15
 80030aa:	683a      	ldr	r2, [r7, #0]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d001      	beq.n	80030b4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e032      	b.n	800311a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0304 	and.w	r3, r3, #4
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d008      	beq.n	80030d2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030c0:	4b19      	ldr	r3, [pc, #100]	; (8003128 <HAL_RCC_ClockConfig+0x1c8>)
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	4916      	ldr	r1, [pc, #88]	; (8003128 <HAL_RCC_ClockConfig+0x1c8>)
 80030ce:	4313      	orrs	r3, r2
 80030d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0308 	and.w	r3, r3, #8
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d009      	beq.n	80030f2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80030de:	4b12      	ldr	r3, [pc, #72]	; (8003128 <HAL_RCC_ClockConfig+0x1c8>)
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	691b      	ldr	r3, [r3, #16]
 80030ea:	00db      	lsls	r3, r3, #3
 80030ec:	490e      	ldr	r1, [pc, #56]	; (8003128 <HAL_RCC_ClockConfig+0x1c8>)
 80030ee:	4313      	orrs	r3, r2
 80030f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80030f2:	f000 f821 	bl	8003138 <HAL_RCC_GetSysClockFreq>
 80030f6:	4602      	mov	r2, r0
 80030f8:	4b0b      	ldr	r3, [pc, #44]	; (8003128 <HAL_RCC_ClockConfig+0x1c8>)
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	091b      	lsrs	r3, r3, #4
 80030fe:	f003 030f 	and.w	r3, r3, #15
 8003102:	490a      	ldr	r1, [pc, #40]	; (800312c <HAL_RCC_ClockConfig+0x1cc>)
 8003104:	5ccb      	ldrb	r3, [r1, r3]
 8003106:	fa22 f303 	lsr.w	r3, r2, r3
 800310a:	4a09      	ldr	r2, [pc, #36]	; (8003130 <HAL_RCC_ClockConfig+0x1d0>)
 800310c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800310e:	4b09      	ldr	r3, [pc, #36]	; (8003134 <HAL_RCC_ClockConfig+0x1d4>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4618      	mov	r0, r3
 8003114:	f7fd fef2 	bl	8000efc <HAL_InitTick>

  return HAL_OK;
 8003118:	2300      	movs	r3, #0
}
 800311a:	4618      	mov	r0, r3
 800311c:	3710      	adds	r7, #16
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	40023c00 	.word	0x40023c00
 8003128:	40023800 	.word	0x40023800
 800312c:	080092e0 	.word	0x080092e0
 8003130:	20000000 	.word	0x20000000
 8003134:	20000004 	.word	0x20000004

08003138 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003138:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800313c:	b084      	sub	sp, #16
 800313e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003140:	2300      	movs	r3, #0
 8003142:	607b      	str	r3, [r7, #4]
 8003144:	2300      	movs	r3, #0
 8003146:	60fb      	str	r3, [r7, #12]
 8003148:	2300      	movs	r3, #0
 800314a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800314c:	2300      	movs	r3, #0
 800314e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003150:	4b67      	ldr	r3, [pc, #412]	; (80032f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	f003 030c 	and.w	r3, r3, #12
 8003158:	2b08      	cmp	r3, #8
 800315a:	d00d      	beq.n	8003178 <HAL_RCC_GetSysClockFreq+0x40>
 800315c:	2b08      	cmp	r3, #8
 800315e:	f200 80bd 	bhi.w	80032dc <HAL_RCC_GetSysClockFreq+0x1a4>
 8003162:	2b00      	cmp	r3, #0
 8003164:	d002      	beq.n	800316c <HAL_RCC_GetSysClockFreq+0x34>
 8003166:	2b04      	cmp	r3, #4
 8003168:	d003      	beq.n	8003172 <HAL_RCC_GetSysClockFreq+0x3a>
 800316a:	e0b7      	b.n	80032dc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800316c:	4b61      	ldr	r3, [pc, #388]	; (80032f4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800316e:	60bb      	str	r3, [r7, #8]
      break;
 8003170:	e0b7      	b.n	80032e2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003172:	4b61      	ldr	r3, [pc, #388]	; (80032f8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003174:	60bb      	str	r3, [r7, #8]
      break;
 8003176:	e0b4      	b.n	80032e2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003178:	4b5d      	ldr	r3, [pc, #372]	; (80032f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003180:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003182:	4b5b      	ldr	r3, [pc, #364]	; (80032f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d04d      	beq.n	800322a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800318e:	4b58      	ldr	r3, [pc, #352]	; (80032f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	099b      	lsrs	r3, r3, #6
 8003194:	461a      	mov	r2, r3
 8003196:	f04f 0300 	mov.w	r3, #0
 800319a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800319e:	f04f 0100 	mov.w	r1, #0
 80031a2:	ea02 0800 	and.w	r8, r2, r0
 80031a6:	ea03 0901 	and.w	r9, r3, r1
 80031aa:	4640      	mov	r0, r8
 80031ac:	4649      	mov	r1, r9
 80031ae:	f04f 0200 	mov.w	r2, #0
 80031b2:	f04f 0300 	mov.w	r3, #0
 80031b6:	014b      	lsls	r3, r1, #5
 80031b8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80031bc:	0142      	lsls	r2, r0, #5
 80031be:	4610      	mov	r0, r2
 80031c0:	4619      	mov	r1, r3
 80031c2:	ebb0 0008 	subs.w	r0, r0, r8
 80031c6:	eb61 0109 	sbc.w	r1, r1, r9
 80031ca:	f04f 0200 	mov.w	r2, #0
 80031ce:	f04f 0300 	mov.w	r3, #0
 80031d2:	018b      	lsls	r3, r1, #6
 80031d4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80031d8:	0182      	lsls	r2, r0, #6
 80031da:	1a12      	subs	r2, r2, r0
 80031dc:	eb63 0301 	sbc.w	r3, r3, r1
 80031e0:	f04f 0000 	mov.w	r0, #0
 80031e4:	f04f 0100 	mov.w	r1, #0
 80031e8:	00d9      	lsls	r1, r3, #3
 80031ea:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80031ee:	00d0      	lsls	r0, r2, #3
 80031f0:	4602      	mov	r2, r0
 80031f2:	460b      	mov	r3, r1
 80031f4:	eb12 0208 	adds.w	r2, r2, r8
 80031f8:	eb43 0309 	adc.w	r3, r3, r9
 80031fc:	f04f 0000 	mov.w	r0, #0
 8003200:	f04f 0100 	mov.w	r1, #0
 8003204:	0259      	lsls	r1, r3, #9
 8003206:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800320a:	0250      	lsls	r0, r2, #9
 800320c:	4602      	mov	r2, r0
 800320e:	460b      	mov	r3, r1
 8003210:	4610      	mov	r0, r2
 8003212:	4619      	mov	r1, r3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	461a      	mov	r2, r3
 8003218:	f04f 0300 	mov.w	r3, #0
 800321c:	f7fd f860 	bl	80002e0 <__aeabi_uldivmod>
 8003220:	4602      	mov	r2, r0
 8003222:	460b      	mov	r3, r1
 8003224:	4613      	mov	r3, r2
 8003226:	60fb      	str	r3, [r7, #12]
 8003228:	e04a      	b.n	80032c0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800322a:	4b31      	ldr	r3, [pc, #196]	; (80032f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	099b      	lsrs	r3, r3, #6
 8003230:	461a      	mov	r2, r3
 8003232:	f04f 0300 	mov.w	r3, #0
 8003236:	f240 10ff 	movw	r0, #511	; 0x1ff
 800323a:	f04f 0100 	mov.w	r1, #0
 800323e:	ea02 0400 	and.w	r4, r2, r0
 8003242:	ea03 0501 	and.w	r5, r3, r1
 8003246:	4620      	mov	r0, r4
 8003248:	4629      	mov	r1, r5
 800324a:	f04f 0200 	mov.w	r2, #0
 800324e:	f04f 0300 	mov.w	r3, #0
 8003252:	014b      	lsls	r3, r1, #5
 8003254:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003258:	0142      	lsls	r2, r0, #5
 800325a:	4610      	mov	r0, r2
 800325c:	4619      	mov	r1, r3
 800325e:	1b00      	subs	r0, r0, r4
 8003260:	eb61 0105 	sbc.w	r1, r1, r5
 8003264:	f04f 0200 	mov.w	r2, #0
 8003268:	f04f 0300 	mov.w	r3, #0
 800326c:	018b      	lsls	r3, r1, #6
 800326e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003272:	0182      	lsls	r2, r0, #6
 8003274:	1a12      	subs	r2, r2, r0
 8003276:	eb63 0301 	sbc.w	r3, r3, r1
 800327a:	f04f 0000 	mov.w	r0, #0
 800327e:	f04f 0100 	mov.w	r1, #0
 8003282:	00d9      	lsls	r1, r3, #3
 8003284:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003288:	00d0      	lsls	r0, r2, #3
 800328a:	4602      	mov	r2, r0
 800328c:	460b      	mov	r3, r1
 800328e:	1912      	adds	r2, r2, r4
 8003290:	eb45 0303 	adc.w	r3, r5, r3
 8003294:	f04f 0000 	mov.w	r0, #0
 8003298:	f04f 0100 	mov.w	r1, #0
 800329c:	0299      	lsls	r1, r3, #10
 800329e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80032a2:	0290      	lsls	r0, r2, #10
 80032a4:	4602      	mov	r2, r0
 80032a6:	460b      	mov	r3, r1
 80032a8:	4610      	mov	r0, r2
 80032aa:	4619      	mov	r1, r3
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	461a      	mov	r2, r3
 80032b0:	f04f 0300 	mov.w	r3, #0
 80032b4:	f7fd f814 	bl	80002e0 <__aeabi_uldivmod>
 80032b8:	4602      	mov	r2, r0
 80032ba:	460b      	mov	r3, r1
 80032bc:	4613      	mov	r3, r2
 80032be:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80032c0:	4b0b      	ldr	r3, [pc, #44]	; (80032f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	0c1b      	lsrs	r3, r3, #16
 80032c6:	f003 0303 	and.w	r3, r3, #3
 80032ca:	3301      	adds	r3, #1
 80032cc:	005b      	lsls	r3, r3, #1
 80032ce:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80032d0:	68fa      	ldr	r2, [r7, #12]
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032d8:	60bb      	str	r3, [r7, #8]
      break;
 80032da:	e002      	b.n	80032e2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80032dc:	4b05      	ldr	r3, [pc, #20]	; (80032f4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80032de:	60bb      	str	r3, [r7, #8]
      break;
 80032e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032e2:	68bb      	ldr	r3, [r7, #8]
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3710      	adds	r7, #16
 80032e8:	46bd      	mov	sp, r7
 80032ea:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80032ee:	bf00      	nop
 80032f0:	40023800 	.word	0x40023800
 80032f4:	00f42400 	.word	0x00f42400
 80032f8:	007a1200 	.word	0x007a1200

080032fc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032fc:	b480      	push	{r7}
 80032fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003300:	4b03      	ldr	r3, [pc, #12]	; (8003310 <HAL_RCC_GetHCLKFreq+0x14>)
 8003302:	681b      	ldr	r3, [r3, #0]
}
 8003304:	4618      	mov	r0, r3
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr
 800330e:	bf00      	nop
 8003310:	20000000 	.word	0x20000000

08003314 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003318:	f7ff fff0 	bl	80032fc <HAL_RCC_GetHCLKFreq>
 800331c:	4602      	mov	r2, r0
 800331e:	4b05      	ldr	r3, [pc, #20]	; (8003334 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	0a9b      	lsrs	r3, r3, #10
 8003324:	f003 0307 	and.w	r3, r3, #7
 8003328:	4903      	ldr	r1, [pc, #12]	; (8003338 <HAL_RCC_GetPCLK1Freq+0x24>)
 800332a:	5ccb      	ldrb	r3, [r1, r3]
 800332c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003330:	4618      	mov	r0, r3
 8003332:	bd80      	pop	{r7, pc}
 8003334:	40023800 	.word	0x40023800
 8003338:	080092f0 	.word	0x080092f0

0800333c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003340:	f7ff ffdc 	bl	80032fc <HAL_RCC_GetHCLKFreq>
 8003344:	4602      	mov	r2, r0
 8003346:	4b05      	ldr	r3, [pc, #20]	; (800335c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	0b5b      	lsrs	r3, r3, #13
 800334c:	f003 0307 	and.w	r3, r3, #7
 8003350:	4903      	ldr	r1, [pc, #12]	; (8003360 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003352:	5ccb      	ldrb	r3, [r1, r3]
 8003354:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003358:	4618      	mov	r0, r3
 800335a:	bd80      	pop	{r7, pc}
 800335c:	40023800 	.word	0x40023800
 8003360:	080092f0 	.word	0x080092f0

08003364 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b088      	sub	sp, #32
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800336c:	2300      	movs	r3, #0
 800336e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003370:	2300      	movs	r3, #0
 8003372:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003374:	2300      	movs	r3, #0
 8003376:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003378:	2300      	movs	r3, #0
 800337a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800337c:	2300      	movs	r3, #0
 800337e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0301 	and.w	r3, r3, #1
 8003388:	2b00      	cmp	r3, #0
 800338a:	d012      	beq.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800338c:	4b69      	ldr	r3, [pc, #420]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	4a68      	ldr	r2, [pc, #416]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003392:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003396:	6093      	str	r3, [r2, #8]
 8003398:	4b66      	ldr	r3, [pc, #408]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800339a:	689a      	ldr	r2, [r3, #8]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033a0:	4964      	ldr	r1, [pc, #400]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033a2:	4313      	orrs	r3, r2
 80033a4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d101      	bne.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80033ae:	2301      	movs	r3, #1
 80033b0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d017      	beq.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80033be:	4b5d      	ldr	r3, [pc, #372]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033c4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033cc:	4959      	ldr	r1, [pc, #356]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033ce:	4313      	orrs	r3, r2
 80033d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033dc:	d101      	bne.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80033de:	2301      	movs	r3, #1
 80033e0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d101      	bne.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80033ea:	2301      	movs	r3, #1
 80033ec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d017      	beq.n	800342a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80033fa:	4b4e      	ldr	r3, [pc, #312]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003400:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003408:	494a      	ldr	r1, [pc, #296]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800340a:	4313      	orrs	r3, r2
 800340c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003414:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003418:	d101      	bne.n	800341e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800341a:	2301      	movs	r3, #1
 800341c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003422:	2b00      	cmp	r3, #0
 8003424:	d101      	bne.n	800342a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003426:	2301      	movs	r3, #1
 8003428:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d001      	beq.n	800343a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003436:	2301      	movs	r3, #1
 8003438:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0320 	and.w	r3, r3, #32
 8003442:	2b00      	cmp	r3, #0
 8003444:	f000 808b 	beq.w	800355e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003448:	4b3a      	ldr	r3, [pc, #232]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800344a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344c:	4a39      	ldr	r2, [pc, #228]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800344e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003452:	6413      	str	r3, [r2, #64]	; 0x40
 8003454:	4b37      	ldr	r3, [pc, #220]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003458:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800345c:	60bb      	str	r3, [r7, #8]
 800345e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003460:	4b35      	ldr	r3, [pc, #212]	; (8003538 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a34      	ldr	r2, [pc, #208]	; (8003538 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003466:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800346a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800346c:	f7fd fd8a 	bl	8000f84 <HAL_GetTick>
 8003470:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003472:	e008      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003474:	f7fd fd86 	bl	8000f84 <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	2b64      	cmp	r3, #100	; 0x64
 8003480:	d901      	bls.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e38f      	b.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003486:	4b2c      	ldr	r3, [pc, #176]	; (8003538 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800348e:	2b00      	cmp	r3, #0
 8003490:	d0f0      	beq.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003492:	4b28      	ldr	r3, [pc, #160]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003496:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800349a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d035      	beq.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034aa:	693a      	ldr	r2, [r7, #16]
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d02e      	beq.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80034b0:	4b20      	ldr	r3, [pc, #128]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034b8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80034ba:	4b1e      	ldr	r3, [pc, #120]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034be:	4a1d      	ldr	r2, [pc, #116]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034c4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80034c6:	4b1b      	ldr	r3, [pc, #108]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ca:	4a1a      	ldr	r2, [pc, #104]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034d0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80034d2:	4a18      	ldr	r2, [pc, #96]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80034d8:	4b16      	ldr	r3, [pc, #88]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034dc:	f003 0301 	and.w	r3, r3, #1
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d114      	bne.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034e4:	f7fd fd4e 	bl	8000f84 <HAL_GetTick>
 80034e8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034ea:	e00a      	b.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034ec:	f7fd fd4a 	bl	8000f84 <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d901      	bls.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e351      	b.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003502:	4b0c      	ldr	r3, [pc, #48]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003506:	f003 0302 	and.w	r3, r3, #2
 800350a:	2b00      	cmp	r3, #0
 800350c:	d0ee      	beq.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003512:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003516:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800351a:	d111      	bne.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800351c:	4b05      	ldr	r3, [pc, #20]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003528:	4b04      	ldr	r3, [pc, #16]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800352a:	400b      	ands	r3, r1
 800352c:	4901      	ldr	r1, [pc, #4]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800352e:	4313      	orrs	r3, r2
 8003530:	608b      	str	r3, [r1, #8]
 8003532:	e00b      	b.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003534:	40023800 	.word	0x40023800
 8003538:	40007000 	.word	0x40007000
 800353c:	0ffffcff 	.word	0x0ffffcff
 8003540:	4bb3      	ldr	r3, [pc, #716]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	4ab2      	ldr	r2, [pc, #712]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003546:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800354a:	6093      	str	r3, [r2, #8]
 800354c:	4bb0      	ldr	r3, [pc, #704]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800354e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003554:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003558:	49ad      	ldr	r1, [pc, #692]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800355a:	4313      	orrs	r3, r2
 800355c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 0310 	and.w	r3, r3, #16
 8003566:	2b00      	cmp	r3, #0
 8003568:	d010      	beq.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800356a:	4ba9      	ldr	r3, [pc, #676]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800356c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003570:	4aa7      	ldr	r2, [pc, #668]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003572:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003576:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800357a:	4ba5      	ldr	r3, [pc, #660]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800357c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003584:	49a2      	ldr	r1, [pc, #648]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003586:	4313      	orrs	r3, r2
 8003588:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003594:	2b00      	cmp	r3, #0
 8003596:	d00a      	beq.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003598:	4b9d      	ldr	r3, [pc, #628]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800359a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800359e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035a6:	499a      	ldr	r1, [pc, #616]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80035a8:	4313      	orrs	r3, r2
 80035aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d00a      	beq.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80035ba:	4b95      	ldr	r3, [pc, #596]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80035bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035c0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035c8:	4991      	ldr	r1, [pc, #580]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80035ca:	4313      	orrs	r3, r2
 80035cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d00a      	beq.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80035dc:	4b8c      	ldr	r3, [pc, #560]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80035de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035e2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035ea:	4989      	ldr	r1, [pc, #548]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80035ec:	4313      	orrs	r3, r2
 80035ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d00a      	beq.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80035fe:	4b84      	ldr	r3, [pc, #528]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003600:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003604:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800360c:	4980      	ldr	r1, [pc, #512]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800360e:	4313      	orrs	r3, r2
 8003610:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800361c:	2b00      	cmp	r3, #0
 800361e:	d00a      	beq.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003620:	4b7b      	ldr	r3, [pc, #492]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003622:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003626:	f023 0203 	bic.w	r2, r3, #3
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800362e:	4978      	ldr	r1, [pc, #480]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003630:	4313      	orrs	r3, r2
 8003632:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800363e:	2b00      	cmp	r3, #0
 8003640:	d00a      	beq.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003642:	4b73      	ldr	r3, [pc, #460]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003644:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003648:	f023 020c 	bic.w	r2, r3, #12
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003650:	496f      	ldr	r1, [pc, #444]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003652:	4313      	orrs	r3, r2
 8003654:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003660:	2b00      	cmp	r3, #0
 8003662:	d00a      	beq.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003664:	4b6a      	ldr	r3, [pc, #424]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003666:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800366a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003672:	4967      	ldr	r1, [pc, #412]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003674:	4313      	orrs	r3, r2
 8003676:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003682:	2b00      	cmp	r3, #0
 8003684:	d00a      	beq.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003686:	4b62      	ldr	r3, [pc, #392]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003688:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800368c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003694:	495e      	ldr	r1, [pc, #376]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003696:	4313      	orrs	r3, r2
 8003698:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d00a      	beq.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80036a8:	4b59      	ldr	r3, [pc, #356]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036ae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036b6:	4956      	ldr	r1, [pc, #344]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036b8:	4313      	orrs	r3, r2
 80036ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d00a      	beq.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80036ca:	4b51      	ldr	r3, [pc, #324]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036d0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036d8:	494d      	ldr	r1, [pc, #308]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036da:	4313      	orrs	r3, r2
 80036dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d00a      	beq.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80036ec:	4b48      	ldr	r3, [pc, #288]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036f2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036fa:	4945      	ldr	r1, [pc, #276]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036fc:	4313      	orrs	r3, r2
 80036fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800370a:	2b00      	cmp	r3, #0
 800370c:	d00a      	beq.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800370e:	4b40      	ldr	r3, [pc, #256]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003710:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003714:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800371c:	493c      	ldr	r1, [pc, #240]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800371e:	4313      	orrs	r3, r2
 8003720:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800372c:	2b00      	cmp	r3, #0
 800372e:	d00a      	beq.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003730:	4b37      	ldr	r3, [pc, #220]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003732:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003736:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800373e:	4934      	ldr	r1, [pc, #208]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003740:	4313      	orrs	r3, r2
 8003742:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d011      	beq.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003752:	4b2f      	ldr	r3, [pc, #188]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003754:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003758:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003760:	492b      	ldr	r1, [pc, #172]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003762:	4313      	orrs	r3, r2
 8003764:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800376c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003770:	d101      	bne.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003772:	2301      	movs	r3, #1
 8003774:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0308 	and.w	r3, r3, #8
 800377e:	2b00      	cmp	r3, #0
 8003780:	d001      	beq.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003782:	2301      	movs	r3, #1
 8003784:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d00a      	beq.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003792:	4b1f      	ldr	r3, [pc, #124]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003794:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003798:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037a0:	491b      	ldr	r1, [pc, #108]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037a2:	4313      	orrs	r3, r2
 80037a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d00b      	beq.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80037b4:	4b16      	ldr	r3, [pc, #88]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ba:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037c4:	4912      	ldr	r1, [pc, #72]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037c6:	4313      	orrs	r3, r2
 80037c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d00b      	beq.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80037d8:	4b0d      	ldr	r3, [pc, #52]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037de:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037e8:	4909      	ldr	r1, [pc, #36]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037ea:	4313      	orrs	r3, r2
 80037ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d00f      	beq.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80037fc:	4b04      	ldr	r3, [pc, #16]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003802:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800380c:	e002      	b.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800380e:	bf00      	nop
 8003810:	40023800 	.word	0x40023800
 8003814:	4986      	ldr	r1, [pc, #536]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003816:	4313      	orrs	r3, r2
 8003818:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003824:	2b00      	cmp	r3, #0
 8003826:	d00b      	beq.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003828:	4b81      	ldr	r3, [pc, #516]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800382a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800382e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003838:	497d      	ldr	r1, [pc, #500]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800383a:	4313      	orrs	r3, r2
 800383c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	2b01      	cmp	r3, #1
 8003844:	d006      	beq.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800384e:	2b00      	cmp	r3, #0
 8003850:	f000 80d6 	beq.w	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003854:	4b76      	ldr	r3, [pc, #472]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a75      	ldr	r2, [pc, #468]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800385a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800385e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003860:	f7fd fb90 	bl	8000f84 <HAL_GetTick>
 8003864:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003866:	e008      	b.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003868:	f7fd fb8c 	bl	8000f84 <HAL_GetTick>
 800386c:	4602      	mov	r2, r0
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	2b64      	cmp	r3, #100	; 0x64
 8003874:	d901      	bls.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	e195      	b.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800387a:	4b6d      	ldr	r3, [pc, #436]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d1f0      	bne.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0301 	and.w	r3, r3, #1
 800388e:	2b00      	cmp	r3, #0
 8003890:	d021      	beq.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003896:	2b00      	cmp	r3, #0
 8003898:	d11d      	bne.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800389a:	4b65      	ldr	r3, [pc, #404]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800389c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038a0:	0c1b      	lsrs	r3, r3, #16
 80038a2:	f003 0303 	and.w	r3, r3, #3
 80038a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80038a8:	4b61      	ldr	r3, [pc, #388]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038ae:	0e1b      	lsrs	r3, r3, #24
 80038b0:	f003 030f 	and.w	r3, r3, #15
 80038b4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	019a      	lsls	r2, r3, #6
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	041b      	lsls	r3, r3, #16
 80038c0:	431a      	orrs	r2, r3
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	061b      	lsls	r3, r3, #24
 80038c6:	431a      	orrs	r2, r3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	071b      	lsls	r3, r3, #28
 80038ce:	4958      	ldr	r1, [pc, #352]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038d0:	4313      	orrs	r3, r2
 80038d2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d004      	beq.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x588>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038ea:	d00a      	beq.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d02e      	beq.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003900:	d129      	bne.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003902:	4b4b      	ldr	r3, [pc, #300]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003904:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003908:	0c1b      	lsrs	r3, r3, #16
 800390a:	f003 0303 	and.w	r3, r3, #3
 800390e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003910:	4b47      	ldr	r3, [pc, #284]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003912:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003916:	0f1b      	lsrs	r3, r3, #28
 8003918:	f003 0307 	and.w	r3, r3, #7
 800391c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	019a      	lsls	r2, r3, #6
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	041b      	lsls	r3, r3, #16
 8003928:	431a      	orrs	r2, r3
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	061b      	lsls	r3, r3, #24
 8003930:	431a      	orrs	r2, r3
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	071b      	lsls	r3, r3, #28
 8003936:	493e      	ldr	r1, [pc, #248]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003938:	4313      	orrs	r3, r2
 800393a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800393e:	4b3c      	ldr	r3, [pc, #240]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003940:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003944:	f023 021f 	bic.w	r2, r3, #31
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394c:	3b01      	subs	r3, #1
 800394e:	4938      	ldr	r1, [pc, #224]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003950:	4313      	orrs	r3, r2
 8003952:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800395e:	2b00      	cmp	r3, #0
 8003960:	d01d      	beq.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003962:	4b33      	ldr	r3, [pc, #204]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003964:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003968:	0e1b      	lsrs	r3, r3, #24
 800396a:	f003 030f 	and.w	r3, r3, #15
 800396e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003970:	4b2f      	ldr	r3, [pc, #188]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003972:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003976:	0f1b      	lsrs	r3, r3, #28
 8003978:	f003 0307 	and.w	r3, r3, #7
 800397c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	019a      	lsls	r2, r3, #6
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	691b      	ldr	r3, [r3, #16]
 8003988:	041b      	lsls	r3, r3, #16
 800398a:	431a      	orrs	r2, r3
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	061b      	lsls	r3, r3, #24
 8003990:	431a      	orrs	r2, r3
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	071b      	lsls	r3, r3, #28
 8003996:	4926      	ldr	r1, [pc, #152]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003998:	4313      	orrs	r3, r2
 800399a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d011      	beq.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	019a      	lsls	r2, r3, #6
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	691b      	ldr	r3, [r3, #16]
 80039b4:	041b      	lsls	r3, r3, #16
 80039b6:	431a      	orrs	r2, r3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	061b      	lsls	r3, r3, #24
 80039be:	431a      	orrs	r2, r3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	071b      	lsls	r3, r3, #28
 80039c6:	491a      	ldr	r1, [pc, #104]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039c8:	4313      	orrs	r3, r2
 80039ca:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80039ce:	4b18      	ldr	r3, [pc, #96]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a17      	ldr	r2, [pc, #92]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039d4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80039d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039da:	f7fd fad3 	bl	8000f84 <HAL_GetTick>
 80039de:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80039e0:	e008      	b.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80039e2:	f7fd facf 	bl	8000f84 <HAL_GetTick>
 80039e6:	4602      	mov	r2, r0
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	2b64      	cmp	r3, #100	; 0x64
 80039ee:	d901      	bls.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039f0:	2303      	movs	r3, #3
 80039f2:	e0d8      	b.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80039f4:	4b0e      	ldr	r3, [pc, #56]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d0f0      	beq.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003a00:	69bb      	ldr	r3, [r7, #24]
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	f040 80ce 	bne.w	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003a08:	4b09      	ldr	r3, [pc, #36]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a08      	ldr	r2, [pc, #32]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a12:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a14:	f7fd fab6 	bl	8000f84 <HAL_GetTick>
 8003a18:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003a1a:	e00b      	b.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003a1c:	f7fd fab2 	bl	8000f84 <HAL_GetTick>
 8003a20:	4602      	mov	r2, r0
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	2b64      	cmp	r3, #100	; 0x64
 8003a28:	d904      	bls.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	e0bb      	b.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003a2e:	bf00      	nop
 8003a30:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003a34:	4b5e      	ldr	r3, [pc, #376]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a40:	d0ec      	beq.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d003      	beq.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d009      	beq.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d02e      	beq.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d12a      	bne.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003a6a:	4b51      	ldr	r3, [pc, #324]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a70:	0c1b      	lsrs	r3, r3, #16
 8003a72:	f003 0303 	and.w	r3, r3, #3
 8003a76:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003a78:	4b4d      	ldr	r3, [pc, #308]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a7e:	0f1b      	lsrs	r3, r3, #28
 8003a80:	f003 0307 	and.w	r3, r3, #7
 8003a84:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	695b      	ldr	r3, [r3, #20]
 8003a8a:	019a      	lsls	r2, r3, #6
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	041b      	lsls	r3, r3, #16
 8003a90:	431a      	orrs	r2, r3
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	699b      	ldr	r3, [r3, #24]
 8003a96:	061b      	lsls	r3, r3, #24
 8003a98:	431a      	orrs	r2, r3
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	071b      	lsls	r3, r3, #28
 8003a9e:	4944      	ldr	r1, [pc, #272]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003aa6:	4b42      	ldr	r3, [pc, #264]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003aa8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003aac:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ab4:	3b01      	subs	r3, #1
 8003ab6:	021b      	lsls	r3, r3, #8
 8003ab8:	493d      	ldr	r1, [pc, #244]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003aba:	4313      	orrs	r3, r2
 8003abc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d022      	beq.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ad0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ad4:	d11d      	bne.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003ad6:	4b36      	ldr	r3, [pc, #216]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003adc:	0e1b      	lsrs	r3, r3, #24
 8003ade:	f003 030f 	and.w	r3, r3, #15
 8003ae2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003ae4:	4b32      	ldr	r3, [pc, #200]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aea:	0f1b      	lsrs	r3, r3, #28
 8003aec:	f003 0307 	and.w	r3, r3, #7
 8003af0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	695b      	ldr	r3, [r3, #20]
 8003af6:	019a      	lsls	r2, r3, #6
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6a1b      	ldr	r3, [r3, #32]
 8003afc:	041b      	lsls	r3, r3, #16
 8003afe:	431a      	orrs	r2, r3
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	061b      	lsls	r3, r3, #24
 8003b04:	431a      	orrs	r2, r3
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	071b      	lsls	r3, r3, #28
 8003b0a:	4929      	ldr	r1, [pc, #164]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 0308 	and.w	r3, r3, #8
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d028      	beq.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003b1e:	4b24      	ldr	r3, [pc, #144]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b24:	0e1b      	lsrs	r3, r3, #24
 8003b26:	f003 030f 	and.w	r3, r3, #15
 8003b2a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003b2c:	4b20      	ldr	r3, [pc, #128]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b32:	0c1b      	lsrs	r3, r3, #16
 8003b34:	f003 0303 	and.w	r3, r3, #3
 8003b38:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	695b      	ldr	r3, [r3, #20]
 8003b3e:	019a      	lsls	r2, r3, #6
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	041b      	lsls	r3, r3, #16
 8003b44:	431a      	orrs	r2, r3
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	061b      	lsls	r3, r3, #24
 8003b4a:	431a      	orrs	r2, r3
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	69db      	ldr	r3, [r3, #28]
 8003b50:	071b      	lsls	r3, r3, #28
 8003b52:	4917      	ldr	r1, [pc, #92]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b54:	4313      	orrs	r3, r2
 8003b56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003b5a:	4b15      	ldr	r3, [pc, #84]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b60:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b68:	4911      	ldr	r1, [pc, #68]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003b70:	4b0f      	ldr	r3, [pc, #60]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a0e      	ldr	r2, [pc, #56]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b7c:	f7fd fa02 	bl	8000f84 <HAL_GetTick>
 8003b80:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003b82:	e008      	b.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003b84:	f7fd f9fe 	bl	8000f84 <HAL_GetTick>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	2b64      	cmp	r3, #100	; 0x64
 8003b90:	d901      	bls.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	e007      	b.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003b96:	4b06      	ldr	r3, [pc, #24]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ba2:	d1ef      	bne.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003ba4:	2300      	movs	r3, #0
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3720      	adds	r7, #32
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	40023800 	.word	0x40023800

08003bb4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b084      	sub	sp, #16
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d101      	bne.n	8003bc6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e09d      	b.n	8003d02 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d108      	bne.n	8003be0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bd6:	d009      	beq.n	8003bec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	61da      	str	r2, [r3, #28]
 8003bde:	e005      	b.n	8003bec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2200      	movs	r2, #0
 8003be4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2200      	movs	r2, #0
 8003bea:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d106      	bne.n	8003c0c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2200      	movs	r2, #0
 8003c02:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f7fd f81c 	bl	8000c44 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2202      	movs	r2, #2
 8003c10:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c22:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003c2c:	d902      	bls.n	8003c34 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	60fb      	str	r3, [r7, #12]
 8003c32:	e002      	b.n	8003c3a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003c34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c38:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	68db      	ldr	r3, [r3, #12]
 8003c3e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003c42:	d007      	beq.n	8003c54 <HAL_SPI_Init+0xa0>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003c4c:	d002      	beq.n	8003c54 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003c64:	431a      	orrs	r2, r3
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	691b      	ldr	r3, [r3, #16]
 8003c6a:	f003 0302 	and.w	r3, r3, #2
 8003c6e:	431a      	orrs	r2, r3
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	695b      	ldr	r3, [r3, #20]
 8003c74:	f003 0301 	and.w	r3, r3, #1
 8003c78:	431a      	orrs	r2, r3
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	699b      	ldr	r3, [r3, #24]
 8003c7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c82:	431a      	orrs	r2, r3
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	69db      	ldr	r3, [r3, #28]
 8003c88:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c8c:	431a      	orrs	r2, r3
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a1b      	ldr	r3, [r3, #32]
 8003c92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c96:	ea42 0103 	orr.w	r1, r2, r3
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c9e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	430a      	orrs	r2, r1
 8003ca8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	699b      	ldr	r3, [r3, #24]
 8003cae:	0c1b      	lsrs	r3, r3, #16
 8003cb0:	f003 0204 	and.w	r2, r3, #4
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb8:	f003 0310 	and.w	r3, r3, #16
 8003cbc:	431a      	orrs	r2, r3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cc2:	f003 0308 	and.w	r3, r3, #8
 8003cc6:	431a      	orrs	r2, r3
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	68db      	ldr	r3, [r3, #12]
 8003ccc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003cd0:	ea42 0103 	orr.w	r1, r2, r3
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	430a      	orrs	r2, r1
 8003ce0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	69da      	ldr	r2, [r3, #28]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003cf0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003d00:	2300      	movs	r3, #0
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3710      	adds	r7, #16
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}

08003d0a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d0a:	b580      	push	{r7, lr}
 8003d0c:	b088      	sub	sp, #32
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	60f8      	str	r0, [r7, #12]
 8003d12:	60b9      	str	r1, [r7, #8]
 8003d14:	603b      	str	r3, [r7, #0]
 8003d16:	4613      	mov	r3, r2
 8003d18:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d101      	bne.n	8003d2c <HAL_SPI_Transmit+0x22>
 8003d28:	2302      	movs	r3, #2
 8003d2a:	e158      	b.n	8003fde <HAL_SPI_Transmit+0x2d4>
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d34:	f7fd f926 	bl	8000f84 <HAL_GetTick>
 8003d38:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003d3a:	88fb      	ldrh	r3, [r7, #6]
 8003d3c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	2b01      	cmp	r3, #1
 8003d48:	d002      	beq.n	8003d50 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003d4a:	2302      	movs	r3, #2
 8003d4c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003d4e:	e13d      	b.n	8003fcc <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d002      	beq.n	8003d5c <HAL_SPI_Transmit+0x52>
 8003d56:	88fb      	ldrh	r3, [r7, #6]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d102      	bne.n	8003d62 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003d60:	e134      	b.n	8003fcc <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2203      	movs	r2, #3
 8003d66:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	68ba      	ldr	r2, [r7, #8]
 8003d74:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	88fa      	ldrh	r2, [r7, #6]
 8003d7a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	88fa      	ldrh	r2, [r7, #6]
 8003d80:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2200      	movs	r2, #0
 8003d86:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2200      	movs	r2, #0
 8003d94:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2200      	movs	r2, #0
 8003da2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dac:	d10f      	bne.n	8003dce <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dbc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003dcc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dd8:	2b40      	cmp	r3, #64	; 0x40
 8003dda:	d007      	beq.n	8003dec <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003dea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003df4:	d94b      	bls.n	8003e8e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d002      	beq.n	8003e04 <HAL_SPI_Transmit+0xfa>
 8003dfe:	8afb      	ldrh	r3, [r7, #22]
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d13e      	bne.n	8003e82 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e08:	881a      	ldrh	r2, [r3, #0]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e14:	1c9a      	adds	r2, r3, #2
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	3b01      	subs	r3, #1
 8003e22:	b29a      	uxth	r2, r3
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003e28:	e02b      	b.n	8003e82 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	f003 0302 	and.w	r3, r3, #2
 8003e34:	2b02      	cmp	r3, #2
 8003e36:	d112      	bne.n	8003e5e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e3c:	881a      	ldrh	r2, [r3, #0]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e48:	1c9a      	adds	r2, r3, #2
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	3b01      	subs	r3, #1
 8003e56:	b29a      	uxth	r2, r3
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003e5c:	e011      	b.n	8003e82 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e5e:	f7fd f891 	bl	8000f84 <HAL_GetTick>
 8003e62:	4602      	mov	r2, r0
 8003e64:	69bb      	ldr	r3, [r7, #24]
 8003e66:	1ad3      	subs	r3, r2, r3
 8003e68:	683a      	ldr	r2, [r7, #0]
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d803      	bhi.n	8003e76 <HAL_SPI_Transmit+0x16c>
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e74:	d102      	bne.n	8003e7c <HAL_SPI_Transmit+0x172>
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d102      	bne.n	8003e82 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8003e7c:	2303      	movs	r3, #3
 8003e7e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003e80:	e0a4      	b.n	8003fcc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d1ce      	bne.n	8003e2a <HAL_SPI_Transmit+0x120>
 8003e8c:	e07c      	b.n	8003f88 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d002      	beq.n	8003e9c <HAL_SPI_Transmit+0x192>
 8003e96:	8afb      	ldrh	r3, [r7, #22]
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d170      	bne.n	8003f7e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d912      	bls.n	8003ecc <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eaa:	881a      	ldrh	r2, [r3, #0]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb6:	1c9a      	adds	r2, r3, #2
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	3b02      	subs	r3, #2
 8003ec4:	b29a      	uxth	r2, r3
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003eca:	e058      	b.n	8003f7e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	330c      	adds	r3, #12
 8003ed6:	7812      	ldrb	r2, [r2, #0]
 8003ed8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ede:	1c5a      	adds	r2, r3, #1
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ee8:	b29b      	uxth	r3, r3
 8003eea:	3b01      	subs	r3, #1
 8003eec:	b29a      	uxth	r2, r3
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003ef2:	e044      	b.n	8003f7e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	f003 0302 	and.w	r3, r3, #2
 8003efe:	2b02      	cmp	r3, #2
 8003f00:	d12b      	bne.n	8003f5a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f06:	b29b      	uxth	r3, r3
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d912      	bls.n	8003f32 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f10:	881a      	ldrh	r2, [r3, #0]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f1c:	1c9a      	adds	r2, r3, #2
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f26:	b29b      	uxth	r3, r3
 8003f28:	3b02      	subs	r3, #2
 8003f2a:	b29a      	uxth	r2, r3
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003f30:	e025      	b.n	8003f7e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	330c      	adds	r3, #12
 8003f3c:	7812      	ldrb	r2, [r2, #0]
 8003f3e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f44:	1c5a      	adds	r2, r3, #1
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	3b01      	subs	r3, #1
 8003f52:	b29a      	uxth	r2, r3
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003f58:	e011      	b.n	8003f7e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f5a:	f7fd f813 	bl	8000f84 <HAL_GetTick>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	69bb      	ldr	r3, [r7, #24]
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	683a      	ldr	r2, [r7, #0]
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d803      	bhi.n	8003f72 <HAL_SPI_Transmit+0x268>
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f70:	d102      	bne.n	8003f78 <HAL_SPI_Transmit+0x26e>
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d102      	bne.n	8003f7e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8003f78:	2303      	movs	r3, #3
 8003f7a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003f7c:	e026      	b.n	8003fcc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f82:	b29b      	uxth	r3, r3
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d1b5      	bne.n	8003ef4 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f88:	69ba      	ldr	r2, [r7, #24]
 8003f8a:	6839      	ldr	r1, [r7, #0]
 8003f8c:	68f8      	ldr	r0, [r7, #12]
 8003f8e:	f000 fb57 	bl	8004640 <SPI_EndRxTxTransaction>
 8003f92:	4603      	mov	r3, r0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d002      	beq.n	8003f9e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2220      	movs	r2, #32
 8003f9c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d10a      	bne.n	8003fbc <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	613b      	str	r3, [r7, #16]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	613b      	str	r3, [r7, #16]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	613b      	str	r3, [r7, #16]
 8003fba:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d002      	beq.n	8003fca <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	77fb      	strb	r3, [r7, #31]
 8003fc8:	e000      	b.n	8003fcc <HAL_SPI_Transmit+0x2c2>
  }

error:
 8003fca:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003fdc:	7ffb      	ldrb	r3, [r7, #31]
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3720      	adds	r7, #32
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}

08003fe6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003fe6:	b580      	push	{r7, lr}
 8003fe8:	b08a      	sub	sp, #40	; 0x28
 8003fea:	af00      	add	r7, sp, #0
 8003fec:	60f8      	str	r0, [r7, #12]
 8003fee:	60b9      	str	r1, [r7, #8]
 8003ff0:	607a      	str	r2, [r7, #4]
 8003ff2:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004004:	2b01      	cmp	r3, #1
 8004006:	d101      	bne.n	800400c <HAL_SPI_TransmitReceive+0x26>
 8004008:	2302      	movs	r3, #2
 800400a:	e1fb      	b.n	8004404 <HAL_SPI_TransmitReceive+0x41e>
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004014:	f7fc ffb6 	bl	8000f84 <HAL_GetTick>
 8004018:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004020:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004028:	887b      	ldrh	r3, [r7, #2]
 800402a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800402c:	887b      	ldrh	r3, [r7, #2]
 800402e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004030:	7efb      	ldrb	r3, [r7, #27]
 8004032:	2b01      	cmp	r3, #1
 8004034:	d00e      	beq.n	8004054 <HAL_SPI_TransmitReceive+0x6e>
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800403c:	d106      	bne.n	800404c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d102      	bne.n	800404c <HAL_SPI_TransmitReceive+0x66>
 8004046:	7efb      	ldrb	r3, [r7, #27]
 8004048:	2b04      	cmp	r3, #4
 800404a:	d003      	beq.n	8004054 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800404c:	2302      	movs	r3, #2
 800404e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004052:	e1cd      	b.n	80043f0 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d005      	beq.n	8004066 <HAL_SPI_TransmitReceive+0x80>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d002      	beq.n	8004066 <HAL_SPI_TransmitReceive+0x80>
 8004060:	887b      	ldrh	r3, [r7, #2]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d103      	bne.n	800406e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800406c:	e1c0      	b.n	80043f0 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004074:	b2db      	uxtb	r3, r3
 8004076:	2b04      	cmp	r3, #4
 8004078:	d003      	beq.n	8004082 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2205      	movs	r2, #5
 800407e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2200      	movs	r2, #0
 8004086:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	887a      	ldrh	r2, [r7, #2]
 8004092:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	887a      	ldrh	r2, [r7, #2]
 800409a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	68ba      	ldr	r2, [r7, #8]
 80040a2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	887a      	ldrh	r2, [r7, #2]
 80040a8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	887a      	ldrh	r2, [r7, #2]
 80040ae:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2200      	movs	r2, #0
 80040b4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2200      	movs	r2, #0
 80040ba:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	68db      	ldr	r3, [r3, #12]
 80040c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80040c4:	d802      	bhi.n	80040cc <HAL_SPI_TransmitReceive+0xe6>
 80040c6:	8a3b      	ldrh	r3, [r7, #16]
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d908      	bls.n	80040de <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	685a      	ldr	r2, [r3, #4]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80040da:	605a      	str	r2, [r3, #4]
 80040dc:	e007      	b.n	80040ee <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	685a      	ldr	r2, [r3, #4]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80040ec:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040f8:	2b40      	cmp	r3, #64	; 0x40
 80040fa:	d007      	beq.n	800410c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800410a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	68db      	ldr	r3, [r3, #12]
 8004110:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004114:	d97c      	bls.n	8004210 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d002      	beq.n	8004124 <HAL_SPI_TransmitReceive+0x13e>
 800411e:	8a7b      	ldrh	r3, [r7, #18]
 8004120:	2b01      	cmp	r3, #1
 8004122:	d169      	bne.n	80041f8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004128:	881a      	ldrh	r2, [r3, #0]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004134:	1c9a      	adds	r2, r3, #2
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800413e:	b29b      	uxth	r3, r3
 8004140:	3b01      	subs	r3, #1
 8004142:	b29a      	uxth	r2, r3
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004148:	e056      	b.n	80041f8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	f003 0302 	and.w	r3, r3, #2
 8004154:	2b02      	cmp	r3, #2
 8004156:	d11b      	bne.n	8004190 <HAL_SPI_TransmitReceive+0x1aa>
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800415c:	b29b      	uxth	r3, r3
 800415e:	2b00      	cmp	r3, #0
 8004160:	d016      	beq.n	8004190 <HAL_SPI_TransmitReceive+0x1aa>
 8004162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004164:	2b01      	cmp	r3, #1
 8004166:	d113      	bne.n	8004190 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800416c:	881a      	ldrh	r2, [r3, #0]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004178:	1c9a      	adds	r2, r3, #2
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004182:	b29b      	uxth	r3, r3
 8004184:	3b01      	subs	r3, #1
 8004186:	b29a      	uxth	r2, r3
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800418c:	2300      	movs	r3, #0
 800418e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	f003 0301 	and.w	r3, r3, #1
 800419a:	2b01      	cmp	r3, #1
 800419c:	d11c      	bne.n	80041d8 <HAL_SPI_TransmitReceive+0x1f2>
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80041a4:	b29b      	uxth	r3, r3
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d016      	beq.n	80041d8 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	68da      	ldr	r2, [r3, #12]
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b4:	b292      	uxth	r2, r2
 80041b6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041bc:	1c9a      	adds	r2, r3, #2
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	3b01      	subs	r3, #1
 80041cc:	b29a      	uxth	r2, r3
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80041d4:	2301      	movs	r3, #1
 80041d6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80041d8:	f7fc fed4 	bl	8000f84 <HAL_GetTick>
 80041dc:	4602      	mov	r2, r0
 80041de:	69fb      	ldr	r3, [r7, #28]
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d807      	bhi.n	80041f8 <HAL_SPI_TransmitReceive+0x212>
 80041e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ee:	d003      	beq.n	80041f8 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80041f0:	2303      	movs	r3, #3
 80041f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80041f6:	e0fb      	b.n	80043f0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041fc:	b29b      	uxth	r3, r3
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d1a3      	bne.n	800414a <HAL_SPI_TransmitReceive+0x164>
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004208:	b29b      	uxth	r3, r3
 800420a:	2b00      	cmp	r3, #0
 800420c:	d19d      	bne.n	800414a <HAL_SPI_TransmitReceive+0x164>
 800420e:	e0df      	b.n	80043d0 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d003      	beq.n	8004220 <HAL_SPI_TransmitReceive+0x23a>
 8004218:	8a7b      	ldrh	r3, [r7, #18]
 800421a:	2b01      	cmp	r3, #1
 800421c:	f040 80cb 	bne.w	80043b6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004224:	b29b      	uxth	r3, r3
 8004226:	2b01      	cmp	r3, #1
 8004228:	d912      	bls.n	8004250 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800422e:	881a      	ldrh	r2, [r3, #0]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800423a:	1c9a      	adds	r2, r3, #2
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004244:	b29b      	uxth	r3, r3
 8004246:	3b02      	subs	r3, #2
 8004248:	b29a      	uxth	r2, r3
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800424e:	e0b2      	b.n	80043b6 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	330c      	adds	r3, #12
 800425a:	7812      	ldrb	r2, [r2, #0]
 800425c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004262:	1c5a      	adds	r2, r3, #1
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800426c:	b29b      	uxth	r3, r3
 800426e:	3b01      	subs	r3, #1
 8004270:	b29a      	uxth	r2, r3
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004276:	e09e      	b.n	80043b6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	f003 0302 	and.w	r3, r3, #2
 8004282:	2b02      	cmp	r3, #2
 8004284:	d134      	bne.n	80042f0 <HAL_SPI_TransmitReceive+0x30a>
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800428a:	b29b      	uxth	r3, r3
 800428c:	2b00      	cmp	r3, #0
 800428e:	d02f      	beq.n	80042f0 <HAL_SPI_TransmitReceive+0x30a>
 8004290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004292:	2b01      	cmp	r3, #1
 8004294:	d12c      	bne.n	80042f0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800429a:	b29b      	uxth	r3, r3
 800429c:	2b01      	cmp	r3, #1
 800429e:	d912      	bls.n	80042c6 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042a4:	881a      	ldrh	r2, [r3, #0]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042b0:	1c9a      	adds	r2, r3, #2
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	3b02      	subs	r3, #2
 80042be:	b29a      	uxth	r2, r3
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80042c4:	e012      	b.n	80042ec <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	330c      	adds	r3, #12
 80042d0:	7812      	ldrb	r2, [r2, #0]
 80042d2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042d8:	1c5a      	adds	r2, r3, #1
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	3b01      	subs	r3, #1
 80042e6:	b29a      	uxth	r2, r3
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80042ec:	2300      	movs	r3, #0
 80042ee:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	f003 0301 	and.w	r3, r3, #1
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d148      	bne.n	8004390 <HAL_SPI_TransmitReceive+0x3aa>
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004304:	b29b      	uxth	r3, r3
 8004306:	2b00      	cmp	r3, #0
 8004308:	d042      	beq.n	8004390 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004310:	b29b      	uxth	r3, r3
 8004312:	2b01      	cmp	r3, #1
 8004314:	d923      	bls.n	800435e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	68da      	ldr	r2, [r3, #12]
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004320:	b292      	uxth	r2, r2
 8004322:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004328:	1c9a      	adds	r2, r3, #2
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004334:	b29b      	uxth	r3, r3
 8004336:	3b02      	subs	r3, #2
 8004338:	b29a      	uxth	r2, r3
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004346:	b29b      	uxth	r3, r3
 8004348:	2b01      	cmp	r3, #1
 800434a:	d81f      	bhi.n	800438c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	685a      	ldr	r2, [r3, #4]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800435a:	605a      	str	r2, [r3, #4]
 800435c:	e016      	b.n	800438c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f103 020c 	add.w	r2, r3, #12
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436a:	7812      	ldrb	r2, [r2, #0]
 800436c:	b2d2      	uxtb	r2, r2
 800436e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004374:	1c5a      	adds	r2, r3, #1
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004380:	b29b      	uxth	r3, r3
 8004382:	3b01      	subs	r3, #1
 8004384:	b29a      	uxth	r2, r3
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800438c:	2301      	movs	r3, #1
 800438e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004390:	f7fc fdf8 	bl	8000f84 <HAL_GetTick>
 8004394:	4602      	mov	r2, r0
 8004396:	69fb      	ldr	r3, [r7, #28]
 8004398:	1ad3      	subs	r3, r2, r3
 800439a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800439c:	429a      	cmp	r2, r3
 800439e:	d803      	bhi.n	80043a8 <HAL_SPI_TransmitReceive+0x3c2>
 80043a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043a6:	d102      	bne.n	80043ae <HAL_SPI_TransmitReceive+0x3c8>
 80043a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d103      	bne.n	80043b6 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80043ae:	2303      	movs	r3, #3
 80043b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80043b4:	e01c      	b.n	80043f0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	2b00      	cmp	r3, #0
 80043be:	f47f af5b 	bne.w	8004278 <HAL_SPI_TransmitReceive+0x292>
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80043c8:	b29b      	uxth	r3, r3
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	f47f af54 	bne.w	8004278 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80043d0:	69fa      	ldr	r2, [r7, #28]
 80043d2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80043d4:	68f8      	ldr	r0, [r7, #12]
 80043d6:	f000 f933 	bl	8004640 <SPI_EndRxTxTransaction>
 80043da:	4603      	mov	r3, r0
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d006      	beq.n	80043ee <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2220      	movs	r2, #32
 80043ea:	661a      	str	r2, [r3, #96]	; 0x60
 80043ec:	e000      	b.n	80043f0 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80043ee:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2201      	movs	r2, #1
 80043f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2200      	movs	r2, #0
 80043fc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004400:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004404:	4618      	mov	r0, r3
 8004406:	3728      	adds	r7, #40	; 0x28
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}

0800440c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b088      	sub	sp, #32
 8004410:	af00      	add	r7, sp, #0
 8004412:	60f8      	str	r0, [r7, #12]
 8004414:	60b9      	str	r1, [r7, #8]
 8004416:	603b      	str	r3, [r7, #0]
 8004418:	4613      	mov	r3, r2
 800441a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800441c:	f7fc fdb2 	bl	8000f84 <HAL_GetTick>
 8004420:	4602      	mov	r2, r0
 8004422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004424:	1a9b      	subs	r3, r3, r2
 8004426:	683a      	ldr	r2, [r7, #0]
 8004428:	4413      	add	r3, r2
 800442a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800442c:	f7fc fdaa 	bl	8000f84 <HAL_GetTick>
 8004430:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004432:	4b39      	ldr	r3, [pc, #228]	; (8004518 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	015b      	lsls	r3, r3, #5
 8004438:	0d1b      	lsrs	r3, r3, #20
 800443a:	69fa      	ldr	r2, [r7, #28]
 800443c:	fb02 f303 	mul.w	r3, r2, r3
 8004440:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004442:	e054      	b.n	80044ee <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800444a:	d050      	beq.n	80044ee <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800444c:	f7fc fd9a 	bl	8000f84 <HAL_GetTick>
 8004450:	4602      	mov	r2, r0
 8004452:	69bb      	ldr	r3, [r7, #24]
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	69fa      	ldr	r2, [r7, #28]
 8004458:	429a      	cmp	r2, r3
 800445a:	d902      	bls.n	8004462 <SPI_WaitFlagStateUntilTimeout+0x56>
 800445c:	69fb      	ldr	r3, [r7, #28]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d13d      	bne.n	80044de <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	685a      	ldr	r2, [r3, #4]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004470:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800447a:	d111      	bne.n	80044a0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004484:	d004      	beq.n	8004490 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800448e:	d107      	bne.n	80044a0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800449e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044a8:	d10f      	bne.n	80044ca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80044b8:	601a      	str	r2, [r3, #0]
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80044c8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2201      	movs	r2, #1
 80044ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2200      	movs	r2, #0
 80044d6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80044da:	2303      	movs	r3, #3
 80044dc:	e017      	b.n	800450e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d101      	bne.n	80044e8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80044e4:	2300      	movs	r3, #0
 80044e6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	3b01      	subs	r3, #1
 80044ec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	689a      	ldr	r2, [r3, #8]
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	4013      	ands	r3, r2
 80044f8:	68ba      	ldr	r2, [r7, #8]
 80044fa:	429a      	cmp	r2, r3
 80044fc:	bf0c      	ite	eq
 80044fe:	2301      	moveq	r3, #1
 8004500:	2300      	movne	r3, #0
 8004502:	b2db      	uxtb	r3, r3
 8004504:	461a      	mov	r2, r3
 8004506:	79fb      	ldrb	r3, [r7, #7]
 8004508:	429a      	cmp	r2, r3
 800450a:	d19b      	bne.n	8004444 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800450c:	2300      	movs	r3, #0
}
 800450e:	4618      	mov	r0, r3
 8004510:	3720      	adds	r7, #32
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}
 8004516:	bf00      	nop
 8004518:	20000000 	.word	0x20000000

0800451c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b088      	sub	sp, #32
 8004520:	af00      	add	r7, sp, #0
 8004522:	60f8      	str	r0, [r7, #12]
 8004524:	60b9      	str	r1, [r7, #8]
 8004526:	607a      	str	r2, [r7, #4]
 8004528:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800452a:	f7fc fd2b 	bl	8000f84 <HAL_GetTick>
 800452e:	4602      	mov	r2, r0
 8004530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004532:	1a9b      	subs	r3, r3, r2
 8004534:	683a      	ldr	r2, [r7, #0]
 8004536:	4413      	add	r3, r2
 8004538:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800453a:	f7fc fd23 	bl	8000f84 <HAL_GetTick>
 800453e:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004540:	4b3e      	ldr	r3, [pc, #248]	; (800463c <SPI_WaitFifoStateUntilTimeout+0x120>)
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	4613      	mov	r3, r2
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	4413      	add	r3, r2
 800454a:	00da      	lsls	r2, r3, #3
 800454c:	1ad3      	subs	r3, r2, r3
 800454e:	0d1b      	lsrs	r3, r3, #20
 8004550:	69fa      	ldr	r2, [r7, #28]
 8004552:	fb02 f303 	mul.w	r3, r2, r3
 8004556:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 8004558:	e062      	b.n	8004620 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004560:	d109      	bne.n	8004576 <SPI_WaitFifoStateUntilTimeout+0x5a>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d106      	bne.n	8004576 <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	330c      	adds	r3, #12
 800456e:	781b      	ldrb	r3, [r3, #0]
 8004570:	b2db      	uxtb	r3, r3
 8004572:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8004574:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800457c:	d050      	beq.n	8004620 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800457e:	f7fc fd01 	bl	8000f84 <HAL_GetTick>
 8004582:	4602      	mov	r2, r0
 8004584:	69bb      	ldr	r3, [r7, #24]
 8004586:	1ad3      	subs	r3, r2, r3
 8004588:	69fa      	ldr	r2, [r7, #28]
 800458a:	429a      	cmp	r2, r3
 800458c:	d902      	bls.n	8004594 <SPI_WaitFifoStateUntilTimeout+0x78>
 800458e:	69fb      	ldr	r3, [r7, #28]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d13d      	bne.n	8004610 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	685a      	ldr	r2, [r3, #4]
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80045a2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045ac:	d111      	bne.n	80045d2 <SPI_WaitFifoStateUntilTimeout+0xb6>
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045b6:	d004      	beq.n	80045c2 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045c0:	d107      	bne.n	80045d2 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045d0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045da:	d10f      	bne.n	80045fc <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80045ea:	601a      	str	r2, [r3, #0]
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80045fa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2201      	movs	r2, #1
 8004600:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2200      	movs	r2, #0
 8004608:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800460c:	2303      	movs	r3, #3
 800460e:	e010      	b.n	8004632 <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d101      	bne.n	800461a <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 8004616:	2300      	movs	r3, #0
 8004618:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	3b01      	subs	r3, #1
 800461e:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	689a      	ldr	r2, [r3, #8]
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	4013      	ands	r3, r2
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	429a      	cmp	r2, r3
 800462e:	d194      	bne.n	800455a <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8004630:	2300      	movs	r3, #0
}
 8004632:	4618      	mov	r0, r3
 8004634:	3720      	adds	r7, #32
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}
 800463a:	bf00      	nop
 800463c:	20000000 	.word	0x20000000

08004640 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b086      	sub	sp, #24
 8004644:	af02      	add	r7, sp, #8
 8004646:	60f8      	str	r0, [r7, #12]
 8004648:	60b9      	str	r1, [r7, #8]
 800464a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	9300      	str	r3, [sp, #0]
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	2200      	movs	r2, #0
 8004654:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004658:	68f8      	ldr	r0, [r7, #12]
 800465a:	f7ff ff5f 	bl	800451c <SPI_WaitFifoStateUntilTimeout>
 800465e:	4603      	mov	r3, r0
 8004660:	2b00      	cmp	r3, #0
 8004662:	d007      	beq.n	8004674 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004668:	f043 0220 	orr.w	r2, r3, #32
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004670:	2303      	movs	r3, #3
 8004672:	e027      	b.n	80046c4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	9300      	str	r3, [sp, #0]
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	2200      	movs	r2, #0
 800467c:	2180      	movs	r1, #128	; 0x80
 800467e:	68f8      	ldr	r0, [r7, #12]
 8004680:	f7ff fec4 	bl	800440c <SPI_WaitFlagStateUntilTimeout>
 8004684:	4603      	mov	r3, r0
 8004686:	2b00      	cmp	r3, #0
 8004688:	d007      	beq.n	800469a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800468e:	f043 0220 	orr.w	r2, r3, #32
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004696:	2303      	movs	r3, #3
 8004698:	e014      	b.n	80046c4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	9300      	str	r3, [sp, #0]
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	2200      	movs	r2, #0
 80046a2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80046a6:	68f8      	ldr	r0, [r7, #12]
 80046a8:	f7ff ff38 	bl	800451c <SPI_WaitFifoStateUntilTimeout>
 80046ac:	4603      	mov	r3, r0
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d007      	beq.n	80046c2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046b6:	f043 0220 	orr.w	r2, r3, #32
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80046be:	2303      	movs	r3, #3
 80046c0:	e000      	b.n	80046c4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80046c2:	2300      	movs	r3, #0
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	3710      	adds	r7, #16
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}

080046cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b082      	sub	sp, #8
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d101      	bne.n	80046de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	e040      	b.n	8004760 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d106      	bne.n	80046f4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2200      	movs	r2, #0
 80046ea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f7fc fb0a 	bl	8000d08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2224      	movs	r2, #36	; 0x24
 80046f8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f022 0201 	bic.w	r2, r2, #1
 8004708:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f000 f82c 	bl	8004768 <UART_SetConfig>
 8004710:	4603      	mov	r3, r0
 8004712:	2b01      	cmp	r3, #1
 8004714:	d101      	bne.n	800471a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	e022      	b.n	8004760 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800471e:	2b00      	cmp	r3, #0
 8004720:	d002      	beq.n	8004728 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f000 fa82 	bl	8004c2c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	685a      	ldr	r2, [r3, #4]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004736:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	689a      	ldr	r2, [r3, #8]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004746:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f042 0201 	orr.w	r2, r2, #1
 8004756:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	f000 fb09 	bl	8004d70 <UART_CheckIdleState>
 800475e:	4603      	mov	r3, r0
}
 8004760:	4618      	mov	r0, r3
 8004762:	3708      	adds	r7, #8
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}

08004768 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b088      	sub	sp, #32
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004770:	2300      	movs	r3, #0
 8004772:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	689a      	ldr	r2, [r3, #8]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	691b      	ldr	r3, [r3, #16]
 800477c:	431a      	orrs	r2, r3
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	695b      	ldr	r3, [r3, #20]
 8004782:	431a      	orrs	r2, r3
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	69db      	ldr	r3, [r3, #28]
 8004788:	4313      	orrs	r3, r2
 800478a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	4ba7      	ldr	r3, [pc, #668]	; (8004a30 <UART_SetConfig+0x2c8>)
 8004794:	4013      	ands	r3, r2
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	6812      	ldr	r2, [r2, #0]
 800479a:	6979      	ldr	r1, [r7, #20]
 800479c:	430b      	orrs	r3, r1
 800479e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	68da      	ldr	r2, [r3, #12]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	430a      	orrs	r2, r1
 80047b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	699b      	ldr	r3, [r3, #24]
 80047ba:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6a1b      	ldr	r3, [r3, #32]
 80047c0:	697a      	ldr	r2, [r7, #20]
 80047c2:	4313      	orrs	r3, r2
 80047c4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	697a      	ldr	r2, [r7, #20]
 80047d6:	430a      	orrs	r2, r1
 80047d8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a95      	ldr	r2, [pc, #596]	; (8004a34 <UART_SetConfig+0x2cc>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d120      	bne.n	8004826 <UART_SetConfig+0xbe>
 80047e4:	4b94      	ldr	r3, [pc, #592]	; (8004a38 <UART_SetConfig+0x2d0>)
 80047e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ea:	f003 0303 	and.w	r3, r3, #3
 80047ee:	2b03      	cmp	r3, #3
 80047f0:	d816      	bhi.n	8004820 <UART_SetConfig+0xb8>
 80047f2:	a201      	add	r2, pc, #4	; (adr r2, 80047f8 <UART_SetConfig+0x90>)
 80047f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047f8:	08004809 	.word	0x08004809
 80047fc:	08004815 	.word	0x08004815
 8004800:	0800480f 	.word	0x0800480f
 8004804:	0800481b 	.word	0x0800481b
 8004808:	2301      	movs	r3, #1
 800480a:	77fb      	strb	r3, [r7, #31]
 800480c:	e14f      	b.n	8004aae <UART_SetConfig+0x346>
 800480e:	2302      	movs	r3, #2
 8004810:	77fb      	strb	r3, [r7, #31]
 8004812:	e14c      	b.n	8004aae <UART_SetConfig+0x346>
 8004814:	2304      	movs	r3, #4
 8004816:	77fb      	strb	r3, [r7, #31]
 8004818:	e149      	b.n	8004aae <UART_SetConfig+0x346>
 800481a:	2308      	movs	r3, #8
 800481c:	77fb      	strb	r3, [r7, #31]
 800481e:	e146      	b.n	8004aae <UART_SetConfig+0x346>
 8004820:	2310      	movs	r3, #16
 8004822:	77fb      	strb	r3, [r7, #31]
 8004824:	e143      	b.n	8004aae <UART_SetConfig+0x346>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a84      	ldr	r2, [pc, #528]	; (8004a3c <UART_SetConfig+0x2d4>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d132      	bne.n	8004896 <UART_SetConfig+0x12e>
 8004830:	4b81      	ldr	r3, [pc, #516]	; (8004a38 <UART_SetConfig+0x2d0>)
 8004832:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004836:	f003 030c 	and.w	r3, r3, #12
 800483a:	2b0c      	cmp	r3, #12
 800483c:	d828      	bhi.n	8004890 <UART_SetConfig+0x128>
 800483e:	a201      	add	r2, pc, #4	; (adr r2, 8004844 <UART_SetConfig+0xdc>)
 8004840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004844:	08004879 	.word	0x08004879
 8004848:	08004891 	.word	0x08004891
 800484c:	08004891 	.word	0x08004891
 8004850:	08004891 	.word	0x08004891
 8004854:	08004885 	.word	0x08004885
 8004858:	08004891 	.word	0x08004891
 800485c:	08004891 	.word	0x08004891
 8004860:	08004891 	.word	0x08004891
 8004864:	0800487f 	.word	0x0800487f
 8004868:	08004891 	.word	0x08004891
 800486c:	08004891 	.word	0x08004891
 8004870:	08004891 	.word	0x08004891
 8004874:	0800488b 	.word	0x0800488b
 8004878:	2300      	movs	r3, #0
 800487a:	77fb      	strb	r3, [r7, #31]
 800487c:	e117      	b.n	8004aae <UART_SetConfig+0x346>
 800487e:	2302      	movs	r3, #2
 8004880:	77fb      	strb	r3, [r7, #31]
 8004882:	e114      	b.n	8004aae <UART_SetConfig+0x346>
 8004884:	2304      	movs	r3, #4
 8004886:	77fb      	strb	r3, [r7, #31]
 8004888:	e111      	b.n	8004aae <UART_SetConfig+0x346>
 800488a:	2308      	movs	r3, #8
 800488c:	77fb      	strb	r3, [r7, #31]
 800488e:	e10e      	b.n	8004aae <UART_SetConfig+0x346>
 8004890:	2310      	movs	r3, #16
 8004892:	77fb      	strb	r3, [r7, #31]
 8004894:	e10b      	b.n	8004aae <UART_SetConfig+0x346>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a69      	ldr	r2, [pc, #420]	; (8004a40 <UART_SetConfig+0x2d8>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d120      	bne.n	80048e2 <UART_SetConfig+0x17a>
 80048a0:	4b65      	ldr	r3, [pc, #404]	; (8004a38 <UART_SetConfig+0x2d0>)
 80048a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048a6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80048aa:	2b30      	cmp	r3, #48	; 0x30
 80048ac:	d013      	beq.n	80048d6 <UART_SetConfig+0x16e>
 80048ae:	2b30      	cmp	r3, #48	; 0x30
 80048b0:	d814      	bhi.n	80048dc <UART_SetConfig+0x174>
 80048b2:	2b20      	cmp	r3, #32
 80048b4:	d009      	beq.n	80048ca <UART_SetConfig+0x162>
 80048b6:	2b20      	cmp	r3, #32
 80048b8:	d810      	bhi.n	80048dc <UART_SetConfig+0x174>
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d002      	beq.n	80048c4 <UART_SetConfig+0x15c>
 80048be:	2b10      	cmp	r3, #16
 80048c0:	d006      	beq.n	80048d0 <UART_SetConfig+0x168>
 80048c2:	e00b      	b.n	80048dc <UART_SetConfig+0x174>
 80048c4:	2300      	movs	r3, #0
 80048c6:	77fb      	strb	r3, [r7, #31]
 80048c8:	e0f1      	b.n	8004aae <UART_SetConfig+0x346>
 80048ca:	2302      	movs	r3, #2
 80048cc:	77fb      	strb	r3, [r7, #31]
 80048ce:	e0ee      	b.n	8004aae <UART_SetConfig+0x346>
 80048d0:	2304      	movs	r3, #4
 80048d2:	77fb      	strb	r3, [r7, #31]
 80048d4:	e0eb      	b.n	8004aae <UART_SetConfig+0x346>
 80048d6:	2308      	movs	r3, #8
 80048d8:	77fb      	strb	r3, [r7, #31]
 80048da:	e0e8      	b.n	8004aae <UART_SetConfig+0x346>
 80048dc:	2310      	movs	r3, #16
 80048de:	77fb      	strb	r3, [r7, #31]
 80048e0:	e0e5      	b.n	8004aae <UART_SetConfig+0x346>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a57      	ldr	r2, [pc, #348]	; (8004a44 <UART_SetConfig+0x2dc>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d120      	bne.n	800492e <UART_SetConfig+0x1c6>
 80048ec:	4b52      	ldr	r3, [pc, #328]	; (8004a38 <UART_SetConfig+0x2d0>)
 80048ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048f2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80048f6:	2bc0      	cmp	r3, #192	; 0xc0
 80048f8:	d013      	beq.n	8004922 <UART_SetConfig+0x1ba>
 80048fa:	2bc0      	cmp	r3, #192	; 0xc0
 80048fc:	d814      	bhi.n	8004928 <UART_SetConfig+0x1c0>
 80048fe:	2b80      	cmp	r3, #128	; 0x80
 8004900:	d009      	beq.n	8004916 <UART_SetConfig+0x1ae>
 8004902:	2b80      	cmp	r3, #128	; 0x80
 8004904:	d810      	bhi.n	8004928 <UART_SetConfig+0x1c0>
 8004906:	2b00      	cmp	r3, #0
 8004908:	d002      	beq.n	8004910 <UART_SetConfig+0x1a8>
 800490a:	2b40      	cmp	r3, #64	; 0x40
 800490c:	d006      	beq.n	800491c <UART_SetConfig+0x1b4>
 800490e:	e00b      	b.n	8004928 <UART_SetConfig+0x1c0>
 8004910:	2300      	movs	r3, #0
 8004912:	77fb      	strb	r3, [r7, #31]
 8004914:	e0cb      	b.n	8004aae <UART_SetConfig+0x346>
 8004916:	2302      	movs	r3, #2
 8004918:	77fb      	strb	r3, [r7, #31]
 800491a:	e0c8      	b.n	8004aae <UART_SetConfig+0x346>
 800491c:	2304      	movs	r3, #4
 800491e:	77fb      	strb	r3, [r7, #31]
 8004920:	e0c5      	b.n	8004aae <UART_SetConfig+0x346>
 8004922:	2308      	movs	r3, #8
 8004924:	77fb      	strb	r3, [r7, #31]
 8004926:	e0c2      	b.n	8004aae <UART_SetConfig+0x346>
 8004928:	2310      	movs	r3, #16
 800492a:	77fb      	strb	r3, [r7, #31]
 800492c:	e0bf      	b.n	8004aae <UART_SetConfig+0x346>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a45      	ldr	r2, [pc, #276]	; (8004a48 <UART_SetConfig+0x2e0>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d125      	bne.n	8004984 <UART_SetConfig+0x21c>
 8004938:	4b3f      	ldr	r3, [pc, #252]	; (8004a38 <UART_SetConfig+0x2d0>)
 800493a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800493e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004942:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004946:	d017      	beq.n	8004978 <UART_SetConfig+0x210>
 8004948:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800494c:	d817      	bhi.n	800497e <UART_SetConfig+0x216>
 800494e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004952:	d00b      	beq.n	800496c <UART_SetConfig+0x204>
 8004954:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004958:	d811      	bhi.n	800497e <UART_SetConfig+0x216>
 800495a:	2b00      	cmp	r3, #0
 800495c:	d003      	beq.n	8004966 <UART_SetConfig+0x1fe>
 800495e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004962:	d006      	beq.n	8004972 <UART_SetConfig+0x20a>
 8004964:	e00b      	b.n	800497e <UART_SetConfig+0x216>
 8004966:	2300      	movs	r3, #0
 8004968:	77fb      	strb	r3, [r7, #31]
 800496a:	e0a0      	b.n	8004aae <UART_SetConfig+0x346>
 800496c:	2302      	movs	r3, #2
 800496e:	77fb      	strb	r3, [r7, #31]
 8004970:	e09d      	b.n	8004aae <UART_SetConfig+0x346>
 8004972:	2304      	movs	r3, #4
 8004974:	77fb      	strb	r3, [r7, #31]
 8004976:	e09a      	b.n	8004aae <UART_SetConfig+0x346>
 8004978:	2308      	movs	r3, #8
 800497a:	77fb      	strb	r3, [r7, #31]
 800497c:	e097      	b.n	8004aae <UART_SetConfig+0x346>
 800497e:	2310      	movs	r3, #16
 8004980:	77fb      	strb	r3, [r7, #31]
 8004982:	e094      	b.n	8004aae <UART_SetConfig+0x346>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a30      	ldr	r2, [pc, #192]	; (8004a4c <UART_SetConfig+0x2e4>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d125      	bne.n	80049da <UART_SetConfig+0x272>
 800498e:	4b2a      	ldr	r3, [pc, #168]	; (8004a38 <UART_SetConfig+0x2d0>)
 8004990:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004994:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004998:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800499c:	d017      	beq.n	80049ce <UART_SetConfig+0x266>
 800499e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80049a2:	d817      	bhi.n	80049d4 <UART_SetConfig+0x26c>
 80049a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049a8:	d00b      	beq.n	80049c2 <UART_SetConfig+0x25a>
 80049aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049ae:	d811      	bhi.n	80049d4 <UART_SetConfig+0x26c>
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d003      	beq.n	80049bc <UART_SetConfig+0x254>
 80049b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049b8:	d006      	beq.n	80049c8 <UART_SetConfig+0x260>
 80049ba:	e00b      	b.n	80049d4 <UART_SetConfig+0x26c>
 80049bc:	2301      	movs	r3, #1
 80049be:	77fb      	strb	r3, [r7, #31]
 80049c0:	e075      	b.n	8004aae <UART_SetConfig+0x346>
 80049c2:	2302      	movs	r3, #2
 80049c4:	77fb      	strb	r3, [r7, #31]
 80049c6:	e072      	b.n	8004aae <UART_SetConfig+0x346>
 80049c8:	2304      	movs	r3, #4
 80049ca:	77fb      	strb	r3, [r7, #31]
 80049cc:	e06f      	b.n	8004aae <UART_SetConfig+0x346>
 80049ce:	2308      	movs	r3, #8
 80049d0:	77fb      	strb	r3, [r7, #31]
 80049d2:	e06c      	b.n	8004aae <UART_SetConfig+0x346>
 80049d4:	2310      	movs	r3, #16
 80049d6:	77fb      	strb	r3, [r7, #31]
 80049d8:	e069      	b.n	8004aae <UART_SetConfig+0x346>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a1c      	ldr	r2, [pc, #112]	; (8004a50 <UART_SetConfig+0x2e8>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d137      	bne.n	8004a54 <UART_SetConfig+0x2ec>
 80049e4:	4b14      	ldr	r3, [pc, #80]	; (8004a38 <UART_SetConfig+0x2d0>)
 80049e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049ea:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80049ee:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80049f2:	d017      	beq.n	8004a24 <UART_SetConfig+0x2bc>
 80049f4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80049f8:	d817      	bhi.n	8004a2a <UART_SetConfig+0x2c2>
 80049fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049fe:	d00b      	beq.n	8004a18 <UART_SetConfig+0x2b0>
 8004a00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a04:	d811      	bhi.n	8004a2a <UART_SetConfig+0x2c2>
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d003      	beq.n	8004a12 <UART_SetConfig+0x2aa>
 8004a0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a0e:	d006      	beq.n	8004a1e <UART_SetConfig+0x2b6>
 8004a10:	e00b      	b.n	8004a2a <UART_SetConfig+0x2c2>
 8004a12:	2300      	movs	r3, #0
 8004a14:	77fb      	strb	r3, [r7, #31]
 8004a16:	e04a      	b.n	8004aae <UART_SetConfig+0x346>
 8004a18:	2302      	movs	r3, #2
 8004a1a:	77fb      	strb	r3, [r7, #31]
 8004a1c:	e047      	b.n	8004aae <UART_SetConfig+0x346>
 8004a1e:	2304      	movs	r3, #4
 8004a20:	77fb      	strb	r3, [r7, #31]
 8004a22:	e044      	b.n	8004aae <UART_SetConfig+0x346>
 8004a24:	2308      	movs	r3, #8
 8004a26:	77fb      	strb	r3, [r7, #31]
 8004a28:	e041      	b.n	8004aae <UART_SetConfig+0x346>
 8004a2a:	2310      	movs	r3, #16
 8004a2c:	77fb      	strb	r3, [r7, #31]
 8004a2e:	e03e      	b.n	8004aae <UART_SetConfig+0x346>
 8004a30:	efff69f3 	.word	0xefff69f3
 8004a34:	40011000 	.word	0x40011000
 8004a38:	40023800 	.word	0x40023800
 8004a3c:	40004400 	.word	0x40004400
 8004a40:	40004800 	.word	0x40004800
 8004a44:	40004c00 	.word	0x40004c00
 8004a48:	40005000 	.word	0x40005000
 8004a4c:	40011400 	.word	0x40011400
 8004a50:	40007800 	.word	0x40007800
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a71      	ldr	r2, [pc, #452]	; (8004c20 <UART_SetConfig+0x4b8>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d125      	bne.n	8004aaa <UART_SetConfig+0x342>
 8004a5e:	4b71      	ldr	r3, [pc, #452]	; (8004c24 <UART_SetConfig+0x4bc>)
 8004a60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a64:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004a68:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004a6c:	d017      	beq.n	8004a9e <UART_SetConfig+0x336>
 8004a6e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004a72:	d817      	bhi.n	8004aa4 <UART_SetConfig+0x33c>
 8004a74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a78:	d00b      	beq.n	8004a92 <UART_SetConfig+0x32a>
 8004a7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a7e:	d811      	bhi.n	8004aa4 <UART_SetConfig+0x33c>
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d003      	beq.n	8004a8c <UART_SetConfig+0x324>
 8004a84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a88:	d006      	beq.n	8004a98 <UART_SetConfig+0x330>
 8004a8a:	e00b      	b.n	8004aa4 <UART_SetConfig+0x33c>
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	77fb      	strb	r3, [r7, #31]
 8004a90:	e00d      	b.n	8004aae <UART_SetConfig+0x346>
 8004a92:	2302      	movs	r3, #2
 8004a94:	77fb      	strb	r3, [r7, #31]
 8004a96:	e00a      	b.n	8004aae <UART_SetConfig+0x346>
 8004a98:	2304      	movs	r3, #4
 8004a9a:	77fb      	strb	r3, [r7, #31]
 8004a9c:	e007      	b.n	8004aae <UART_SetConfig+0x346>
 8004a9e:	2308      	movs	r3, #8
 8004aa0:	77fb      	strb	r3, [r7, #31]
 8004aa2:	e004      	b.n	8004aae <UART_SetConfig+0x346>
 8004aa4:	2310      	movs	r3, #16
 8004aa6:	77fb      	strb	r3, [r7, #31]
 8004aa8:	e001      	b.n	8004aae <UART_SetConfig+0x346>
 8004aaa:	2310      	movs	r3, #16
 8004aac:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	69db      	ldr	r3, [r3, #28]
 8004ab2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ab6:	d15b      	bne.n	8004b70 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8004ab8:	7ffb      	ldrb	r3, [r7, #31]
 8004aba:	2b08      	cmp	r3, #8
 8004abc:	d827      	bhi.n	8004b0e <UART_SetConfig+0x3a6>
 8004abe:	a201      	add	r2, pc, #4	; (adr r2, 8004ac4 <UART_SetConfig+0x35c>)
 8004ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ac4:	08004ae9 	.word	0x08004ae9
 8004ac8:	08004af1 	.word	0x08004af1
 8004acc:	08004af9 	.word	0x08004af9
 8004ad0:	08004b0f 	.word	0x08004b0f
 8004ad4:	08004aff 	.word	0x08004aff
 8004ad8:	08004b0f 	.word	0x08004b0f
 8004adc:	08004b0f 	.word	0x08004b0f
 8004ae0:	08004b0f 	.word	0x08004b0f
 8004ae4:	08004b07 	.word	0x08004b07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ae8:	f7fe fc14 	bl	8003314 <HAL_RCC_GetPCLK1Freq>
 8004aec:	61b8      	str	r0, [r7, #24]
        break;
 8004aee:	e013      	b.n	8004b18 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004af0:	f7fe fc24 	bl	800333c <HAL_RCC_GetPCLK2Freq>
 8004af4:	61b8      	str	r0, [r7, #24]
        break;
 8004af6:	e00f      	b.n	8004b18 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004af8:	4b4b      	ldr	r3, [pc, #300]	; (8004c28 <UART_SetConfig+0x4c0>)
 8004afa:	61bb      	str	r3, [r7, #24]
        break;
 8004afc:	e00c      	b.n	8004b18 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004afe:	f7fe fb1b 	bl	8003138 <HAL_RCC_GetSysClockFreq>
 8004b02:	61b8      	str	r0, [r7, #24]
        break;
 8004b04:	e008      	b.n	8004b18 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b0a:	61bb      	str	r3, [r7, #24]
        break;
 8004b0c:	e004      	b.n	8004b18 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	77bb      	strb	r3, [r7, #30]
        break;
 8004b16:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004b18:	69bb      	ldr	r3, [r7, #24]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d074      	beq.n	8004c08 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004b1e:	69bb      	ldr	r3, [r7, #24]
 8004b20:	005a      	lsls	r2, r3, #1
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	085b      	lsrs	r3, r3, #1
 8004b28:	441a      	add	r2, r3
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b32:	b29b      	uxth	r3, r3
 8004b34:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	2b0f      	cmp	r3, #15
 8004b3a:	d916      	bls.n	8004b6a <UART_SetConfig+0x402>
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b42:	d212      	bcs.n	8004b6a <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	b29b      	uxth	r3, r3
 8004b48:	f023 030f 	bic.w	r3, r3, #15
 8004b4c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	085b      	lsrs	r3, r3, #1
 8004b52:	b29b      	uxth	r3, r3
 8004b54:	f003 0307 	and.w	r3, r3, #7
 8004b58:	b29a      	uxth	r2, r3
 8004b5a:	89fb      	ldrh	r3, [r7, #14]
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	89fa      	ldrh	r2, [r7, #14]
 8004b66:	60da      	str	r2, [r3, #12]
 8004b68:	e04e      	b.n	8004c08 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	77bb      	strb	r3, [r7, #30]
 8004b6e:	e04b      	b.n	8004c08 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004b70:	7ffb      	ldrb	r3, [r7, #31]
 8004b72:	2b08      	cmp	r3, #8
 8004b74:	d827      	bhi.n	8004bc6 <UART_SetConfig+0x45e>
 8004b76:	a201      	add	r2, pc, #4	; (adr r2, 8004b7c <UART_SetConfig+0x414>)
 8004b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b7c:	08004ba1 	.word	0x08004ba1
 8004b80:	08004ba9 	.word	0x08004ba9
 8004b84:	08004bb1 	.word	0x08004bb1
 8004b88:	08004bc7 	.word	0x08004bc7
 8004b8c:	08004bb7 	.word	0x08004bb7
 8004b90:	08004bc7 	.word	0x08004bc7
 8004b94:	08004bc7 	.word	0x08004bc7
 8004b98:	08004bc7 	.word	0x08004bc7
 8004b9c:	08004bbf 	.word	0x08004bbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ba0:	f7fe fbb8 	bl	8003314 <HAL_RCC_GetPCLK1Freq>
 8004ba4:	61b8      	str	r0, [r7, #24]
        break;
 8004ba6:	e013      	b.n	8004bd0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ba8:	f7fe fbc8 	bl	800333c <HAL_RCC_GetPCLK2Freq>
 8004bac:	61b8      	str	r0, [r7, #24]
        break;
 8004bae:	e00f      	b.n	8004bd0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004bb0:	4b1d      	ldr	r3, [pc, #116]	; (8004c28 <UART_SetConfig+0x4c0>)
 8004bb2:	61bb      	str	r3, [r7, #24]
        break;
 8004bb4:	e00c      	b.n	8004bd0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bb6:	f7fe fabf 	bl	8003138 <HAL_RCC_GetSysClockFreq>
 8004bba:	61b8      	str	r0, [r7, #24]
        break;
 8004bbc:	e008      	b.n	8004bd0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bc2:	61bb      	str	r3, [r7, #24]
        break;
 8004bc4:	e004      	b.n	8004bd0 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	77bb      	strb	r3, [r7, #30]
        break;
 8004bce:	bf00      	nop
    }

    if (pclk != 0U)
 8004bd0:	69bb      	ldr	r3, [r7, #24]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d018      	beq.n	8004c08 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	085a      	lsrs	r2, r3, #1
 8004bdc:	69bb      	ldr	r3, [r7, #24]
 8004bde:	441a      	add	r2, r3
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004be8:	b29b      	uxth	r3, r3
 8004bea:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	2b0f      	cmp	r3, #15
 8004bf0:	d908      	bls.n	8004c04 <UART_SetConfig+0x49c>
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bf8:	d204      	bcs.n	8004c04 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	693a      	ldr	r2, [r7, #16]
 8004c00:	60da      	str	r2, [r3, #12]
 8004c02:	e001      	b.n	8004c08 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2200      	movs	r2, #0
 8004c12:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004c14:	7fbb      	ldrb	r3, [r7, #30]
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3720      	adds	r7, #32
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}
 8004c1e:	bf00      	nop
 8004c20:	40007c00 	.word	0x40007c00
 8004c24:	40023800 	.word	0x40023800
 8004c28:	00f42400 	.word	0x00f42400

08004c2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b083      	sub	sp, #12
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c38:	f003 0301 	and.w	r3, r3, #1
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d00a      	beq.n	8004c56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	430a      	orrs	r2, r1
 8004c54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5a:	f003 0302 	and.w	r3, r3, #2
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d00a      	beq.n	8004c78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	430a      	orrs	r2, r1
 8004c76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c7c:	f003 0304 	and.w	r3, r3, #4
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d00a      	beq.n	8004c9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	430a      	orrs	r2, r1
 8004c98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c9e:	f003 0308 	and.w	r3, r3, #8
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d00a      	beq.n	8004cbc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	430a      	orrs	r2, r1
 8004cba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc0:	f003 0310 	and.w	r3, r3, #16
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d00a      	beq.n	8004cde <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	430a      	orrs	r2, r1
 8004cdc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce2:	f003 0320 	and.w	r3, r3, #32
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d00a      	beq.n	8004d00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	430a      	orrs	r2, r1
 8004cfe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d01a      	beq.n	8004d42 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	430a      	orrs	r2, r1
 8004d20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d2a:	d10a      	bne.n	8004d42 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	430a      	orrs	r2, r1
 8004d40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d00a      	beq.n	8004d64 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	430a      	orrs	r2, r1
 8004d62:	605a      	str	r2, [r3, #4]
  }
}
 8004d64:	bf00      	nop
 8004d66:	370c      	adds	r7, #12
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6e:	4770      	bx	lr

08004d70 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b086      	sub	sp, #24
 8004d74:	af02      	add	r7, sp, #8
 8004d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004d80:	f7fc f900 	bl	8000f84 <HAL_GetTick>
 8004d84:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f003 0308 	and.w	r3, r3, #8
 8004d90:	2b08      	cmp	r3, #8
 8004d92:	d10e      	bne.n	8004db2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d94:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004d98:	9300      	str	r3, [sp, #0]
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f000 f82d 	bl	8004e02 <UART_WaitOnFlagUntilTimeout>
 8004da8:	4603      	mov	r3, r0
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d001      	beq.n	8004db2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004dae:	2303      	movs	r3, #3
 8004db0:	e023      	b.n	8004dfa <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f003 0304 	and.w	r3, r3, #4
 8004dbc:	2b04      	cmp	r3, #4
 8004dbe:	d10e      	bne.n	8004dde <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004dc0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004dc4:	9300      	str	r3, [sp, #0]
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f000 f817 	bl	8004e02 <UART_WaitOnFlagUntilTimeout>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d001      	beq.n	8004dde <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004dda:	2303      	movs	r3, #3
 8004ddc:	e00d      	b.n	8004dfa <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2220      	movs	r2, #32
 8004de2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2220      	movs	r2, #32
 8004de8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2200      	movs	r2, #0
 8004dee:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2200      	movs	r2, #0
 8004df4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004df8:	2300      	movs	r3, #0
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3710      	adds	r7, #16
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}

08004e02 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004e02:	b580      	push	{r7, lr}
 8004e04:	b084      	sub	sp, #16
 8004e06:	af00      	add	r7, sp, #0
 8004e08:	60f8      	str	r0, [r7, #12]
 8004e0a:	60b9      	str	r1, [r7, #8]
 8004e0c:	603b      	str	r3, [r7, #0]
 8004e0e:	4613      	mov	r3, r2
 8004e10:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e12:	e05e      	b.n	8004ed2 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e14:	69bb      	ldr	r3, [r7, #24]
 8004e16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e1a:	d05a      	beq.n	8004ed2 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e1c:	f7fc f8b2 	bl	8000f84 <HAL_GetTick>
 8004e20:	4602      	mov	r2, r0
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	1ad3      	subs	r3, r2, r3
 8004e26:	69ba      	ldr	r2, [r7, #24]
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d302      	bcc.n	8004e32 <UART_WaitOnFlagUntilTimeout+0x30>
 8004e2c:	69bb      	ldr	r3, [r7, #24]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d11b      	bne.n	8004e6a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	681a      	ldr	r2, [r3, #0]
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004e40:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	689a      	ldr	r2, [r3, #8]
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f022 0201 	bic.w	r2, r2, #1
 8004e50:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2220      	movs	r2, #32
 8004e56:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2220      	movs	r2, #32
 8004e5c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2200      	movs	r2, #0
 8004e62:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004e66:	2303      	movs	r3, #3
 8004e68:	e043      	b.n	8004ef2 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f003 0304 	and.w	r3, r3, #4
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d02c      	beq.n	8004ed2 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	69db      	ldr	r3, [r3, #28]
 8004e7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e86:	d124      	bne.n	8004ed2 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e90:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004ea0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	689a      	ldr	r2, [r3, #8]
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f022 0201 	bic.w	r2, r2, #1
 8004eb0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2220      	movs	r2, #32
 8004eb6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2220      	movs	r2, #32
 8004ebc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2220      	movs	r2, #32
 8004ec2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004ece:	2303      	movs	r3, #3
 8004ed0:	e00f      	b.n	8004ef2 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	69da      	ldr	r2, [r3, #28]
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	4013      	ands	r3, r2
 8004edc:	68ba      	ldr	r2, [r7, #8]
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	bf0c      	ite	eq
 8004ee2:	2301      	moveq	r3, #1
 8004ee4:	2300      	movne	r3, #0
 8004ee6:	b2db      	uxtb	r3, r3
 8004ee8:	461a      	mov	r2, r3
 8004eea:	79fb      	ldrb	r3, [r7, #7]
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d091      	beq.n	8004e14 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ef0:	2300      	movs	r3, #0
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3710      	adds	r7, #16
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}
	...

08004efc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004efc:	b084      	sub	sp, #16
 8004efe:	b580      	push	{r7, lr}
 8004f00:	b084      	sub	sp, #16
 8004f02:	af00      	add	r7, sp, #0
 8004f04:	6078      	str	r0, [r7, #4]
 8004f06:	f107 001c 	add.w	r0, r7, #28
 8004f0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	d120      	bne.n	8004f56 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f18:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	68da      	ldr	r2, [r3, #12]
 8004f24:	4b20      	ldr	r3, [pc, #128]	; (8004fa8 <USB_CoreInit+0xac>)
 8004f26:	4013      	ands	r3, r2
 8004f28:	687a      	ldr	r2, [r7, #4]
 8004f2a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	68db      	ldr	r3, [r3, #12]
 8004f30:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004f38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f3a:	2b01      	cmp	r3, #1
 8004f3c:	d105      	bne.n	8004f4a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	68db      	ldr	r3, [r3, #12]
 8004f42:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f001 fad6 	bl	80064fc <USB_CoreReset>
 8004f50:	4603      	mov	r3, r0
 8004f52:	73fb      	strb	r3, [r7, #15]
 8004f54:	e010      	b.n	8004f78 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	68db      	ldr	r3, [r3, #12]
 8004f5a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f001 faca 	bl	80064fc <USB_CoreReset>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f70:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8004f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d10b      	bne.n	8004f96 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	f043 0206 	orr.w	r2, r3, #6
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	f043 0220 	orr.w	r2, r3, #32
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004f96:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3710      	adds	r7, #16
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004fa2:	b004      	add	sp, #16
 8004fa4:	4770      	bx	lr
 8004fa6:	bf00      	nop
 8004fa8:	ffbdffbf 	.word	0xffbdffbf

08004fac <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b087      	sub	sp, #28
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	60f8      	str	r0, [r7, #12]
 8004fb4:	60b9      	str	r1, [r7, #8]
 8004fb6:	4613      	mov	r3, r2
 8004fb8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004fba:	79fb      	ldrb	r3, [r7, #7]
 8004fbc:	2b02      	cmp	r3, #2
 8004fbe:	d165      	bne.n	800508c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	4a41      	ldr	r2, [pc, #260]	; (80050c8 <USB_SetTurnaroundTime+0x11c>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d906      	bls.n	8004fd6 <USB_SetTurnaroundTime+0x2a>
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	4a40      	ldr	r2, [pc, #256]	; (80050cc <USB_SetTurnaroundTime+0x120>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d202      	bcs.n	8004fd6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004fd0:	230f      	movs	r3, #15
 8004fd2:	617b      	str	r3, [r7, #20]
 8004fd4:	e062      	b.n	800509c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	4a3c      	ldr	r2, [pc, #240]	; (80050cc <USB_SetTurnaroundTime+0x120>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d306      	bcc.n	8004fec <USB_SetTurnaroundTime+0x40>
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	4a3b      	ldr	r2, [pc, #236]	; (80050d0 <USB_SetTurnaroundTime+0x124>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d202      	bcs.n	8004fec <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004fe6:	230e      	movs	r3, #14
 8004fe8:	617b      	str	r3, [r7, #20]
 8004fea:	e057      	b.n	800509c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	4a38      	ldr	r2, [pc, #224]	; (80050d0 <USB_SetTurnaroundTime+0x124>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d306      	bcc.n	8005002 <USB_SetTurnaroundTime+0x56>
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	4a37      	ldr	r2, [pc, #220]	; (80050d4 <USB_SetTurnaroundTime+0x128>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d202      	bcs.n	8005002 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004ffc:	230d      	movs	r3, #13
 8004ffe:	617b      	str	r3, [r7, #20]
 8005000:	e04c      	b.n	800509c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	4a33      	ldr	r2, [pc, #204]	; (80050d4 <USB_SetTurnaroundTime+0x128>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d306      	bcc.n	8005018 <USB_SetTurnaroundTime+0x6c>
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	4a32      	ldr	r2, [pc, #200]	; (80050d8 <USB_SetTurnaroundTime+0x12c>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d802      	bhi.n	8005018 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005012:	230c      	movs	r3, #12
 8005014:	617b      	str	r3, [r7, #20]
 8005016:	e041      	b.n	800509c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	4a2f      	ldr	r2, [pc, #188]	; (80050d8 <USB_SetTurnaroundTime+0x12c>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d906      	bls.n	800502e <USB_SetTurnaroundTime+0x82>
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	4a2e      	ldr	r2, [pc, #184]	; (80050dc <USB_SetTurnaroundTime+0x130>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d802      	bhi.n	800502e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005028:	230b      	movs	r3, #11
 800502a:	617b      	str	r3, [r7, #20]
 800502c:	e036      	b.n	800509c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	4a2a      	ldr	r2, [pc, #168]	; (80050dc <USB_SetTurnaroundTime+0x130>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d906      	bls.n	8005044 <USB_SetTurnaroundTime+0x98>
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	4a29      	ldr	r2, [pc, #164]	; (80050e0 <USB_SetTurnaroundTime+0x134>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d802      	bhi.n	8005044 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800503e:	230a      	movs	r3, #10
 8005040:	617b      	str	r3, [r7, #20]
 8005042:	e02b      	b.n	800509c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	4a26      	ldr	r2, [pc, #152]	; (80050e0 <USB_SetTurnaroundTime+0x134>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d906      	bls.n	800505a <USB_SetTurnaroundTime+0xae>
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	4a25      	ldr	r2, [pc, #148]	; (80050e4 <USB_SetTurnaroundTime+0x138>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d202      	bcs.n	800505a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005054:	2309      	movs	r3, #9
 8005056:	617b      	str	r3, [r7, #20]
 8005058:	e020      	b.n	800509c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	4a21      	ldr	r2, [pc, #132]	; (80050e4 <USB_SetTurnaroundTime+0x138>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d306      	bcc.n	8005070 <USB_SetTurnaroundTime+0xc4>
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	4a20      	ldr	r2, [pc, #128]	; (80050e8 <USB_SetTurnaroundTime+0x13c>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d802      	bhi.n	8005070 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800506a:	2308      	movs	r3, #8
 800506c:	617b      	str	r3, [r7, #20]
 800506e:	e015      	b.n	800509c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	4a1d      	ldr	r2, [pc, #116]	; (80050e8 <USB_SetTurnaroundTime+0x13c>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d906      	bls.n	8005086 <USB_SetTurnaroundTime+0xda>
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	4a1c      	ldr	r2, [pc, #112]	; (80050ec <USB_SetTurnaroundTime+0x140>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d202      	bcs.n	8005086 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005080:	2307      	movs	r3, #7
 8005082:	617b      	str	r3, [r7, #20]
 8005084:	e00a      	b.n	800509c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005086:	2306      	movs	r3, #6
 8005088:	617b      	str	r3, [r7, #20]
 800508a:	e007      	b.n	800509c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800508c:	79fb      	ldrb	r3, [r7, #7]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d102      	bne.n	8005098 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005092:	2309      	movs	r3, #9
 8005094:	617b      	str	r3, [r7, #20]
 8005096:	e001      	b.n	800509c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005098:	2309      	movs	r3, #9
 800509a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	68db      	ldr	r3, [r3, #12]
 80050a0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	68da      	ldr	r2, [r3, #12]
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	029b      	lsls	r3, r3, #10
 80050b0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80050b4:	431a      	orrs	r2, r3
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80050ba:	2300      	movs	r3, #0
}
 80050bc:	4618      	mov	r0, r3
 80050be:	371c      	adds	r7, #28
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr
 80050c8:	00d8acbf 	.word	0x00d8acbf
 80050cc:	00e4e1c0 	.word	0x00e4e1c0
 80050d0:	00f42400 	.word	0x00f42400
 80050d4:	01067380 	.word	0x01067380
 80050d8:	011a499f 	.word	0x011a499f
 80050dc:	01312cff 	.word	0x01312cff
 80050e0:	014ca43f 	.word	0x014ca43f
 80050e4:	016e3600 	.word	0x016e3600
 80050e8:	01a6ab1f 	.word	0x01a6ab1f
 80050ec:	01e84800 	.word	0x01e84800

080050f0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b083      	sub	sp, #12
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	f043 0201 	orr.w	r2, r3, #1
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005104:	2300      	movs	r3, #0
}
 8005106:	4618      	mov	r0, r3
 8005108:	370c      	adds	r7, #12
 800510a:	46bd      	mov	sp, r7
 800510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005110:	4770      	bx	lr

08005112 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005112:	b480      	push	{r7}
 8005114:	b083      	sub	sp, #12
 8005116:	af00      	add	r7, sp, #0
 8005118:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	f023 0201 	bic.w	r2, r3, #1
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005126:	2300      	movs	r3, #0
}
 8005128:	4618      	mov	r0, r3
 800512a:	370c      	adds	r7, #12
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr

08005134 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b082      	sub	sp, #8
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	460b      	mov	r3, r1
 800513e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	68db      	ldr	r3, [r3, #12]
 8005144:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800514c:	78fb      	ldrb	r3, [r7, #3]
 800514e:	2b01      	cmp	r3, #1
 8005150:	d106      	bne.n	8005160 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	68db      	ldr	r3, [r3, #12]
 8005156:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	60da      	str	r2, [r3, #12]
 800515e:	e00b      	b.n	8005178 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005160:	78fb      	ldrb	r3, [r7, #3]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d106      	bne.n	8005174 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	68db      	ldr	r3, [r3, #12]
 800516a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	60da      	str	r2, [r3, #12]
 8005172:	e001      	b.n	8005178 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	e003      	b.n	8005180 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005178:	2032      	movs	r0, #50	; 0x32
 800517a:	f7fb ff0f 	bl	8000f9c <HAL_Delay>

  return HAL_OK;
 800517e:	2300      	movs	r3, #0
}
 8005180:	4618      	mov	r0, r3
 8005182:	3708      	adds	r7, #8
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}

08005188 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005188:	b084      	sub	sp, #16
 800518a:	b580      	push	{r7, lr}
 800518c:	b086      	sub	sp, #24
 800518e:	af00      	add	r7, sp, #0
 8005190:	6078      	str	r0, [r7, #4]
 8005192:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005196:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800519a:	2300      	movs	r3, #0
 800519c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80051a2:	2300      	movs	r3, #0
 80051a4:	613b      	str	r3, [r7, #16]
 80051a6:	e009      	b.n	80051bc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80051a8:	687a      	ldr	r2, [r7, #4]
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	3340      	adds	r3, #64	; 0x40
 80051ae:	009b      	lsls	r3, r3, #2
 80051b0:	4413      	add	r3, r2
 80051b2:	2200      	movs	r2, #0
 80051b4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	3301      	adds	r3, #1
 80051ba:	613b      	str	r3, [r7, #16]
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	2b0e      	cmp	r3, #14
 80051c0:	d9f2      	bls.n	80051a8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80051c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d11c      	bne.n	8005202 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	68fa      	ldr	r2, [r7, #12]
 80051d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80051d6:	f043 0302 	orr.w	r3, r3, #2
 80051da:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051e0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	601a      	str	r2, [r3, #0]
 8005200:	e005      	b.n	800520e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005206:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005214:	461a      	mov	r2, r3
 8005216:	2300      	movs	r3, #0
 8005218:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005220:	4619      	mov	r1, r3
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005228:	461a      	mov	r2, r3
 800522a:	680b      	ldr	r3, [r1, #0]
 800522c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800522e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005230:	2b01      	cmp	r3, #1
 8005232:	d10c      	bne.n	800524e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005236:	2b00      	cmp	r3, #0
 8005238:	d104      	bne.n	8005244 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800523a:	2100      	movs	r1, #0
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f000 f959 	bl	80054f4 <USB_SetDevSpeed>
 8005242:	e018      	b.n	8005276 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005244:	2101      	movs	r1, #1
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f000 f954 	bl	80054f4 <USB_SetDevSpeed>
 800524c:	e013      	b.n	8005276 <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800524e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005250:	2b03      	cmp	r3, #3
 8005252:	d10c      	bne.n	800526e <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005256:	2b00      	cmp	r3, #0
 8005258:	d104      	bne.n	8005264 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800525a:	2100      	movs	r1, #0
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f000 f949 	bl	80054f4 <USB_SetDevSpeed>
 8005262:	e008      	b.n	8005276 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005264:	2101      	movs	r1, #1
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f000 f944 	bl	80054f4 <USB_SetDevSpeed>
 800526c:	e003      	b.n	8005276 <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800526e:	2103      	movs	r1, #3
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f000 f93f 	bl	80054f4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005276:	2110      	movs	r1, #16
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f000 f8f3 	bl	8005464 <USB_FlushTxFifo>
 800527e:	4603      	mov	r3, r0
 8005280:	2b00      	cmp	r3, #0
 8005282:	d001      	beq.n	8005288 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 8005284:	2301      	movs	r3, #1
 8005286:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	f000 f911 	bl	80054b0 <USB_FlushRxFifo>
 800528e:	4603      	mov	r3, r0
 8005290:	2b00      	cmp	r3, #0
 8005292:	d001      	beq.n	8005298 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 8005294:	2301      	movs	r3, #1
 8005296:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800529e:	461a      	mov	r2, r3
 80052a0:	2300      	movs	r3, #0
 80052a2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052aa:	461a      	mov	r2, r3
 80052ac:	2300      	movs	r3, #0
 80052ae:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052b6:	461a      	mov	r2, r3
 80052b8:	2300      	movs	r3, #0
 80052ba:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80052bc:	2300      	movs	r3, #0
 80052be:	613b      	str	r3, [r7, #16]
 80052c0:	e043      	b.n	800534a <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	015a      	lsls	r2, r3, #5
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	4413      	add	r3, r2
 80052ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80052d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80052d8:	d118      	bne.n	800530c <USB_DevInit+0x184>
    {
      if (i == 0U)
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d10a      	bne.n	80052f6 <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	015a      	lsls	r2, r3, #5
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	4413      	add	r3, r2
 80052e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052ec:	461a      	mov	r2, r3
 80052ee:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80052f2:	6013      	str	r3, [r2, #0]
 80052f4:	e013      	b.n	800531e <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	015a      	lsls	r2, r3, #5
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	4413      	add	r3, r2
 80052fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005302:	461a      	mov	r2, r3
 8005304:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005308:	6013      	str	r3, [r2, #0]
 800530a:	e008      	b.n	800531e <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	015a      	lsls	r2, r3, #5
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	4413      	add	r3, r2
 8005314:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005318:	461a      	mov	r2, r3
 800531a:	2300      	movs	r3, #0
 800531c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	015a      	lsls	r2, r3, #5
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	4413      	add	r3, r2
 8005326:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800532a:	461a      	mov	r2, r3
 800532c:	2300      	movs	r3, #0
 800532e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	015a      	lsls	r2, r3, #5
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	4413      	add	r3, r2
 8005338:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800533c:	461a      	mov	r2, r3
 800533e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005342:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	3301      	adds	r3, #1
 8005348:	613b      	str	r3, [r7, #16]
 800534a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800534c:	693a      	ldr	r2, [r7, #16]
 800534e:	429a      	cmp	r2, r3
 8005350:	d3b7      	bcc.n	80052c2 <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005352:	2300      	movs	r3, #0
 8005354:	613b      	str	r3, [r7, #16]
 8005356:	e043      	b.n	80053e0 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	015a      	lsls	r2, r3, #5
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	4413      	add	r3, r2
 8005360:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800536a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800536e:	d118      	bne.n	80053a2 <USB_DevInit+0x21a>
    {
      if (i == 0U)
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d10a      	bne.n	800538c <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	015a      	lsls	r2, r3, #5
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	4413      	add	r3, r2
 800537e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005382:	461a      	mov	r2, r3
 8005384:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005388:	6013      	str	r3, [r2, #0]
 800538a:	e013      	b.n	80053b4 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	015a      	lsls	r2, r3, #5
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	4413      	add	r3, r2
 8005394:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005398:	461a      	mov	r2, r3
 800539a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800539e:	6013      	str	r3, [r2, #0]
 80053a0:	e008      	b.n	80053b4 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	015a      	lsls	r2, r3, #5
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	4413      	add	r3, r2
 80053aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053ae:	461a      	mov	r2, r3
 80053b0:	2300      	movs	r3, #0
 80053b2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	015a      	lsls	r2, r3, #5
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	4413      	add	r3, r2
 80053bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053c0:	461a      	mov	r2, r3
 80053c2:	2300      	movs	r3, #0
 80053c4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	015a      	lsls	r2, r3, #5
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	4413      	add	r3, r2
 80053ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053d2:	461a      	mov	r2, r3
 80053d4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80053d8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	3301      	adds	r3, #1
 80053de:	613b      	str	r3, [r7, #16]
 80053e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e2:	693a      	ldr	r2, [r7, #16]
 80053e4:	429a      	cmp	r2, r3
 80053e6:	d3b7      	bcc.n	8005358 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053ee:	691b      	ldr	r3, [r3, #16]
 80053f0:	68fa      	ldr	r2, [r7, #12]
 80053f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80053fa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2200      	movs	r2, #0
 8005400:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005408:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800540a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800540c:	2b00      	cmp	r3, #0
 800540e:	d105      	bne.n	800541c <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	699b      	ldr	r3, [r3, #24]
 8005414:	f043 0210 	orr.w	r2, r3, #16
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	699a      	ldr	r2, [r3, #24]
 8005420:	4b0e      	ldr	r3, [pc, #56]	; (800545c <USB_DevInit+0x2d4>)
 8005422:	4313      	orrs	r3, r2
 8005424:	687a      	ldr	r2, [r7, #4]
 8005426:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005428:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800542a:	2b00      	cmp	r3, #0
 800542c:	d005      	beq.n	800543a <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	699b      	ldr	r3, [r3, #24]
 8005432:	f043 0208 	orr.w	r2, r3, #8
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800543a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800543c:	2b01      	cmp	r3, #1
 800543e:	d105      	bne.n	800544c <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	699a      	ldr	r2, [r3, #24]
 8005444:	4b06      	ldr	r3, [pc, #24]	; (8005460 <USB_DevInit+0x2d8>)
 8005446:	4313      	orrs	r3, r2
 8005448:	687a      	ldr	r2, [r7, #4]
 800544a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800544c:	7dfb      	ldrb	r3, [r7, #23]
}
 800544e:	4618      	mov	r0, r3
 8005450:	3718      	adds	r7, #24
 8005452:	46bd      	mov	sp, r7
 8005454:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005458:	b004      	add	sp, #16
 800545a:	4770      	bx	lr
 800545c:	803c3800 	.word	0x803c3800
 8005460:	40000004 	.word	0x40000004

08005464 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005464:	b480      	push	{r7}
 8005466:	b085      	sub	sp, #20
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
 800546c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800546e:	2300      	movs	r3, #0
 8005470:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	019b      	lsls	r3, r3, #6
 8005476:	f043 0220 	orr.w	r2, r3, #32
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	3301      	adds	r3, #1
 8005482:	60fb      	str	r3, [r7, #12]
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	4a09      	ldr	r2, [pc, #36]	; (80054ac <USB_FlushTxFifo+0x48>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d901      	bls.n	8005490 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800548c:	2303      	movs	r3, #3
 800548e:	e006      	b.n	800549e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	691b      	ldr	r3, [r3, #16]
 8005494:	f003 0320 	and.w	r3, r3, #32
 8005498:	2b20      	cmp	r3, #32
 800549a:	d0f0      	beq.n	800547e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800549c:	2300      	movs	r3, #0
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3714      	adds	r7, #20
 80054a2:	46bd      	mov	sp, r7
 80054a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a8:	4770      	bx	lr
 80054aa:	bf00      	nop
 80054ac:	00030d40 	.word	0x00030d40

080054b0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b085      	sub	sp, #20
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80054b8:	2300      	movs	r3, #0
 80054ba:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2210      	movs	r2, #16
 80054c0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	3301      	adds	r3, #1
 80054c6:	60fb      	str	r3, [r7, #12]
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	4a09      	ldr	r2, [pc, #36]	; (80054f0 <USB_FlushRxFifo+0x40>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d901      	bls.n	80054d4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80054d0:	2303      	movs	r3, #3
 80054d2:	e006      	b.n	80054e2 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	691b      	ldr	r3, [r3, #16]
 80054d8:	f003 0310 	and.w	r3, r3, #16
 80054dc:	2b10      	cmp	r3, #16
 80054de:	d0f0      	beq.n	80054c2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80054e0:	2300      	movs	r3, #0
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	3714      	adds	r7, #20
 80054e6:	46bd      	mov	sp, r7
 80054e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ec:	4770      	bx	lr
 80054ee:	bf00      	nop
 80054f0:	00030d40 	.word	0x00030d40

080054f4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b085      	sub	sp, #20
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
 80054fc:	460b      	mov	r3, r1
 80054fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	78fb      	ldrb	r3, [r7, #3]
 800550e:	68f9      	ldr	r1, [r7, #12]
 8005510:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005514:	4313      	orrs	r3, r2
 8005516:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005518:	2300      	movs	r3, #0
}
 800551a:	4618      	mov	r0, r3
 800551c:	3714      	adds	r7, #20
 800551e:	46bd      	mov	sp, r7
 8005520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005524:	4770      	bx	lr

08005526 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005526:	b480      	push	{r7}
 8005528:	b087      	sub	sp, #28
 800552a:	af00      	add	r7, sp, #0
 800552c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005538:	689b      	ldr	r3, [r3, #8]
 800553a:	f003 0306 	and.w	r3, r3, #6
 800553e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d102      	bne.n	800554c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005546:	2300      	movs	r3, #0
 8005548:	75fb      	strb	r3, [r7, #23]
 800554a:	e00a      	b.n	8005562 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	2b02      	cmp	r3, #2
 8005550:	d002      	beq.n	8005558 <USB_GetDevSpeed+0x32>
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2b06      	cmp	r3, #6
 8005556:	d102      	bne.n	800555e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005558:	2302      	movs	r3, #2
 800555a:	75fb      	strb	r3, [r7, #23]
 800555c:	e001      	b.n	8005562 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800555e:	230f      	movs	r3, #15
 8005560:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005562:	7dfb      	ldrb	r3, [r7, #23]
}
 8005564:	4618      	mov	r0, r3
 8005566:	371c      	adds	r7, #28
 8005568:	46bd      	mov	sp, r7
 800556a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556e:	4770      	bx	lr

08005570 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005570:	b480      	push	{r7}
 8005572:	b085      	sub	sp, #20
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
 8005578:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	781b      	ldrb	r3, [r3, #0]
 8005582:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	785b      	ldrb	r3, [r3, #1]
 8005588:	2b01      	cmp	r3, #1
 800558a:	d139      	bne.n	8005600 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005592:	69da      	ldr	r2, [r3, #28]
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	781b      	ldrb	r3, [r3, #0]
 8005598:	f003 030f 	and.w	r3, r3, #15
 800559c:	2101      	movs	r1, #1
 800559e:	fa01 f303 	lsl.w	r3, r1, r3
 80055a2:	b29b      	uxth	r3, r3
 80055a4:	68f9      	ldr	r1, [r7, #12]
 80055a6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80055aa:	4313      	orrs	r3, r2
 80055ac:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	015a      	lsls	r2, r3, #5
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	4413      	add	r3, r2
 80055b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d153      	bne.n	800566c <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	015a      	lsls	r2, r3, #5
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	4413      	add	r3, r2
 80055cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055d0:	681a      	ldr	r2, [r3, #0]
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	689b      	ldr	r3, [r3, #8]
 80055d6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	78db      	ldrb	r3, [r3, #3]
 80055de:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80055e0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	059b      	lsls	r3, r3, #22
 80055e6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80055e8:	431a      	orrs	r2, r3
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	0159      	lsls	r1, r3, #5
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	440b      	add	r3, r1
 80055f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055f6:	4619      	mov	r1, r3
 80055f8:	4b20      	ldr	r3, [pc, #128]	; (800567c <USB_ActivateEndpoint+0x10c>)
 80055fa:	4313      	orrs	r3, r2
 80055fc:	600b      	str	r3, [r1, #0]
 80055fe:	e035      	b.n	800566c <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005606:	69da      	ldr	r2, [r3, #28]
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	781b      	ldrb	r3, [r3, #0]
 800560c:	f003 030f 	and.w	r3, r3, #15
 8005610:	2101      	movs	r1, #1
 8005612:	fa01 f303 	lsl.w	r3, r1, r3
 8005616:	041b      	lsls	r3, r3, #16
 8005618:	68f9      	ldr	r1, [r7, #12]
 800561a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800561e:	4313      	orrs	r3, r2
 8005620:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	015a      	lsls	r2, r3, #5
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	4413      	add	r3, r2
 800562a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005634:	2b00      	cmp	r3, #0
 8005636:	d119      	bne.n	800566c <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	015a      	lsls	r2, r3, #5
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	4413      	add	r3, r2
 8005640:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005644:	681a      	ldr	r2, [r3, #0]
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	78db      	ldrb	r3, [r3, #3]
 8005652:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005654:	430b      	orrs	r3, r1
 8005656:	431a      	orrs	r2, r3
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	0159      	lsls	r1, r3, #5
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	440b      	add	r3, r1
 8005660:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005664:	4619      	mov	r1, r3
 8005666:	4b05      	ldr	r3, [pc, #20]	; (800567c <USB_ActivateEndpoint+0x10c>)
 8005668:	4313      	orrs	r3, r2
 800566a:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800566c:	2300      	movs	r3, #0
}
 800566e:	4618      	mov	r0, r3
 8005670:	3714      	adds	r7, #20
 8005672:	46bd      	mov	sp, r7
 8005674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005678:	4770      	bx	lr
 800567a:	bf00      	nop
 800567c:	10008000 	.word	0x10008000

08005680 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005680:	b480      	push	{r7}
 8005682:	b085      	sub	sp, #20
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
 8005688:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	781b      	ldrb	r3, [r3, #0]
 8005692:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	785b      	ldrb	r3, [r3, #1]
 8005698:	2b01      	cmp	r3, #1
 800569a:	d161      	bne.n	8005760 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	015a      	lsls	r2, r3, #5
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	4413      	add	r3, r2
 80056a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80056ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80056b2:	d11f      	bne.n	80056f4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	015a      	lsls	r2, r3, #5
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	4413      	add	r3, r2
 80056bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	68ba      	ldr	r2, [r7, #8]
 80056c4:	0151      	lsls	r1, r2, #5
 80056c6:	68fa      	ldr	r2, [r7, #12]
 80056c8:	440a      	add	r2, r1
 80056ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056ce:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80056d2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	015a      	lsls	r2, r3, #5
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	4413      	add	r3, r2
 80056dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	68ba      	ldr	r2, [r7, #8]
 80056e4:	0151      	lsls	r1, r2, #5
 80056e6:	68fa      	ldr	r2, [r7, #12]
 80056e8:	440a      	add	r2, r1
 80056ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056ee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80056f2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	781b      	ldrb	r3, [r3, #0]
 8005700:	f003 030f 	and.w	r3, r3, #15
 8005704:	2101      	movs	r1, #1
 8005706:	fa01 f303 	lsl.w	r3, r1, r3
 800570a:	b29b      	uxth	r3, r3
 800570c:	43db      	mvns	r3, r3
 800570e:	68f9      	ldr	r1, [r7, #12]
 8005710:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005714:	4013      	ands	r3, r2
 8005716:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800571e:	69da      	ldr	r2, [r3, #28]
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	781b      	ldrb	r3, [r3, #0]
 8005724:	f003 030f 	and.w	r3, r3, #15
 8005728:	2101      	movs	r1, #1
 800572a:	fa01 f303 	lsl.w	r3, r1, r3
 800572e:	b29b      	uxth	r3, r3
 8005730:	43db      	mvns	r3, r3
 8005732:	68f9      	ldr	r1, [r7, #12]
 8005734:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005738:	4013      	ands	r3, r2
 800573a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	015a      	lsls	r2, r3, #5
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	4413      	add	r3, r2
 8005744:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005748:	681a      	ldr	r2, [r3, #0]
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	0159      	lsls	r1, r3, #5
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	440b      	add	r3, r1
 8005752:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005756:	4619      	mov	r1, r3
 8005758:	4b35      	ldr	r3, [pc, #212]	; (8005830 <USB_DeactivateEndpoint+0x1b0>)
 800575a:	4013      	ands	r3, r2
 800575c:	600b      	str	r3, [r1, #0]
 800575e:	e060      	b.n	8005822 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	015a      	lsls	r2, r3, #5
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	4413      	add	r3, r2
 8005768:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005772:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005776:	d11f      	bne.n	80057b8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	015a      	lsls	r2, r3, #5
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	4413      	add	r3, r2
 8005780:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	68ba      	ldr	r2, [r7, #8]
 8005788:	0151      	lsls	r1, r2, #5
 800578a:	68fa      	ldr	r2, [r7, #12]
 800578c:	440a      	add	r2, r1
 800578e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005792:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005796:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	015a      	lsls	r2, r3, #5
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	4413      	add	r3, r2
 80057a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	68ba      	ldr	r2, [r7, #8]
 80057a8:	0151      	lsls	r1, r2, #5
 80057aa:	68fa      	ldr	r2, [r7, #12]
 80057ac:	440a      	add	r2, r1
 80057ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057b2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80057b6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	781b      	ldrb	r3, [r3, #0]
 80057c4:	f003 030f 	and.w	r3, r3, #15
 80057c8:	2101      	movs	r1, #1
 80057ca:	fa01 f303 	lsl.w	r3, r1, r3
 80057ce:	041b      	lsls	r3, r3, #16
 80057d0:	43db      	mvns	r3, r3
 80057d2:	68f9      	ldr	r1, [r7, #12]
 80057d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80057d8:	4013      	ands	r3, r2
 80057da:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057e2:	69da      	ldr	r2, [r3, #28]
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	781b      	ldrb	r3, [r3, #0]
 80057e8:	f003 030f 	and.w	r3, r3, #15
 80057ec:	2101      	movs	r1, #1
 80057ee:	fa01 f303 	lsl.w	r3, r1, r3
 80057f2:	041b      	lsls	r3, r3, #16
 80057f4:	43db      	mvns	r3, r3
 80057f6:	68f9      	ldr	r1, [r7, #12]
 80057f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80057fc:	4013      	ands	r3, r2
 80057fe:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	015a      	lsls	r2, r3, #5
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	4413      	add	r3, r2
 8005808:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800580c:	681a      	ldr	r2, [r3, #0]
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	0159      	lsls	r1, r3, #5
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	440b      	add	r3, r1
 8005816:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800581a:	4619      	mov	r1, r3
 800581c:	4b05      	ldr	r3, [pc, #20]	; (8005834 <USB_DeactivateEndpoint+0x1b4>)
 800581e:	4013      	ands	r3, r2
 8005820:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005822:	2300      	movs	r3, #0
}
 8005824:	4618      	mov	r0, r3
 8005826:	3714      	adds	r7, #20
 8005828:	46bd      	mov	sp, r7
 800582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582e:	4770      	bx	lr
 8005830:	ec337800 	.word	0xec337800
 8005834:	eff37800 	.word	0xeff37800

08005838 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b08a      	sub	sp, #40	; 0x28
 800583c:	af02      	add	r7, sp, #8
 800583e:	60f8      	str	r0, [r7, #12]
 8005840:	60b9      	str	r1, [r7, #8]
 8005842:	4613      	mov	r3, r2
 8005844:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	781b      	ldrb	r3, [r3, #0]
 800584e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	785b      	ldrb	r3, [r3, #1]
 8005854:	2b01      	cmp	r3, #1
 8005856:	f040 8163 	bne.w	8005b20 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	695b      	ldr	r3, [r3, #20]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d132      	bne.n	80058c8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005862:	69bb      	ldr	r3, [r7, #24]
 8005864:	015a      	lsls	r2, r3, #5
 8005866:	69fb      	ldr	r3, [r7, #28]
 8005868:	4413      	add	r3, r2
 800586a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800586e:	691a      	ldr	r2, [r3, #16]
 8005870:	69bb      	ldr	r3, [r7, #24]
 8005872:	0159      	lsls	r1, r3, #5
 8005874:	69fb      	ldr	r3, [r7, #28]
 8005876:	440b      	add	r3, r1
 8005878:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800587c:	4619      	mov	r1, r3
 800587e:	4ba5      	ldr	r3, [pc, #660]	; (8005b14 <USB_EPStartXfer+0x2dc>)
 8005880:	4013      	ands	r3, r2
 8005882:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005884:	69bb      	ldr	r3, [r7, #24]
 8005886:	015a      	lsls	r2, r3, #5
 8005888:	69fb      	ldr	r3, [r7, #28]
 800588a:	4413      	add	r3, r2
 800588c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005890:	691b      	ldr	r3, [r3, #16]
 8005892:	69ba      	ldr	r2, [r7, #24]
 8005894:	0151      	lsls	r1, r2, #5
 8005896:	69fa      	ldr	r2, [r7, #28]
 8005898:	440a      	add	r2, r1
 800589a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800589e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80058a2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80058a4:	69bb      	ldr	r3, [r7, #24]
 80058a6:	015a      	lsls	r2, r3, #5
 80058a8:	69fb      	ldr	r3, [r7, #28]
 80058aa:	4413      	add	r3, r2
 80058ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058b0:	691a      	ldr	r2, [r3, #16]
 80058b2:	69bb      	ldr	r3, [r7, #24]
 80058b4:	0159      	lsls	r1, r3, #5
 80058b6:	69fb      	ldr	r3, [r7, #28]
 80058b8:	440b      	add	r3, r1
 80058ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058be:	4619      	mov	r1, r3
 80058c0:	4b95      	ldr	r3, [pc, #596]	; (8005b18 <USB_EPStartXfer+0x2e0>)
 80058c2:	4013      	ands	r3, r2
 80058c4:	610b      	str	r3, [r1, #16]
 80058c6:	e074      	b.n	80059b2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80058c8:	69bb      	ldr	r3, [r7, #24]
 80058ca:	015a      	lsls	r2, r3, #5
 80058cc:	69fb      	ldr	r3, [r7, #28]
 80058ce:	4413      	add	r3, r2
 80058d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058d4:	691a      	ldr	r2, [r3, #16]
 80058d6:	69bb      	ldr	r3, [r7, #24]
 80058d8:	0159      	lsls	r1, r3, #5
 80058da:	69fb      	ldr	r3, [r7, #28]
 80058dc:	440b      	add	r3, r1
 80058de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058e2:	4619      	mov	r1, r3
 80058e4:	4b8c      	ldr	r3, [pc, #560]	; (8005b18 <USB_EPStartXfer+0x2e0>)
 80058e6:	4013      	ands	r3, r2
 80058e8:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80058ea:	69bb      	ldr	r3, [r7, #24]
 80058ec:	015a      	lsls	r2, r3, #5
 80058ee:	69fb      	ldr	r3, [r7, #28]
 80058f0:	4413      	add	r3, r2
 80058f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058f6:	691a      	ldr	r2, [r3, #16]
 80058f8:	69bb      	ldr	r3, [r7, #24]
 80058fa:	0159      	lsls	r1, r3, #5
 80058fc:	69fb      	ldr	r3, [r7, #28]
 80058fe:	440b      	add	r3, r1
 8005900:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005904:	4619      	mov	r1, r3
 8005906:	4b83      	ldr	r3, [pc, #524]	; (8005b14 <USB_EPStartXfer+0x2dc>)
 8005908:	4013      	ands	r3, r2
 800590a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800590c:	69bb      	ldr	r3, [r7, #24]
 800590e:	015a      	lsls	r2, r3, #5
 8005910:	69fb      	ldr	r3, [r7, #28]
 8005912:	4413      	add	r3, r2
 8005914:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005918:	691a      	ldr	r2, [r3, #16]
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	6959      	ldr	r1, [r3, #20]
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	440b      	add	r3, r1
 8005924:	1e59      	subs	r1, r3, #1
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	689b      	ldr	r3, [r3, #8]
 800592a:	fbb1 f3f3 	udiv	r3, r1, r3
 800592e:	04d9      	lsls	r1, r3, #19
 8005930:	4b7a      	ldr	r3, [pc, #488]	; (8005b1c <USB_EPStartXfer+0x2e4>)
 8005932:	400b      	ands	r3, r1
 8005934:	69b9      	ldr	r1, [r7, #24]
 8005936:	0148      	lsls	r0, r1, #5
 8005938:	69f9      	ldr	r1, [r7, #28]
 800593a:	4401      	add	r1, r0
 800593c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005940:	4313      	orrs	r3, r2
 8005942:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005944:	69bb      	ldr	r3, [r7, #24]
 8005946:	015a      	lsls	r2, r3, #5
 8005948:	69fb      	ldr	r3, [r7, #28]
 800594a:	4413      	add	r3, r2
 800594c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005950:	691a      	ldr	r2, [r3, #16]
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	695b      	ldr	r3, [r3, #20]
 8005956:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800595a:	69b9      	ldr	r1, [r7, #24]
 800595c:	0148      	lsls	r0, r1, #5
 800595e:	69f9      	ldr	r1, [r7, #28]
 8005960:	4401      	add	r1, r0
 8005962:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005966:	4313      	orrs	r3, r2
 8005968:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	78db      	ldrb	r3, [r3, #3]
 800596e:	2b01      	cmp	r3, #1
 8005970:	d11f      	bne.n	80059b2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005972:	69bb      	ldr	r3, [r7, #24]
 8005974:	015a      	lsls	r2, r3, #5
 8005976:	69fb      	ldr	r3, [r7, #28]
 8005978:	4413      	add	r3, r2
 800597a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800597e:	691b      	ldr	r3, [r3, #16]
 8005980:	69ba      	ldr	r2, [r7, #24]
 8005982:	0151      	lsls	r1, r2, #5
 8005984:	69fa      	ldr	r2, [r7, #28]
 8005986:	440a      	add	r2, r1
 8005988:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800598c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005990:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005992:	69bb      	ldr	r3, [r7, #24]
 8005994:	015a      	lsls	r2, r3, #5
 8005996:	69fb      	ldr	r3, [r7, #28]
 8005998:	4413      	add	r3, r2
 800599a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800599e:	691b      	ldr	r3, [r3, #16]
 80059a0:	69ba      	ldr	r2, [r7, #24]
 80059a2:	0151      	lsls	r1, r2, #5
 80059a4:	69fa      	ldr	r2, [r7, #28]
 80059a6:	440a      	add	r2, r1
 80059a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059ac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80059b0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80059b2:	79fb      	ldrb	r3, [r7, #7]
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	d14b      	bne.n	8005a50 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	691b      	ldr	r3, [r3, #16]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d009      	beq.n	80059d4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80059c0:	69bb      	ldr	r3, [r7, #24]
 80059c2:	015a      	lsls	r2, r3, #5
 80059c4:	69fb      	ldr	r3, [r7, #28]
 80059c6:	4413      	add	r3, r2
 80059c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059cc:	461a      	mov	r2, r3
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	691b      	ldr	r3, [r3, #16]
 80059d2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	78db      	ldrb	r3, [r3, #3]
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d128      	bne.n	8005a2e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80059dc:	69fb      	ldr	r3, [r7, #28]
 80059de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059e2:	689b      	ldr	r3, [r3, #8]
 80059e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d110      	bne.n	8005a0e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80059ec:	69bb      	ldr	r3, [r7, #24]
 80059ee:	015a      	lsls	r2, r3, #5
 80059f0:	69fb      	ldr	r3, [r7, #28]
 80059f2:	4413      	add	r3, r2
 80059f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	69ba      	ldr	r2, [r7, #24]
 80059fc:	0151      	lsls	r1, r2, #5
 80059fe:	69fa      	ldr	r2, [r7, #28]
 8005a00:	440a      	add	r2, r1
 8005a02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a06:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005a0a:	6013      	str	r3, [r2, #0]
 8005a0c:	e00f      	b.n	8005a2e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005a0e:	69bb      	ldr	r3, [r7, #24]
 8005a10:	015a      	lsls	r2, r3, #5
 8005a12:	69fb      	ldr	r3, [r7, #28]
 8005a14:	4413      	add	r3, r2
 8005a16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	69ba      	ldr	r2, [r7, #24]
 8005a1e:	0151      	lsls	r1, r2, #5
 8005a20:	69fa      	ldr	r2, [r7, #28]
 8005a22:	440a      	add	r2, r1
 8005a24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a2c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005a2e:	69bb      	ldr	r3, [r7, #24]
 8005a30:	015a      	lsls	r2, r3, #5
 8005a32:	69fb      	ldr	r3, [r7, #28]
 8005a34:	4413      	add	r3, r2
 8005a36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	69ba      	ldr	r2, [r7, #24]
 8005a3e:	0151      	lsls	r1, r2, #5
 8005a40:	69fa      	ldr	r2, [r7, #28]
 8005a42:	440a      	add	r2, r1
 8005a44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a48:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005a4c:	6013      	str	r3, [r2, #0]
 8005a4e:	e133      	b.n	8005cb8 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005a50:	69bb      	ldr	r3, [r7, #24]
 8005a52:	015a      	lsls	r2, r3, #5
 8005a54:	69fb      	ldr	r3, [r7, #28]
 8005a56:	4413      	add	r3, r2
 8005a58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	69ba      	ldr	r2, [r7, #24]
 8005a60:	0151      	lsls	r1, r2, #5
 8005a62:	69fa      	ldr	r2, [r7, #28]
 8005a64:	440a      	add	r2, r1
 8005a66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a6a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005a6e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	78db      	ldrb	r3, [r3, #3]
 8005a74:	2b01      	cmp	r3, #1
 8005a76:	d015      	beq.n	8005aa4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	695b      	ldr	r3, [r3, #20]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	f000 811b 	beq.w	8005cb8 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005a82:	69fb      	ldr	r3, [r7, #28]
 8005a84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	781b      	ldrb	r3, [r3, #0]
 8005a8e:	f003 030f 	and.w	r3, r3, #15
 8005a92:	2101      	movs	r1, #1
 8005a94:	fa01 f303 	lsl.w	r3, r1, r3
 8005a98:	69f9      	ldr	r1, [r7, #28]
 8005a9a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	634b      	str	r3, [r1, #52]	; 0x34
 8005aa2:	e109      	b.n	8005cb8 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005aa4:	69fb      	ldr	r3, [r7, #28]
 8005aa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005aaa:	689b      	ldr	r3, [r3, #8]
 8005aac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d110      	bne.n	8005ad6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005ab4:	69bb      	ldr	r3, [r7, #24]
 8005ab6:	015a      	lsls	r2, r3, #5
 8005ab8:	69fb      	ldr	r3, [r7, #28]
 8005aba:	4413      	add	r3, r2
 8005abc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	69ba      	ldr	r2, [r7, #24]
 8005ac4:	0151      	lsls	r1, r2, #5
 8005ac6:	69fa      	ldr	r2, [r7, #28]
 8005ac8:	440a      	add	r2, r1
 8005aca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ace:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005ad2:	6013      	str	r3, [r2, #0]
 8005ad4:	e00f      	b.n	8005af6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005ad6:	69bb      	ldr	r3, [r7, #24]
 8005ad8:	015a      	lsls	r2, r3, #5
 8005ada:	69fb      	ldr	r3, [r7, #28]
 8005adc:	4413      	add	r3, r2
 8005ade:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	69ba      	ldr	r2, [r7, #24]
 8005ae6:	0151      	lsls	r1, r2, #5
 8005ae8:	69fa      	ldr	r2, [r7, #28]
 8005aea:	440a      	add	r2, r1
 8005aec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005af0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005af4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	68d9      	ldr	r1, [r3, #12]
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	781a      	ldrb	r2, [r3, #0]
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	695b      	ldr	r3, [r3, #20]
 8005b02:	b298      	uxth	r0, r3
 8005b04:	79fb      	ldrb	r3, [r7, #7]
 8005b06:	9300      	str	r3, [sp, #0]
 8005b08:	4603      	mov	r3, r0
 8005b0a:	68f8      	ldr	r0, [r7, #12]
 8005b0c:	f000 fa38 	bl	8005f80 <USB_WritePacket>
 8005b10:	e0d2      	b.n	8005cb8 <USB_EPStartXfer+0x480>
 8005b12:	bf00      	nop
 8005b14:	e007ffff 	.word	0xe007ffff
 8005b18:	fff80000 	.word	0xfff80000
 8005b1c:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005b20:	69bb      	ldr	r3, [r7, #24]
 8005b22:	015a      	lsls	r2, r3, #5
 8005b24:	69fb      	ldr	r3, [r7, #28]
 8005b26:	4413      	add	r3, r2
 8005b28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b2c:	691a      	ldr	r2, [r3, #16]
 8005b2e:	69bb      	ldr	r3, [r7, #24]
 8005b30:	0159      	lsls	r1, r3, #5
 8005b32:	69fb      	ldr	r3, [r7, #28]
 8005b34:	440b      	add	r3, r1
 8005b36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b3a:	4619      	mov	r1, r3
 8005b3c:	4b61      	ldr	r3, [pc, #388]	; (8005cc4 <USB_EPStartXfer+0x48c>)
 8005b3e:	4013      	ands	r3, r2
 8005b40:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005b42:	69bb      	ldr	r3, [r7, #24]
 8005b44:	015a      	lsls	r2, r3, #5
 8005b46:	69fb      	ldr	r3, [r7, #28]
 8005b48:	4413      	add	r3, r2
 8005b4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b4e:	691a      	ldr	r2, [r3, #16]
 8005b50:	69bb      	ldr	r3, [r7, #24]
 8005b52:	0159      	lsls	r1, r3, #5
 8005b54:	69fb      	ldr	r3, [r7, #28]
 8005b56:	440b      	add	r3, r1
 8005b58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b5c:	4619      	mov	r1, r3
 8005b5e:	4b5a      	ldr	r3, [pc, #360]	; (8005cc8 <USB_EPStartXfer+0x490>)
 8005b60:	4013      	ands	r3, r2
 8005b62:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	695b      	ldr	r3, [r3, #20]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d123      	bne.n	8005bb4 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005b6c:	69bb      	ldr	r3, [r7, #24]
 8005b6e:	015a      	lsls	r2, r3, #5
 8005b70:	69fb      	ldr	r3, [r7, #28]
 8005b72:	4413      	add	r3, r2
 8005b74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b78:	691a      	ldr	r2, [r3, #16]
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	689b      	ldr	r3, [r3, #8]
 8005b7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b82:	69b9      	ldr	r1, [r7, #24]
 8005b84:	0148      	lsls	r0, r1, #5
 8005b86:	69f9      	ldr	r1, [r7, #28]
 8005b88:	4401      	add	r1, r0
 8005b8a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005b92:	69bb      	ldr	r3, [r7, #24]
 8005b94:	015a      	lsls	r2, r3, #5
 8005b96:	69fb      	ldr	r3, [r7, #28]
 8005b98:	4413      	add	r3, r2
 8005b9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b9e:	691b      	ldr	r3, [r3, #16]
 8005ba0:	69ba      	ldr	r2, [r7, #24]
 8005ba2:	0151      	lsls	r1, r2, #5
 8005ba4:	69fa      	ldr	r2, [r7, #28]
 8005ba6:	440a      	add	r2, r1
 8005ba8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005bb0:	6113      	str	r3, [r2, #16]
 8005bb2:	e033      	b.n	8005c1c <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	695a      	ldr	r2, [r3, #20]
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	689b      	ldr	r3, [r3, #8]
 8005bbc:	4413      	add	r3, r2
 8005bbe:	1e5a      	subs	r2, r3, #1
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bc8:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005bca:	69bb      	ldr	r3, [r7, #24]
 8005bcc:	015a      	lsls	r2, r3, #5
 8005bce:	69fb      	ldr	r3, [r7, #28]
 8005bd0:	4413      	add	r3, r2
 8005bd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bd6:	691a      	ldr	r2, [r3, #16]
 8005bd8:	8afb      	ldrh	r3, [r7, #22]
 8005bda:	04d9      	lsls	r1, r3, #19
 8005bdc:	4b3b      	ldr	r3, [pc, #236]	; (8005ccc <USB_EPStartXfer+0x494>)
 8005bde:	400b      	ands	r3, r1
 8005be0:	69b9      	ldr	r1, [r7, #24]
 8005be2:	0148      	lsls	r0, r1, #5
 8005be4:	69f9      	ldr	r1, [r7, #28]
 8005be6:	4401      	add	r1, r0
 8005be8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005bec:	4313      	orrs	r3, r2
 8005bee:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005bf0:	69bb      	ldr	r3, [r7, #24]
 8005bf2:	015a      	lsls	r2, r3, #5
 8005bf4:	69fb      	ldr	r3, [r7, #28]
 8005bf6:	4413      	add	r3, r2
 8005bf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bfc:	691a      	ldr	r2, [r3, #16]
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	8af9      	ldrh	r1, [r7, #22]
 8005c04:	fb01 f303 	mul.w	r3, r1, r3
 8005c08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c0c:	69b9      	ldr	r1, [r7, #24]
 8005c0e:	0148      	lsls	r0, r1, #5
 8005c10:	69f9      	ldr	r1, [r7, #28]
 8005c12:	4401      	add	r1, r0
 8005c14:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005c1c:	79fb      	ldrb	r3, [r7, #7]
 8005c1e:	2b01      	cmp	r3, #1
 8005c20:	d10d      	bne.n	8005c3e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	68db      	ldr	r3, [r3, #12]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d009      	beq.n	8005c3e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	68d9      	ldr	r1, [r3, #12]
 8005c2e:	69bb      	ldr	r3, [r7, #24]
 8005c30:	015a      	lsls	r2, r3, #5
 8005c32:	69fb      	ldr	r3, [r7, #28]
 8005c34:	4413      	add	r3, r2
 8005c36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c3a:	460a      	mov	r2, r1
 8005c3c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	78db      	ldrb	r3, [r3, #3]
 8005c42:	2b01      	cmp	r3, #1
 8005c44:	d128      	bne.n	8005c98 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005c46:	69fb      	ldr	r3, [r7, #28]
 8005c48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c4c:	689b      	ldr	r3, [r3, #8]
 8005c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d110      	bne.n	8005c78 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005c56:	69bb      	ldr	r3, [r7, #24]
 8005c58:	015a      	lsls	r2, r3, #5
 8005c5a:	69fb      	ldr	r3, [r7, #28]
 8005c5c:	4413      	add	r3, r2
 8005c5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	69ba      	ldr	r2, [r7, #24]
 8005c66:	0151      	lsls	r1, r2, #5
 8005c68:	69fa      	ldr	r2, [r7, #28]
 8005c6a:	440a      	add	r2, r1
 8005c6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c70:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005c74:	6013      	str	r3, [r2, #0]
 8005c76:	e00f      	b.n	8005c98 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005c78:	69bb      	ldr	r3, [r7, #24]
 8005c7a:	015a      	lsls	r2, r3, #5
 8005c7c:	69fb      	ldr	r3, [r7, #28]
 8005c7e:	4413      	add	r3, r2
 8005c80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	69ba      	ldr	r2, [r7, #24]
 8005c88:	0151      	lsls	r1, r2, #5
 8005c8a:	69fa      	ldr	r2, [r7, #28]
 8005c8c:	440a      	add	r2, r1
 8005c8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c96:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005c98:	69bb      	ldr	r3, [r7, #24]
 8005c9a:	015a      	lsls	r2, r3, #5
 8005c9c:	69fb      	ldr	r3, [r7, #28]
 8005c9e:	4413      	add	r3, r2
 8005ca0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	69ba      	ldr	r2, [r7, #24]
 8005ca8:	0151      	lsls	r1, r2, #5
 8005caa:	69fa      	ldr	r2, [r7, #28]
 8005cac:	440a      	add	r2, r1
 8005cae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cb2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005cb6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005cb8:	2300      	movs	r3, #0
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3720      	adds	r7, #32
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}
 8005cc2:	bf00      	nop
 8005cc4:	fff80000 	.word	0xfff80000
 8005cc8:	e007ffff 	.word	0xe007ffff
 8005ccc:	1ff80000 	.word	0x1ff80000

08005cd0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b087      	sub	sp, #28
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	60f8      	str	r0, [r7, #12]
 8005cd8:	60b9      	str	r1, [r7, #8]
 8005cda:	4613      	mov	r3, r2
 8005cdc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	781b      	ldrb	r3, [r3, #0]
 8005ce6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	785b      	ldrb	r3, [r3, #1]
 8005cec:	2b01      	cmp	r3, #1
 8005cee:	f040 80cd 	bne.w	8005e8c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	695b      	ldr	r3, [r3, #20]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d132      	bne.n	8005d60 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	015a      	lsls	r2, r3, #5
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	4413      	add	r3, r2
 8005d02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d06:	691a      	ldr	r2, [r3, #16]
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	0159      	lsls	r1, r3, #5
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	440b      	add	r3, r1
 8005d10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d14:	4619      	mov	r1, r3
 8005d16:	4b98      	ldr	r3, [pc, #608]	; (8005f78 <USB_EP0StartXfer+0x2a8>)
 8005d18:	4013      	ands	r3, r2
 8005d1a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	015a      	lsls	r2, r3, #5
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	4413      	add	r3, r2
 8005d24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d28:	691b      	ldr	r3, [r3, #16]
 8005d2a:	693a      	ldr	r2, [r7, #16]
 8005d2c:	0151      	lsls	r1, r2, #5
 8005d2e:	697a      	ldr	r2, [r7, #20]
 8005d30:	440a      	add	r2, r1
 8005d32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d36:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005d3a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	015a      	lsls	r2, r3, #5
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	4413      	add	r3, r2
 8005d44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d48:	691a      	ldr	r2, [r3, #16]
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	0159      	lsls	r1, r3, #5
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	440b      	add	r3, r1
 8005d52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d56:	4619      	mov	r1, r3
 8005d58:	4b88      	ldr	r3, [pc, #544]	; (8005f7c <USB_EP0StartXfer+0x2ac>)
 8005d5a:	4013      	ands	r3, r2
 8005d5c:	610b      	str	r3, [r1, #16]
 8005d5e:	e04e      	b.n	8005dfe <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	015a      	lsls	r2, r3, #5
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	4413      	add	r3, r2
 8005d68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d6c:	691a      	ldr	r2, [r3, #16]
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	0159      	lsls	r1, r3, #5
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	440b      	add	r3, r1
 8005d76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d7a:	4619      	mov	r1, r3
 8005d7c:	4b7f      	ldr	r3, [pc, #508]	; (8005f7c <USB_EP0StartXfer+0x2ac>)
 8005d7e:	4013      	ands	r3, r2
 8005d80:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	015a      	lsls	r2, r3, #5
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	4413      	add	r3, r2
 8005d8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d8e:	691a      	ldr	r2, [r3, #16]
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	0159      	lsls	r1, r3, #5
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	440b      	add	r3, r1
 8005d98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d9c:	4619      	mov	r1, r3
 8005d9e:	4b76      	ldr	r3, [pc, #472]	; (8005f78 <USB_EP0StartXfer+0x2a8>)
 8005da0:	4013      	ands	r3, r2
 8005da2:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	695a      	ldr	r2, [r3, #20]
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	429a      	cmp	r2, r3
 8005dae:	d903      	bls.n	8005db8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	689a      	ldr	r2, [r3, #8]
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	015a      	lsls	r2, r3, #5
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	4413      	add	r3, r2
 8005dc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dc4:	691b      	ldr	r3, [r3, #16]
 8005dc6:	693a      	ldr	r2, [r7, #16]
 8005dc8:	0151      	lsls	r1, r2, #5
 8005dca:	697a      	ldr	r2, [r7, #20]
 8005dcc:	440a      	add	r2, r1
 8005dce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dd2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005dd6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	015a      	lsls	r2, r3, #5
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	4413      	add	r3, r2
 8005de0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005de4:	691a      	ldr	r2, [r3, #16]
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	695b      	ldr	r3, [r3, #20]
 8005dea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005dee:	6939      	ldr	r1, [r7, #16]
 8005df0:	0148      	lsls	r0, r1, #5
 8005df2:	6979      	ldr	r1, [r7, #20]
 8005df4:	4401      	add	r1, r0
 8005df6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005dfe:	79fb      	ldrb	r3, [r7, #7]
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d11e      	bne.n	8005e42 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	691b      	ldr	r3, [r3, #16]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d009      	beq.n	8005e20 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005e0c:	693b      	ldr	r3, [r7, #16]
 8005e0e:	015a      	lsls	r2, r3, #5
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	4413      	add	r3, r2
 8005e14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e18:	461a      	mov	r2, r3
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	691b      	ldr	r3, [r3, #16]
 8005e1e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	015a      	lsls	r2, r3, #5
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	4413      	add	r3, r2
 8005e28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	693a      	ldr	r2, [r7, #16]
 8005e30:	0151      	lsls	r1, r2, #5
 8005e32:	697a      	ldr	r2, [r7, #20]
 8005e34:	440a      	add	r2, r1
 8005e36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e3a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005e3e:	6013      	str	r3, [r2, #0]
 8005e40:	e092      	b.n	8005f68 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	015a      	lsls	r2, r3, #5
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	4413      	add	r3, r2
 8005e4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	693a      	ldr	r2, [r7, #16]
 8005e52:	0151      	lsls	r1, r2, #5
 8005e54:	697a      	ldr	r2, [r7, #20]
 8005e56:	440a      	add	r2, r1
 8005e58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e5c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005e60:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	695b      	ldr	r3, [r3, #20]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d07e      	beq.n	8005f68 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	781b      	ldrb	r3, [r3, #0]
 8005e76:	f003 030f 	and.w	r3, r3, #15
 8005e7a:	2101      	movs	r1, #1
 8005e7c:	fa01 f303 	lsl.w	r3, r1, r3
 8005e80:	6979      	ldr	r1, [r7, #20]
 8005e82:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e86:	4313      	orrs	r3, r2
 8005e88:	634b      	str	r3, [r1, #52]	; 0x34
 8005e8a:	e06d      	b.n	8005f68 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	015a      	lsls	r2, r3, #5
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	4413      	add	r3, r2
 8005e94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e98:	691a      	ldr	r2, [r3, #16]
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	0159      	lsls	r1, r3, #5
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	440b      	add	r3, r1
 8005ea2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ea6:	4619      	mov	r1, r3
 8005ea8:	4b34      	ldr	r3, [pc, #208]	; (8005f7c <USB_EP0StartXfer+0x2ac>)
 8005eaa:	4013      	ands	r3, r2
 8005eac:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	015a      	lsls	r2, r3, #5
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	4413      	add	r3, r2
 8005eb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eba:	691a      	ldr	r2, [r3, #16]
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	0159      	lsls	r1, r3, #5
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	440b      	add	r3, r1
 8005ec4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ec8:	4619      	mov	r1, r3
 8005eca:	4b2b      	ldr	r3, [pc, #172]	; (8005f78 <USB_EP0StartXfer+0x2a8>)
 8005ecc:	4013      	ands	r3, r2
 8005ece:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	695b      	ldr	r3, [r3, #20]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d003      	beq.n	8005ee0 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	689a      	ldr	r2, [r3, #8]
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005ee0:	693b      	ldr	r3, [r7, #16]
 8005ee2:	015a      	lsls	r2, r3, #5
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	4413      	add	r3, r2
 8005ee8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eec:	691b      	ldr	r3, [r3, #16]
 8005eee:	693a      	ldr	r2, [r7, #16]
 8005ef0:	0151      	lsls	r1, r2, #5
 8005ef2:	697a      	ldr	r2, [r7, #20]
 8005ef4:	440a      	add	r2, r1
 8005ef6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005efa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005efe:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	015a      	lsls	r2, r3, #5
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	4413      	add	r3, r2
 8005f08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f0c:	691a      	ldr	r2, [r3, #16]
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	689b      	ldr	r3, [r3, #8]
 8005f12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f16:	6939      	ldr	r1, [r7, #16]
 8005f18:	0148      	lsls	r0, r1, #5
 8005f1a:	6979      	ldr	r1, [r7, #20]
 8005f1c:	4401      	add	r1, r0
 8005f1e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005f22:	4313      	orrs	r3, r2
 8005f24:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005f26:	79fb      	ldrb	r3, [r7, #7]
 8005f28:	2b01      	cmp	r3, #1
 8005f2a:	d10d      	bne.n	8005f48 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	68db      	ldr	r3, [r3, #12]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d009      	beq.n	8005f48 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	68d9      	ldr	r1, [r3, #12]
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	015a      	lsls	r2, r3, #5
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	4413      	add	r3, r2
 8005f40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f44:	460a      	mov	r2, r1
 8005f46:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	015a      	lsls	r2, r3, #5
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	4413      	add	r3, r2
 8005f50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	693a      	ldr	r2, [r7, #16]
 8005f58:	0151      	lsls	r1, r2, #5
 8005f5a:	697a      	ldr	r2, [r7, #20]
 8005f5c:	440a      	add	r2, r1
 8005f5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f62:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005f66:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005f68:	2300      	movs	r3, #0
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	371c      	adds	r7, #28
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f74:	4770      	bx	lr
 8005f76:	bf00      	nop
 8005f78:	e007ffff 	.word	0xe007ffff
 8005f7c:	fff80000 	.word	0xfff80000

08005f80 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b089      	sub	sp, #36	; 0x24
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	60f8      	str	r0, [r7, #12]
 8005f88:	60b9      	str	r1, [r7, #8]
 8005f8a:	4611      	mov	r1, r2
 8005f8c:	461a      	mov	r2, r3
 8005f8e:	460b      	mov	r3, r1
 8005f90:	71fb      	strb	r3, [r7, #7]
 8005f92:	4613      	mov	r3, r2
 8005f94:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8005f9e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d11a      	bne.n	8005fdc <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005fa6:	88bb      	ldrh	r3, [r7, #4]
 8005fa8:	3303      	adds	r3, #3
 8005faa:	089b      	lsrs	r3, r3, #2
 8005fac:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005fae:	2300      	movs	r3, #0
 8005fb0:	61bb      	str	r3, [r7, #24]
 8005fb2:	e00f      	b.n	8005fd4 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005fb4:	79fb      	ldrb	r3, [r7, #7]
 8005fb6:	031a      	lsls	r2, r3, #12
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	4413      	add	r3, r2
 8005fbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fc0:	461a      	mov	r2, r3
 8005fc2:	69fb      	ldr	r3, [r7, #28]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005fc8:	69fb      	ldr	r3, [r7, #28]
 8005fca:	3304      	adds	r3, #4
 8005fcc:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005fce:	69bb      	ldr	r3, [r7, #24]
 8005fd0:	3301      	adds	r3, #1
 8005fd2:	61bb      	str	r3, [r7, #24]
 8005fd4:	69ba      	ldr	r2, [r7, #24]
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	429a      	cmp	r2, r3
 8005fda:	d3eb      	bcc.n	8005fb4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005fdc:	2300      	movs	r3, #0
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	3724      	adds	r7, #36	; 0x24
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe8:	4770      	bx	lr

08005fea <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005fea:	b480      	push	{r7}
 8005fec:	b089      	sub	sp, #36	; 0x24
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	60f8      	str	r0, [r7, #12]
 8005ff2:	60b9      	str	r1, [r7, #8]
 8005ff4:	4613      	mov	r3, r2
 8005ff6:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8006000:	88fb      	ldrh	r3, [r7, #6]
 8006002:	3303      	adds	r3, #3
 8006004:	089b      	lsrs	r3, r3, #2
 8006006:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8006008:	2300      	movs	r3, #0
 800600a:	61bb      	str	r3, [r7, #24]
 800600c:	e00b      	b.n	8006026 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800600e:	697b      	ldr	r3, [r7, #20]
 8006010:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006014:	681a      	ldr	r2, [r3, #0]
 8006016:	69fb      	ldr	r3, [r7, #28]
 8006018:	601a      	str	r2, [r3, #0]
    pDest++;
 800601a:	69fb      	ldr	r3, [r7, #28]
 800601c:	3304      	adds	r3, #4
 800601e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006020:	69bb      	ldr	r3, [r7, #24]
 8006022:	3301      	adds	r3, #1
 8006024:	61bb      	str	r3, [r7, #24]
 8006026:	69ba      	ldr	r2, [r7, #24]
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	429a      	cmp	r2, r3
 800602c:	d3ef      	bcc.n	800600e <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800602e:	69fb      	ldr	r3, [r7, #28]
}
 8006030:	4618      	mov	r0, r3
 8006032:	3724      	adds	r7, #36	; 0x24
 8006034:	46bd      	mov	sp, r7
 8006036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603a:	4770      	bx	lr

0800603c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800603c:	b480      	push	{r7}
 800603e:	b085      	sub	sp, #20
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
 8006044:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	781b      	ldrb	r3, [r3, #0]
 800604e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	785b      	ldrb	r3, [r3, #1]
 8006054:	2b01      	cmp	r3, #1
 8006056:	d12c      	bne.n	80060b2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	015a      	lsls	r2, r3, #5
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	4413      	add	r3, r2
 8006060:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	2b00      	cmp	r3, #0
 8006068:	db12      	blt.n	8006090 <USB_EPSetStall+0x54>
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d00f      	beq.n	8006090 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	015a      	lsls	r2, r3, #5
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	4413      	add	r3, r2
 8006078:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	68ba      	ldr	r2, [r7, #8]
 8006080:	0151      	lsls	r1, r2, #5
 8006082:	68fa      	ldr	r2, [r7, #12]
 8006084:	440a      	add	r2, r1
 8006086:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800608a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800608e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	015a      	lsls	r2, r3, #5
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	4413      	add	r3, r2
 8006098:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	68ba      	ldr	r2, [r7, #8]
 80060a0:	0151      	lsls	r1, r2, #5
 80060a2:	68fa      	ldr	r2, [r7, #12]
 80060a4:	440a      	add	r2, r1
 80060a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060aa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80060ae:	6013      	str	r3, [r2, #0]
 80060b0:	e02b      	b.n	800610a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	015a      	lsls	r2, r3, #5
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	4413      	add	r3, r2
 80060ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	db12      	blt.n	80060ea <USB_EPSetStall+0xae>
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d00f      	beq.n	80060ea <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	015a      	lsls	r2, r3, #5
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	4413      	add	r3, r2
 80060d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	68ba      	ldr	r2, [r7, #8]
 80060da:	0151      	lsls	r1, r2, #5
 80060dc:	68fa      	ldr	r2, [r7, #12]
 80060de:	440a      	add	r2, r1
 80060e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060e4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80060e8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	015a      	lsls	r2, r3, #5
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	4413      	add	r3, r2
 80060f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	68ba      	ldr	r2, [r7, #8]
 80060fa:	0151      	lsls	r1, r2, #5
 80060fc:	68fa      	ldr	r2, [r7, #12]
 80060fe:	440a      	add	r2, r1
 8006100:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006104:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006108:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800610a:	2300      	movs	r3, #0
}
 800610c:	4618      	mov	r0, r3
 800610e:	3714      	adds	r7, #20
 8006110:	46bd      	mov	sp, r7
 8006112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006116:	4770      	bx	lr

08006118 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006118:	b480      	push	{r7}
 800611a:	b085      	sub	sp, #20
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
 8006120:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	781b      	ldrb	r3, [r3, #0]
 800612a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	785b      	ldrb	r3, [r3, #1]
 8006130:	2b01      	cmp	r3, #1
 8006132:	d128      	bne.n	8006186 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	015a      	lsls	r2, r3, #5
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	4413      	add	r3, r2
 800613c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	68ba      	ldr	r2, [r7, #8]
 8006144:	0151      	lsls	r1, r2, #5
 8006146:	68fa      	ldr	r2, [r7, #12]
 8006148:	440a      	add	r2, r1
 800614a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800614e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006152:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	78db      	ldrb	r3, [r3, #3]
 8006158:	2b03      	cmp	r3, #3
 800615a:	d003      	beq.n	8006164 <USB_EPClearStall+0x4c>
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	78db      	ldrb	r3, [r3, #3]
 8006160:	2b02      	cmp	r3, #2
 8006162:	d138      	bne.n	80061d6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	015a      	lsls	r2, r3, #5
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	4413      	add	r3, r2
 800616c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	68ba      	ldr	r2, [r7, #8]
 8006174:	0151      	lsls	r1, r2, #5
 8006176:	68fa      	ldr	r2, [r7, #12]
 8006178:	440a      	add	r2, r1
 800617a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800617e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006182:	6013      	str	r3, [r2, #0]
 8006184:	e027      	b.n	80061d6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	015a      	lsls	r2, r3, #5
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	4413      	add	r3, r2
 800618e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	68ba      	ldr	r2, [r7, #8]
 8006196:	0151      	lsls	r1, r2, #5
 8006198:	68fa      	ldr	r2, [r7, #12]
 800619a:	440a      	add	r2, r1
 800619c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061a0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80061a4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	78db      	ldrb	r3, [r3, #3]
 80061aa:	2b03      	cmp	r3, #3
 80061ac:	d003      	beq.n	80061b6 <USB_EPClearStall+0x9e>
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	78db      	ldrb	r3, [r3, #3]
 80061b2:	2b02      	cmp	r3, #2
 80061b4:	d10f      	bne.n	80061d6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	015a      	lsls	r2, r3, #5
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	4413      	add	r3, r2
 80061be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	68ba      	ldr	r2, [r7, #8]
 80061c6:	0151      	lsls	r1, r2, #5
 80061c8:	68fa      	ldr	r2, [r7, #12]
 80061ca:	440a      	add	r2, r1
 80061cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061d4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80061d6:	2300      	movs	r3, #0
}
 80061d8:	4618      	mov	r0, r3
 80061da:	3714      	adds	r7, #20
 80061dc:	46bd      	mov	sp, r7
 80061de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e2:	4770      	bx	lr

080061e4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80061e4:	b480      	push	{r7}
 80061e6:	b085      	sub	sp, #20
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
 80061ec:	460b      	mov	r3, r1
 80061ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	68fa      	ldr	r2, [r7, #12]
 80061fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006202:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006206:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800620e:	681a      	ldr	r2, [r3, #0]
 8006210:	78fb      	ldrb	r3, [r7, #3]
 8006212:	011b      	lsls	r3, r3, #4
 8006214:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006218:	68f9      	ldr	r1, [r7, #12]
 800621a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800621e:	4313      	orrs	r3, r2
 8006220:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006222:	2300      	movs	r3, #0
}
 8006224:	4618      	mov	r0, r3
 8006226:	3714      	adds	r7, #20
 8006228:	46bd      	mov	sp, r7
 800622a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622e:	4770      	bx	lr

08006230 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006230:	b480      	push	{r7}
 8006232:	b085      	sub	sp, #20
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	68fa      	ldr	r2, [r7, #12]
 8006246:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800624a:	f023 0303 	bic.w	r3, r3, #3
 800624e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	68fa      	ldr	r2, [r7, #12]
 800625a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800625e:	f023 0302 	bic.w	r3, r3, #2
 8006262:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006264:	2300      	movs	r3, #0
}
 8006266:	4618      	mov	r0, r3
 8006268:	3714      	adds	r7, #20
 800626a:	46bd      	mov	sp, r7
 800626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006270:	4770      	bx	lr

08006272 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006272:	b480      	push	{r7}
 8006274:	b085      	sub	sp, #20
 8006276:	af00      	add	r7, sp, #0
 8006278:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	68fa      	ldr	r2, [r7, #12]
 8006288:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800628c:	f023 0303 	bic.w	r3, r3, #3
 8006290:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	68fa      	ldr	r2, [r7, #12]
 800629c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80062a0:	f043 0302 	orr.w	r3, r3, #2
 80062a4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80062a6:	2300      	movs	r3, #0
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	3714      	adds	r7, #20
 80062ac:	46bd      	mov	sp, r7
 80062ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b2:	4770      	bx	lr

080062b4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80062b4:	b480      	push	{r7}
 80062b6:	b085      	sub	sp, #20
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	695b      	ldr	r3, [r3, #20]
 80062c0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	699b      	ldr	r3, [r3, #24]
 80062c6:	68fa      	ldr	r2, [r7, #12]
 80062c8:	4013      	ands	r3, r2
 80062ca:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80062cc:	68fb      	ldr	r3, [r7, #12]
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	3714      	adds	r7, #20
 80062d2:	46bd      	mov	sp, r7
 80062d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d8:	4770      	bx	lr

080062da <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80062da:	b480      	push	{r7}
 80062dc:	b085      	sub	sp, #20
 80062de:	af00      	add	r7, sp, #0
 80062e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062ec:	699b      	ldr	r3, [r3, #24]
 80062ee:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062f6:	69db      	ldr	r3, [r3, #28]
 80062f8:	68ba      	ldr	r2, [r7, #8]
 80062fa:	4013      	ands	r3, r2
 80062fc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	0c1b      	lsrs	r3, r3, #16
}
 8006302:	4618      	mov	r0, r3
 8006304:	3714      	adds	r7, #20
 8006306:	46bd      	mov	sp, r7
 8006308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630c:	4770      	bx	lr

0800630e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800630e:	b480      	push	{r7}
 8006310:	b085      	sub	sp, #20
 8006312:	af00      	add	r7, sp, #0
 8006314:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006320:	699b      	ldr	r3, [r3, #24]
 8006322:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800632a:	69db      	ldr	r3, [r3, #28]
 800632c:	68ba      	ldr	r2, [r7, #8]
 800632e:	4013      	ands	r3, r2
 8006330:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	b29b      	uxth	r3, r3
}
 8006336:	4618      	mov	r0, r3
 8006338:	3714      	adds	r7, #20
 800633a:	46bd      	mov	sp, r7
 800633c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006340:	4770      	bx	lr

08006342 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006342:	b480      	push	{r7}
 8006344:	b085      	sub	sp, #20
 8006346:	af00      	add	r7, sp, #0
 8006348:	6078      	str	r0, [r7, #4]
 800634a:	460b      	mov	r3, r1
 800634c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006352:	78fb      	ldrb	r3, [r7, #3]
 8006354:	015a      	lsls	r2, r3, #5
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	4413      	add	r3, r2
 800635a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800635e:	689b      	ldr	r3, [r3, #8]
 8006360:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006368:	695b      	ldr	r3, [r3, #20]
 800636a:	68ba      	ldr	r2, [r7, #8]
 800636c:	4013      	ands	r3, r2
 800636e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006370:	68bb      	ldr	r3, [r7, #8]
}
 8006372:	4618      	mov	r0, r3
 8006374:	3714      	adds	r7, #20
 8006376:	46bd      	mov	sp, r7
 8006378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637c:	4770      	bx	lr

0800637e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800637e:	b480      	push	{r7}
 8006380:	b087      	sub	sp, #28
 8006382:	af00      	add	r7, sp, #0
 8006384:	6078      	str	r0, [r7, #4]
 8006386:	460b      	mov	r3, r1
 8006388:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006394:	691b      	ldr	r3, [r3, #16]
 8006396:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800639e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063a0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80063a2:	78fb      	ldrb	r3, [r7, #3]
 80063a4:	f003 030f 	and.w	r3, r3, #15
 80063a8:	68fa      	ldr	r2, [r7, #12]
 80063aa:	fa22 f303 	lsr.w	r3, r2, r3
 80063ae:	01db      	lsls	r3, r3, #7
 80063b0:	b2db      	uxtb	r3, r3
 80063b2:	693a      	ldr	r2, [r7, #16]
 80063b4:	4313      	orrs	r3, r2
 80063b6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80063b8:	78fb      	ldrb	r3, [r7, #3]
 80063ba:	015a      	lsls	r2, r3, #5
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	4413      	add	r3, r2
 80063c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063c4:	689b      	ldr	r3, [r3, #8]
 80063c6:	693a      	ldr	r2, [r7, #16]
 80063c8:	4013      	ands	r3, r2
 80063ca:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80063cc:	68bb      	ldr	r3, [r7, #8]
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	371c      	adds	r7, #28
 80063d2:	46bd      	mov	sp, r7
 80063d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d8:	4770      	bx	lr

080063da <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80063da:	b480      	push	{r7}
 80063dc:	b083      	sub	sp, #12
 80063de:	af00      	add	r7, sp, #0
 80063e0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	695b      	ldr	r3, [r3, #20]
 80063e6:	f003 0301 	and.w	r3, r3, #1
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	370c      	adds	r7, #12
 80063ee:	46bd      	mov	sp, r7
 80063f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f4:	4770      	bx	lr
	...

080063f8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80063f8:	b480      	push	{r7}
 80063fa:	b085      	sub	sp, #20
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800640a:	681a      	ldr	r2, [r3, #0]
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006412:	4619      	mov	r1, r3
 8006414:	4b09      	ldr	r3, [pc, #36]	; (800643c <USB_ActivateSetup+0x44>)
 8006416:	4013      	ands	r3, r2
 8006418:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006420:	685b      	ldr	r3, [r3, #4]
 8006422:	68fa      	ldr	r2, [r7, #12]
 8006424:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006428:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800642c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800642e:	2300      	movs	r3, #0
}
 8006430:	4618      	mov	r0, r3
 8006432:	3714      	adds	r7, #20
 8006434:	46bd      	mov	sp, r7
 8006436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643a:	4770      	bx	lr
 800643c:	fffff800 	.word	0xfffff800

08006440 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006440:	b480      	push	{r7}
 8006442:	b087      	sub	sp, #28
 8006444:	af00      	add	r7, sp, #0
 8006446:	60f8      	str	r0, [r7, #12]
 8006448:	460b      	mov	r3, r1
 800644a:	607a      	str	r2, [r7, #4]
 800644c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	333c      	adds	r3, #60	; 0x3c
 8006456:	3304      	adds	r3, #4
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	4a26      	ldr	r2, [pc, #152]	; (80064f8 <USB_EP0_OutStart+0xb8>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d90a      	bls.n	800647a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006470:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006474:	d101      	bne.n	800647a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006476:	2300      	movs	r3, #0
 8006478:	e037      	b.n	80064ea <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006480:	461a      	mov	r2, r3
 8006482:	2300      	movs	r3, #0
 8006484:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800648c:	691b      	ldr	r3, [r3, #16]
 800648e:	697a      	ldr	r2, [r7, #20]
 8006490:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006494:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006498:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064a0:	691b      	ldr	r3, [r3, #16]
 80064a2:	697a      	ldr	r2, [r7, #20]
 80064a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064a8:	f043 0318 	orr.w	r3, r3, #24
 80064ac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064b4:	691b      	ldr	r3, [r3, #16]
 80064b6:	697a      	ldr	r2, [r7, #20]
 80064b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064bc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80064c0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80064c2:	7afb      	ldrb	r3, [r7, #11]
 80064c4:	2b01      	cmp	r3, #1
 80064c6:	d10f      	bne.n	80064e8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064ce:	461a      	mov	r2, r3
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80064d4:	697b      	ldr	r3, [r7, #20]
 80064d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	697a      	ldr	r2, [r7, #20]
 80064de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064e2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80064e6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80064e8:	2300      	movs	r3, #0
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	371c      	adds	r7, #28
 80064ee:	46bd      	mov	sp, r7
 80064f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f4:	4770      	bx	lr
 80064f6:	bf00      	nop
 80064f8:	4f54300a 	.word	0x4f54300a

080064fc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b085      	sub	sp, #20
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006504:	2300      	movs	r3, #0
 8006506:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	3301      	adds	r3, #1
 800650c:	60fb      	str	r3, [r7, #12]
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	4a13      	ldr	r2, [pc, #76]	; (8006560 <USB_CoreReset+0x64>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d901      	bls.n	800651a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006516:	2303      	movs	r3, #3
 8006518:	e01b      	b.n	8006552 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	691b      	ldr	r3, [r3, #16]
 800651e:	2b00      	cmp	r3, #0
 8006520:	daf2      	bge.n	8006508 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006522:	2300      	movs	r3, #0
 8006524:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	691b      	ldr	r3, [r3, #16]
 800652a:	f043 0201 	orr.w	r2, r3, #1
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	3301      	adds	r3, #1
 8006536:	60fb      	str	r3, [r7, #12]
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	4a09      	ldr	r2, [pc, #36]	; (8006560 <USB_CoreReset+0x64>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d901      	bls.n	8006544 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006540:	2303      	movs	r3, #3
 8006542:	e006      	b.n	8006552 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	691b      	ldr	r3, [r3, #16]
 8006548:	f003 0301 	and.w	r3, r3, #1
 800654c:	2b01      	cmp	r3, #1
 800654e:	d0f0      	beq.n	8006532 <USB_CoreReset+0x36>

  return HAL_OK;
 8006550:	2300      	movs	r3, #0
}
 8006552:	4618      	mov	r0, r3
 8006554:	3714      	adds	r7, #20
 8006556:	46bd      	mov	sp, r7
 8006558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655c:	4770      	bx	lr
 800655e:	bf00      	nop
 8006560:	00030d40 	.word	0x00030d40

08006564 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b084      	sub	sp, #16
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
 800656c:	460b      	mov	r3, r1
 800656e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006570:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006574:	f002 fa1c 	bl	80089b0 <malloc>
 8006578:	4603      	mov	r3, r0
 800657a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d105      	bne.n	800658e <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2200      	movs	r2, #0
 8006586:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800658a:	2302      	movs	r3, #2
 800658c:	e066      	b.n	800665c <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	68fa      	ldr	r2, [r7, #12]
 8006592:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	7c1b      	ldrb	r3, [r3, #16]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d119      	bne.n	80065d2 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800659e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80065a2:	2202      	movs	r2, #2
 80065a4:	2181      	movs	r1, #129	; 0x81
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f002 f835 	bl	8008616 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2201      	movs	r2, #1
 80065b0:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80065b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80065b6:	2202      	movs	r2, #2
 80065b8:	2101      	movs	r1, #1
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f002 f82b 	bl	8008616 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2201      	movs	r2, #1
 80065c4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2210      	movs	r2, #16
 80065cc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80065d0:	e016      	b.n	8006600 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80065d2:	2340      	movs	r3, #64	; 0x40
 80065d4:	2202      	movs	r2, #2
 80065d6:	2181      	movs	r1, #129	; 0x81
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f002 f81c 	bl	8008616 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2201      	movs	r2, #1
 80065e2:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80065e4:	2340      	movs	r3, #64	; 0x40
 80065e6:	2202      	movs	r2, #2
 80065e8:	2101      	movs	r1, #1
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f002 f813 	bl	8008616 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2201      	movs	r2, #1
 80065f4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2210      	movs	r2, #16
 80065fc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006600:	2308      	movs	r3, #8
 8006602:	2203      	movs	r2, #3
 8006604:	2182      	movs	r1, #130	; 0x82
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f002 f805 	bl	8008616 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2201      	movs	r2, #1
 8006610:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	2200      	movs	r2, #0
 8006622:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	2200      	movs	r2, #0
 800662a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	7c1b      	ldrb	r3, [r3, #16]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d109      	bne.n	800664a <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800663c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006640:	2101      	movs	r1, #1
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f002 f8d6 	bl	80087f4 <USBD_LL_PrepareReceive>
 8006648:	e007      	b.n	800665a <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006650:	2340      	movs	r3, #64	; 0x40
 8006652:	2101      	movs	r1, #1
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f002 f8cd 	bl	80087f4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800665a:	2300      	movs	r3, #0
}
 800665c:	4618      	mov	r0, r3
 800665e:	3710      	adds	r7, #16
 8006660:	46bd      	mov	sp, r7
 8006662:	bd80      	pop	{r7, pc}

08006664 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b084      	sub	sp, #16
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
 800666c:	460b      	mov	r3, r1
 800666e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8006670:	2300      	movs	r3, #0
 8006672:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006674:	2181      	movs	r1, #129	; 0x81
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f001 fff3 	bl	8008662 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2200      	movs	r2, #0
 8006680:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006682:	2101      	movs	r1, #1
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	f001 ffec 	bl	8008662 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2200      	movs	r2, #0
 800668e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006692:	2182      	movs	r1, #130	; 0x82
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	f001 ffe4 	bl	8008662 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2200      	movs	r2, #0
 800669e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2200      	movs	r2, #0
 80066a6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d00e      	beq.n	80066d2 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80066c4:	4618      	mov	r0, r3
 80066c6:	f002 f97b 	bl	80089c0 <free>
    pdev->pClassData = NULL;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2200      	movs	r2, #0
 80066ce:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 80066d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	3710      	adds	r7, #16
 80066d8:	46bd      	mov	sp, r7
 80066da:	bd80      	pop	{r7, pc}

080066dc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b086      	sub	sp, #24
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
 80066e4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80066ec:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80066ee:	2300      	movs	r3, #0
 80066f0:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80066f2:	2300      	movs	r3, #0
 80066f4:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 80066f6:	2300      	movs	r3, #0
 80066f8:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	781b      	ldrb	r3, [r3, #0]
 80066fe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006702:	2b00      	cmp	r3, #0
 8006704:	d03a      	beq.n	800677c <USBD_CDC_Setup+0xa0>
 8006706:	2b20      	cmp	r3, #32
 8006708:	f040 8097 	bne.w	800683a <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	88db      	ldrh	r3, [r3, #6]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d029      	beq.n	8006768 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	781b      	ldrb	r3, [r3, #0]
 8006718:	b25b      	sxtb	r3, r3
 800671a:	2b00      	cmp	r3, #0
 800671c:	da11      	bge.n	8006742 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006724:	689b      	ldr	r3, [r3, #8]
 8006726:	683a      	ldr	r2, [r7, #0]
 8006728:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 800672a:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800672c:	683a      	ldr	r2, [r7, #0]
 800672e:	88d2      	ldrh	r2, [r2, #6]
 8006730:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006732:	6939      	ldr	r1, [r7, #16]
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	88db      	ldrh	r3, [r3, #6]
 8006738:	461a      	mov	r2, r3
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f001 fad6 	bl	8007cec <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8006740:	e082      	b.n	8006848 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	785a      	ldrb	r2, [r3, #1]
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	88db      	ldrh	r3, [r3, #6]
 8006750:	b2da      	uxtb	r2, r3
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006758:	6939      	ldr	r1, [r7, #16]
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	88db      	ldrh	r3, [r3, #6]
 800675e:	461a      	mov	r2, r3
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f001 faef 	bl	8007d44 <USBD_CtlPrepareRx>
    break;
 8006766:	e06f      	b.n	8006848 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800676e:	689b      	ldr	r3, [r3, #8]
 8006770:	683a      	ldr	r2, [r7, #0]
 8006772:	7850      	ldrb	r0, [r2, #1]
 8006774:	2200      	movs	r2, #0
 8006776:	6839      	ldr	r1, [r7, #0]
 8006778:	4798      	blx	r3
    break;
 800677a:	e065      	b.n	8006848 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	785b      	ldrb	r3, [r3, #1]
 8006780:	2b0b      	cmp	r3, #11
 8006782:	d84f      	bhi.n	8006824 <USBD_CDC_Setup+0x148>
 8006784:	a201      	add	r2, pc, #4	; (adr r2, 800678c <USBD_CDC_Setup+0xb0>)
 8006786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800678a:	bf00      	nop
 800678c:	080067bd 	.word	0x080067bd
 8006790:	08006833 	.word	0x08006833
 8006794:	08006825 	.word	0x08006825
 8006798:	08006825 	.word	0x08006825
 800679c:	08006825 	.word	0x08006825
 80067a0:	08006825 	.word	0x08006825
 80067a4:	08006825 	.word	0x08006825
 80067a8:	08006825 	.word	0x08006825
 80067ac:	08006825 	.word	0x08006825
 80067b0:	08006825 	.word	0x08006825
 80067b4:	080067e5 	.word	0x080067e5
 80067b8:	0800680d 	.word	0x0800680d
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067c2:	2b03      	cmp	r3, #3
 80067c4:	d107      	bne.n	80067d6 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80067c6:	f107 030c 	add.w	r3, r7, #12
 80067ca:	2202      	movs	r2, #2
 80067cc:	4619      	mov	r1, r3
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	f001 fa8c 	bl	8007cec <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80067d4:	e030      	b.n	8006838 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 80067d6:	6839      	ldr	r1, [r7, #0]
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f001 fa16 	bl	8007c0a <USBD_CtlError>
        ret = USBD_FAIL;
 80067de:	2303      	movs	r3, #3
 80067e0:	75fb      	strb	r3, [r7, #23]
      break;
 80067e2:	e029      	b.n	8006838 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067ea:	2b03      	cmp	r3, #3
 80067ec:	d107      	bne.n	80067fe <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80067ee:	f107 030f 	add.w	r3, r7, #15
 80067f2:	2201      	movs	r2, #1
 80067f4:	4619      	mov	r1, r3
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f001 fa78 	bl	8007cec <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80067fc:	e01c      	b.n	8006838 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 80067fe:	6839      	ldr	r1, [r7, #0]
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f001 fa02 	bl	8007c0a <USBD_CtlError>
        ret = USBD_FAIL;
 8006806:	2303      	movs	r3, #3
 8006808:	75fb      	strb	r3, [r7, #23]
      break;
 800680a:	e015      	b.n	8006838 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006812:	2b03      	cmp	r3, #3
 8006814:	d00f      	beq.n	8006836 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8006816:	6839      	ldr	r1, [r7, #0]
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	f001 f9f6 	bl	8007c0a <USBD_CtlError>
        ret = USBD_FAIL;
 800681e:	2303      	movs	r3, #3
 8006820:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006822:	e008      	b.n	8006836 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8006824:	6839      	ldr	r1, [r7, #0]
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f001 f9ef 	bl	8007c0a <USBD_CtlError>
      ret = USBD_FAIL;
 800682c:	2303      	movs	r3, #3
 800682e:	75fb      	strb	r3, [r7, #23]
      break;
 8006830:	e002      	b.n	8006838 <USBD_CDC_Setup+0x15c>
      break;
 8006832:	bf00      	nop
 8006834:	e008      	b.n	8006848 <USBD_CDC_Setup+0x16c>
      break;
 8006836:	bf00      	nop
    }
    break;
 8006838:	e006      	b.n	8006848 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 800683a:	6839      	ldr	r1, [r7, #0]
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f001 f9e4 	bl	8007c0a <USBD_CtlError>
    ret = USBD_FAIL;
 8006842:	2303      	movs	r3, #3
 8006844:	75fb      	strb	r3, [r7, #23]
    break;
 8006846:	bf00      	nop
  }

  return (uint8_t)ret;
 8006848:	7dfb      	ldrb	r3, [r7, #23]
}
 800684a:	4618      	mov	r0, r3
 800684c:	3718      	adds	r7, #24
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}
 8006852:	bf00      	nop

08006854 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b084      	sub	sp, #16
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
 800685c:	460b      	mov	r3, r1
 800685e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006866:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800686e:	2b00      	cmp	r3, #0
 8006870:	d101      	bne.n	8006876 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006872:	2303      	movs	r3, #3
 8006874:	e049      	b.n	800690a <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800687c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800687e:	78fa      	ldrb	r2, [r7, #3]
 8006880:	6879      	ldr	r1, [r7, #4]
 8006882:	4613      	mov	r3, r2
 8006884:	009b      	lsls	r3, r3, #2
 8006886:	4413      	add	r3, r2
 8006888:	009b      	lsls	r3, r3, #2
 800688a:	440b      	add	r3, r1
 800688c:	3318      	adds	r3, #24
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d029      	beq.n	80068e8 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006894:	78fa      	ldrb	r2, [r7, #3]
 8006896:	6879      	ldr	r1, [r7, #4]
 8006898:	4613      	mov	r3, r2
 800689a:	009b      	lsls	r3, r3, #2
 800689c:	4413      	add	r3, r2
 800689e:	009b      	lsls	r3, r3, #2
 80068a0:	440b      	add	r3, r1
 80068a2:	3318      	adds	r3, #24
 80068a4:	681a      	ldr	r2, [r3, #0]
 80068a6:	78f9      	ldrb	r1, [r7, #3]
 80068a8:	68f8      	ldr	r0, [r7, #12]
 80068aa:	460b      	mov	r3, r1
 80068ac:	00db      	lsls	r3, r3, #3
 80068ae:	1a5b      	subs	r3, r3, r1
 80068b0:	009b      	lsls	r3, r3, #2
 80068b2:	4403      	add	r3, r0
 80068b4:	3344      	adds	r3, #68	; 0x44
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	fbb2 f1f3 	udiv	r1, r2, r3
 80068bc:	fb03 f301 	mul.w	r3, r3, r1
 80068c0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d110      	bne.n	80068e8 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80068c6:	78fa      	ldrb	r2, [r7, #3]
 80068c8:	6879      	ldr	r1, [r7, #4]
 80068ca:	4613      	mov	r3, r2
 80068cc:	009b      	lsls	r3, r3, #2
 80068ce:	4413      	add	r3, r2
 80068d0:	009b      	lsls	r3, r3, #2
 80068d2:	440b      	add	r3, r1
 80068d4:	3318      	adds	r3, #24
 80068d6:	2200      	movs	r2, #0
 80068d8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80068da:	78f9      	ldrb	r1, [r7, #3]
 80068dc:	2300      	movs	r3, #0
 80068de:	2200      	movs	r2, #0
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f001 ff66 	bl	80087b2 <USBD_LL_Transmit>
 80068e6:	e00f      	b.n	8006908 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	2200      	movs	r2, #0
 80068ec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80068f6:	691b      	ldr	r3, [r3, #16]
 80068f8:	68ba      	ldr	r2, [r7, #8]
 80068fa:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80068fe:	68ba      	ldr	r2, [r7, #8]
 8006900:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006904:	78fa      	ldrb	r2, [r7, #3]
 8006906:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8006908:	2300      	movs	r3, #0
}
 800690a:	4618      	mov	r0, r3
 800690c:	3710      	adds	r7, #16
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}

08006912 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006912:	b580      	push	{r7, lr}
 8006914:	b084      	sub	sp, #16
 8006916:	af00      	add	r7, sp, #0
 8006918:	6078      	str	r0, [r7, #4]
 800691a:	460b      	mov	r3, r1
 800691c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006924:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800692c:	2b00      	cmp	r3, #0
 800692e:	d101      	bne.n	8006934 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006930:	2303      	movs	r3, #3
 8006932:	e015      	b.n	8006960 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006934:	78fb      	ldrb	r3, [r7, #3]
 8006936:	4619      	mov	r1, r3
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f001 ff7c 	bl	8008836 <USBD_LL_GetRxDataSize>
 800693e:	4602      	mov	r2, r0
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800694c:	68db      	ldr	r3, [r3, #12]
 800694e:	68fa      	ldr	r2, [r7, #12]
 8006950:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006954:	68fa      	ldr	r2, [r7, #12]
 8006956:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800695a:	4611      	mov	r1, r2
 800695c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800695e:	2300      	movs	r3, #0
}
 8006960:	4618      	mov	r0, r3
 8006962:	3710      	adds	r7, #16
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}

08006968 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b084      	sub	sp, #16
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006976:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800697e:	2b00      	cmp	r3, #0
 8006980:	d015      	beq.n	80069ae <USBD_CDC_EP0_RxReady+0x46>
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006988:	2bff      	cmp	r3, #255	; 0xff
 800698a:	d010      	beq.n	80069ae <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006992:	689b      	ldr	r3, [r3, #8]
 8006994:	68fa      	ldr	r2, [r7, #12]
 8006996:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800699a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800699c:	68fa      	ldr	r2, [r7, #12]
 800699e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80069a2:	b292      	uxth	r2, r2
 80069a4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	22ff      	movs	r2, #255	; 0xff
 80069aa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 80069ae:	2300      	movs	r3, #0
}
 80069b0:	4618      	mov	r0, r3
 80069b2:	3710      	adds	r7, #16
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bd80      	pop	{r7, pc}

080069b8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80069b8:	b480      	push	{r7}
 80069ba:	b083      	sub	sp, #12
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2243      	movs	r2, #67	; 0x43
 80069c4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80069c6:	4b03      	ldr	r3, [pc, #12]	; (80069d4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80069c8:	4618      	mov	r0, r3
 80069ca:	370c      	adds	r7, #12
 80069cc:	46bd      	mov	sp, r7
 80069ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d2:	4770      	bx	lr
 80069d4:	20000094 	.word	0x20000094

080069d8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80069d8:	b480      	push	{r7}
 80069da:	b083      	sub	sp, #12
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2243      	movs	r2, #67	; 0x43
 80069e4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80069e6:	4b03      	ldr	r3, [pc, #12]	; (80069f4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80069e8:	4618      	mov	r0, r3
 80069ea:	370c      	adds	r7, #12
 80069ec:	46bd      	mov	sp, r7
 80069ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f2:	4770      	bx	lr
 80069f4:	20000050 	.word	0x20000050

080069f8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b083      	sub	sp, #12
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2243      	movs	r2, #67	; 0x43
 8006a04:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8006a06:	4b03      	ldr	r3, [pc, #12]	; (8006a14 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006a08:	4618      	mov	r0, r3
 8006a0a:	370c      	adds	r7, #12
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a12:	4770      	bx	lr
 8006a14:	200000d8 	.word	0x200000d8

08006a18 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b083      	sub	sp, #12
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	220a      	movs	r2, #10
 8006a24:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006a26:	4b03      	ldr	r3, [pc, #12]	; (8006a34 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006a28:	4618      	mov	r0, r3
 8006a2a:	370c      	adds	r7, #12
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a32:	4770      	bx	lr
 8006a34:	2000000c 	.word	0x2000000c

08006a38 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b083      	sub	sp, #12
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
 8006a40:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d101      	bne.n	8006a4c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006a48:	2303      	movs	r3, #3
 8006a4a:	e004      	b.n	8006a56 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	683a      	ldr	r2, [r7, #0]
 8006a50:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8006a54:	2300      	movs	r3, #0
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	370c      	adds	r7, #12
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a60:	4770      	bx	lr

08006a62 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006a62:	b480      	push	{r7}
 8006a64:	b087      	sub	sp, #28
 8006a66:	af00      	add	r7, sp, #0
 8006a68:	60f8      	str	r0, [r7, #12]
 8006a6a:	60b9      	str	r1, [r7, #8]
 8006a6c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006a74:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	68ba      	ldr	r2, [r7, #8]
 8006a7a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006a7e:	697b      	ldr	r3, [r7, #20]
 8006a80:	687a      	ldr	r2, [r7, #4]
 8006a82:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006a86:	2300      	movs	r3, #0
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	371c      	adds	r7, #28
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a92:	4770      	bx	lr

08006a94 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b085      	sub	sp, #20
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
 8006a9c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006aa4:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	683a      	ldr	r2, [r7, #0]
 8006aaa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006aae:	2300      	movs	r3, #0
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3714      	adds	r7, #20
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aba:	4770      	bx	lr

08006abc <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b084      	sub	sp, #16
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006aca:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006acc:	2301      	movs	r3, #1
 8006ace:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d101      	bne.n	8006ade <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006ada:	2303      	movs	r3, #3
 8006adc:	e01a      	b.n	8006b14 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d114      	bne.n	8006b12 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	2201      	movs	r2, #1
 8006aec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006b06:	2181      	movs	r1, #129	; 0x81
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	f001 fe52 	bl	80087b2 <USBD_LL_Transmit>

    ret = USBD_OK;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006b12:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b14:	4618      	mov	r0, r3
 8006b16:	3710      	adds	r7, #16
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bd80      	pop	{r7, pc}

08006b1c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b084      	sub	sp, #16
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b2a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d101      	bne.n	8006b3a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006b36:	2303      	movs	r3, #3
 8006b38:	e016      	b.n	8006b68 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	7c1b      	ldrb	r3, [r3, #16]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d109      	bne.n	8006b56 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006b48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b4c:	2101      	movs	r1, #1
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f001 fe50 	bl	80087f4 <USBD_LL_PrepareReceive>
 8006b54:	e007      	b.n	8006b66 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006b5c:	2340      	movs	r3, #64	; 0x40
 8006b5e:	2101      	movs	r1, #1
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f001 fe47 	bl	80087f4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006b66:	2300      	movs	r3, #0
}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	3710      	adds	r7, #16
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bd80      	pop	{r7, pc}

08006b70 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b086      	sub	sp, #24
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	60f8      	str	r0, [r7, #12]
 8006b78:	60b9      	str	r1, [r7, #8]
 8006b7a:	4613      	mov	r3, r2
 8006b7c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d101      	bne.n	8006b88 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006b84:	2303      	movs	r3, #3
 8006b86:	e025      	b.n	8006bd4 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d003      	beq.n	8006b9a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	2200      	movs	r2, #0
 8006b96:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d003      	beq.n	8006bac <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d003      	beq.n	8006bba <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	68ba      	ldr	r2, [r7, #8]
 8006bb6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	2201      	movs	r2, #1
 8006bbe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	79fa      	ldrb	r2, [r7, #7]
 8006bc6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006bc8:	68f8      	ldr	r0, [r7, #12]
 8006bca:	f001 fcbd 	bl	8008548 <USBD_LL_Init>
 8006bce:	4603      	mov	r3, r0
 8006bd0:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006bd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	3718      	adds	r7, #24
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}

08006bdc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b084      	sub	sp, #16
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
 8006be4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006be6:	2300      	movs	r3, #0
 8006be8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d101      	bne.n	8006bf4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8006bf0:	2303      	movs	r3, #3
 8006bf2:	e010      	b.n	8006c16 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	683a      	ldr	r2, [r7, #0]
 8006bf8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c04:	f107 020e 	add.w	r2, r7, #14
 8006c08:	4610      	mov	r0, r2
 8006c0a:	4798      	blx	r3
 8006c0c:	4602      	mov	r2, r0
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8006c14:	2300      	movs	r3, #0
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3710      	adds	r7, #16
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}

08006c1e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006c1e:	b580      	push	{r7, lr}
 8006c20:	b082      	sub	sp, #8
 8006c22:	af00      	add	r7, sp, #0
 8006c24:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f001 fcda 	bl	80085e0 <USBD_LL_Start>
 8006c2c:	4603      	mov	r3, r0
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	3708      	adds	r7, #8
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd80      	pop	{r7, pc}

08006c36 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006c36:	b480      	push	{r7}
 8006c38:	b083      	sub	sp, #12
 8006c3a:	af00      	add	r7, sp, #0
 8006c3c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006c3e:	2300      	movs	r3, #0
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	370c      	adds	r7, #12
 8006c44:	46bd      	mov	sp, r7
 8006c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4a:	4770      	bx	lr

08006c4c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b084      	sub	sp, #16
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
 8006c54:	460b      	mov	r3, r1
 8006c56:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006c58:	2303      	movs	r3, #3
 8006c5a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d009      	beq.n	8006c7a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	78fa      	ldrb	r2, [r7, #3]
 8006c70:	4611      	mov	r1, r2
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	4798      	blx	r3
 8006c76:	4603      	mov	r3, r0
 8006c78:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006c7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	3710      	adds	r7, #16
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bd80      	pop	{r7, pc}

08006c84 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b082      	sub	sp, #8
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
 8006c8c:	460b      	mov	r3, r1
 8006c8e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d007      	beq.n	8006caa <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ca0:	685b      	ldr	r3, [r3, #4]
 8006ca2:	78fa      	ldrb	r2, [r7, #3]
 8006ca4:	4611      	mov	r1, r2
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	4798      	blx	r3
  }

  return USBD_OK;
 8006caa:	2300      	movs	r3, #0
}
 8006cac:	4618      	mov	r0, r3
 8006cae:	3708      	adds	r7, #8
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bd80      	pop	{r7, pc}

08006cb4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b084      	sub	sp, #16
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
 8006cbc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006cc4:	6839      	ldr	r1, [r7, #0]
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	f000 ff65 	bl	8007b96 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2201      	movs	r2, #1
 8006cd0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006cda:	461a      	mov	r2, r3
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006ce8:	f003 031f 	and.w	r3, r3, #31
 8006cec:	2b02      	cmp	r3, #2
 8006cee:	d01a      	beq.n	8006d26 <USBD_LL_SetupStage+0x72>
 8006cf0:	2b02      	cmp	r3, #2
 8006cf2:	d822      	bhi.n	8006d3a <USBD_LL_SetupStage+0x86>
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d002      	beq.n	8006cfe <USBD_LL_SetupStage+0x4a>
 8006cf8:	2b01      	cmp	r3, #1
 8006cfa:	d00a      	beq.n	8006d12 <USBD_LL_SetupStage+0x5e>
 8006cfc:	e01d      	b.n	8006d3a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006d04:	4619      	mov	r1, r3
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f000 fa18 	bl	800713c <USBD_StdDevReq>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	73fb      	strb	r3, [r7, #15]
      break;
 8006d10:	e020      	b.n	8006d54 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006d18:	4619      	mov	r1, r3
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f000 fa7c 	bl	8007218 <USBD_StdItfReq>
 8006d20:	4603      	mov	r3, r0
 8006d22:	73fb      	strb	r3, [r7, #15]
      break;
 8006d24:	e016      	b.n	8006d54 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006d2c:	4619      	mov	r1, r3
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f000 faba 	bl	80072a8 <USBD_StdEPReq>
 8006d34:	4603      	mov	r3, r0
 8006d36:	73fb      	strb	r3, [r7, #15]
      break;
 8006d38:	e00c      	b.n	8006d54 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006d40:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006d44:	b2db      	uxtb	r3, r3
 8006d46:	4619      	mov	r1, r3
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f001 fca9 	bl	80086a0 <USBD_LL_StallEP>
 8006d4e:	4603      	mov	r3, r0
 8006d50:	73fb      	strb	r3, [r7, #15]
      break;
 8006d52:	bf00      	nop
  }

  return ret;
 8006d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3710      	adds	r7, #16
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}

08006d5e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006d5e:	b580      	push	{r7, lr}
 8006d60:	b086      	sub	sp, #24
 8006d62:	af00      	add	r7, sp, #0
 8006d64:	60f8      	str	r0, [r7, #12]
 8006d66:	460b      	mov	r3, r1
 8006d68:	607a      	str	r2, [r7, #4]
 8006d6a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006d6c:	7afb      	ldrb	r3, [r7, #11]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d137      	bne.n	8006de2 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006d78:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006d80:	2b03      	cmp	r3, #3
 8006d82:	d14a      	bne.n	8006e1a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8006d84:	693b      	ldr	r3, [r7, #16]
 8006d86:	689a      	ldr	r2, [r3, #8]
 8006d88:	693b      	ldr	r3, [r7, #16]
 8006d8a:	68db      	ldr	r3, [r3, #12]
 8006d8c:	429a      	cmp	r2, r3
 8006d8e:	d913      	bls.n	8006db8 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	689a      	ldr	r2, [r3, #8]
 8006d94:	693b      	ldr	r3, [r7, #16]
 8006d96:	68db      	ldr	r3, [r3, #12]
 8006d98:	1ad2      	subs	r2, r2, r3
 8006d9a:	693b      	ldr	r3, [r7, #16]
 8006d9c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006d9e:	693b      	ldr	r3, [r7, #16]
 8006da0:	68da      	ldr	r2, [r3, #12]
 8006da2:	693b      	ldr	r3, [r7, #16]
 8006da4:	689b      	ldr	r3, [r3, #8]
 8006da6:	4293      	cmp	r3, r2
 8006da8:	bf28      	it	cs
 8006daa:	4613      	movcs	r3, r2
 8006dac:	461a      	mov	r2, r3
 8006dae:	6879      	ldr	r1, [r7, #4]
 8006db0:	68f8      	ldr	r0, [r7, #12]
 8006db2:	f000 ffe4 	bl	8007d7e <USBD_CtlContinueRx>
 8006db6:	e030      	b.n	8006e1a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dbe:	691b      	ldr	r3, [r3, #16]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d00a      	beq.n	8006dda <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006dca:	2b03      	cmp	r3, #3
 8006dcc:	d105      	bne.n	8006dda <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dd4:	691b      	ldr	r3, [r3, #16]
 8006dd6:	68f8      	ldr	r0, [r7, #12]
 8006dd8:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8006dda:	68f8      	ldr	r0, [r7, #12]
 8006ddc:	f000 ffe0 	bl	8007da0 <USBD_CtlSendStatus>
 8006de0:	e01b      	b.n	8006e1a <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006de8:	699b      	ldr	r3, [r3, #24]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d013      	beq.n	8006e16 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006df4:	2b03      	cmp	r3, #3
 8006df6:	d10e      	bne.n	8006e16 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dfe:	699b      	ldr	r3, [r3, #24]
 8006e00:	7afa      	ldrb	r2, [r7, #11]
 8006e02:	4611      	mov	r1, r2
 8006e04:	68f8      	ldr	r0, [r7, #12]
 8006e06:	4798      	blx	r3
 8006e08:	4603      	mov	r3, r0
 8006e0a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8006e0c:	7dfb      	ldrb	r3, [r7, #23]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d003      	beq.n	8006e1a <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8006e12:	7dfb      	ldrb	r3, [r7, #23]
 8006e14:	e002      	b.n	8006e1c <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006e16:	2303      	movs	r3, #3
 8006e18:	e000      	b.n	8006e1c <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8006e1a:	2300      	movs	r3, #0
}
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	3718      	adds	r7, #24
 8006e20:	46bd      	mov	sp, r7
 8006e22:	bd80      	pop	{r7, pc}

08006e24 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b086      	sub	sp, #24
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	60f8      	str	r0, [r7, #12]
 8006e2c:	460b      	mov	r3, r1
 8006e2e:	607a      	str	r2, [r7, #4]
 8006e30:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006e32:	7afb      	ldrb	r3, [r7, #11]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d16a      	bne.n	8006f0e <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	3314      	adds	r3, #20
 8006e3c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006e44:	2b02      	cmp	r3, #2
 8006e46:	d155      	bne.n	8006ef4 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8006e48:	693b      	ldr	r3, [r7, #16]
 8006e4a:	689a      	ldr	r2, [r3, #8]
 8006e4c:	693b      	ldr	r3, [r7, #16]
 8006e4e:	68db      	ldr	r3, [r3, #12]
 8006e50:	429a      	cmp	r2, r3
 8006e52:	d914      	bls.n	8006e7e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006e54:	693b      	ldr	r3, [r7, #16]
 8006e56:	689a      	ldr	r2, [r3, #8]
 8006e58:	693b      	ldr	r3, [r7, #16]
 8006e5a:	68db      	ldr	r3, [r3, #12]
 8006e5c:	1ad2      	subs	r2, r2, r3
 8006e5e:	693b      	ldr	r3, [r7, #16]
 8006e60:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006e62:	693b      	ldr	r3, [r7, #16]
 8006e64:	689b      	ldr	r3, [r3, #8]
 8006e66:	461a      	mov	r2, r3
 8006e68:	6879      	ldr	r1, [r7, #4]
 8006e6a:	68f8      	ldr	r0, [r7, #12]
 8006e6c:	f000 ff59 	bl	8007d22 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006e70:	2300      	movs	r3, #0
 8006e72:	2200      	movs	r2, #0
 8006e74:	2100      	movs	r1, #0
 8006e76:	68f8      	ldr	r0, [r7, #12]
 8006e78:	f001 fcbc 	bl	80087f4 <USBD_LL_PrepareReceive>
 8006e7c:	e03a      	b.n	8006ef4 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006e7e:	693b      	ldr	r3, [r7, #16]
 8006e80:	68da      	ldr	r2, [r3, #12]
 8006e82:	693b      	ldr	r3, [r7, #16]
 8006e84:	689b      	ldr	r3, [r3, #8]
 8006e86:	429a      	cmp	r2, r3
 8006e88:	d11c      	bne.n	8006ec4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	685a      	ldr	r2, [r3, #4]
 8006e8e:	693b      	ldr	r3, [r7, #16]
 8006e90:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006e92:	429a      	cmp	r2, r3
 8006e94:	d316      	bcc.n	8006ec4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006e96:	693b      	ldr	r3, [r7, #16]
 8006e98:	685a      	ldr	r2, [r3, #4]
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006ea0:	429a      	cmp	r2, r3
 8006ea2:	d20f      	bcs.n	8006ec4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	2100      	movs	r1, #0
 8006ea8:	68f8      	ldr	r0, [r7, #12]
 8006eaa:	f000 ff3a 	bl	8007d22 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	2200      	movs	r2, #0
 8006eba:	2100      	movs	r1, #0
 8006ebc:	68f8      	ldr	r0, [r7, #12]
 8006ebe:	f001 fc99 	bl	80087f4 <USBD_LL_PrepareReceive>
 8006ec2:	e017      	b.n	8006ef4 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006eca:	68db      	ldr	r3, [r3, #12]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d00a      	beq.n	8006ee6 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006ed6:	2b03      	cmp	r3, #3
 8006ed8:	d105      	bne.n	8006ee6 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ee0:	68db      	ldr	r3, [r3, #12]
 8006ee2:	68f8      	ldr	r0, [r7, #12]
 8006ee4:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006ee6:	2180      	movs	r1, #128	; 0x80
 8006ee8:	68f8      	ldr	r0, [r7, #12]
 8006eea:	f001 fbd9 	bl	80086a0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006eee:	68f8      	ldr	r0, [r7, #12]
 8006ef0:	f000 ff69 	bl	8007dc6 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006efa:	2b01      	cmp	r3, #1
 8006efc:	d123      	bne.n	8006f46 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8006efe:	68f8      	ldr	r0, [r7, #12]
 8006f00:	f7ff fe99 	bl	8006c36 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	2200      	movs	r2, #0
 8006f08:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006f0c:	e01b      	b.n	8006f46 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f14:	695b      	ldr	r3, [r3, #20]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d013      	beq.n	8006f42 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006f20:	2b03      	cmp	r3, #3
 8006f22:	d10e      	bne.n	8006f42 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f2a:	695b      	ldr	r3, [r3, #20]
 8006f2c:	7afa      	ldrb	r2, [r7, #11]
 8006f2e:	4611      	mov	r1, r2
 8006f30:	68f8      	ldr	r0, [r7, #12]
 8006f32:	4798      	blx	r3
 8006f34:	4603      	mov	r3, r0
 8006f36:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8006f38:	7dfb      	ldrb	r3, [r7, #23]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d003      	beq.n	8006f46 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8006f3e:	7dfb      	ldrb	r3, [r7, #23]
 8006f40:	e002      	b.n	8006f48 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006f42:	2303      	movs	r3, #3
 8006f44:	e000      	b.n	8006f48 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8006f46:	2300      	movs	r3, #0
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	3718      	adds	r7, #24
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bd80      	pop	{r7, pc}

08006f50 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b082      	sub	sp, #8
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2201      	movs	r2, #1
 8006f5c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2200      	movs	r2, #0
 8006f64:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2200      	movs	r2, #0
 8006f72:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d009      	beq.n	8006f94 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f86:	685b      	ldr	r3, [r3, #4]
 8006f88:	687a      	ldr	r2, [r7, #4]
 8006f8a:	6852      	ldr	r2, [r2, #4]
 8006f8c:	b2d2      	uxtb	r2, r2
 8006f8e:	4611      	mov	r1, r2
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006f94:	2340      	movs	r3, #64	; 0x40
 8006f96:	2200      	movs	r2, #0
 8006f98:	2100      	movs	r1, #0
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f001 fb3b 	bl	8008616 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2201      	movs	r2, #1
 8006fa4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2240      	movs	r2, #64	; 0x40
 8006fac:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006fb0:	2340      	movs	r3, #64	; 0x40
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	2180      	movs	r1, #128	; 0x80
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f001 fb2d 	bl	8008616 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2240      	movs	r2, #64	; 0x40
 8006fc6:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006fc8:	2300      	movs	r3, #0
}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	3708      	adds	r7, #8
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd80      	pop	{r7, pc}

08006fd2 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006fd2:	b480      	push	{r7}
 8006fd4:	b083      	sub	sp, #12
 8006fd6:	af00      	add	r7, sp, #0
 8006fd8:	6078      	str	r0, [r7, #4]
 8006fda:	460b      	mov	r3, r1
 8006fdc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	78fa      	ldrb	r2, [r7, #3]
 8006fe2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006fe4:	2300      	movs	r3, #0
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	370c      	adds	r7, #12
 8006fea:	46bd      	mov	sp, r7
 8006fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff0:	4770      	bx	lr

08006ff2 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006ff2:	b480      	push	{r7}
 8006ff4:	b083      	sub	sp, #12
 8006ff6:	af00      	add	r7, sp, #0
 8006ff8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2204      	movs	r2, #4
 800700a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800700e:	2300      	movs	r3, #0
}
 8007010:	4618      	mov	r0, r3
 8007012:	370c      	adds	r7, #12
 8007014:	46bd      	mov	sp, r7
 8007016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701a:	4770      	bx	lr

0800701c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800701c:	b480      	push	{r7}
 800701e:	b083      	sub	sp, #12
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800702a:	2b04      	cmp	r3, #4
 800702c:	d105      	bne.n	800703a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800703a:	2300      	movs	r3, #0
}
 800703c:	4618      	mov	r0, r3
 800703e:	370c      	adds	r7, #12
 8007040:	46bd      	mov	sp, r7
 8007042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007046:	4770      	bx	lr

08007048 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b082      	sub	sp, #8
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007056:	2b03      	cmp	r3, #3
 8007058:	d10b      	bne.n	8007072 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007060:	69db      	ldr	r3, [r3, #28]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d005      	beq.n	8007072 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800706c:	69db      	ldr	r3, [r3, #28]
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007072:	2300      	movs	r3, #0
}
 8007074:	4618      	mov	r0, r3
 8007076:	3708      	adds	r7, #8
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}

0800707c <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800707c:	b480      	push	{r7}
 800707e:	b083      	sub	sp, #12
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
 8007084:	460b      	mov	r3, r1
 8007086:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8007088:	2300      	movs	r3, #0
}
 800708a:	4618      	mov	r0, r3
 800708c:	370c      	adds	r7, #12
 800708e:	46bd      	mov	sp, r7
 8007090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007094:	4770      	bx	lr

08007096 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007096:	b480      	push	{r7}
 8007098:	b083      	sub	sp, #12
 800709a:	af00      	add	r7, sp, #0
 800709c:	6078      	str	r0, [r7, #4]
 800709e:	460b      	mov	r3, r1
 80070a0:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80070a2:	2300      	movs	r3, #0
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	370c      	adds	r7, #12
 80070a8:	46bd      	mov	sp, r7
 80070aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ae:	4770      	bx	lr

080070b0 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80070b0:	b480      	push	{r7}
 80070b2:	b083      	sub	sp, #12
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80070b8:	2300      	movs	r3, #0
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	370c      	adds	r7, #12
 80070be:	46bd      	mov	sp, r7
 80070c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c4:	4770      	bx	lr

080070c6 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80070c6:	b580      	push	{r7, lr}
 80070c8:	b082      	sub	sp, #8
 80070ca:	af00      	add	r7, sp, #0
 80070cc:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2201      	movs	r2, #1
 80070d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d009      	beq.n	80070f4 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070e6:	685b      	ldr	r3, [r3, #4]
 80070e8:	687a      	ldr	r2, [r7, #4]
 80070ea:	6852      	ldr	r2, [r2, #4]
 80070ec:	b2d2      	uxtb	r2, r2
 80070ee:	4611      	mov	r1, r2
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	4798      	blx	r3
  }

  return USBD_OK;
 80070f4:	2300      	movs	r3, #0
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	3708      	adds	r7, #8
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd80      	pop	{r7, pc}

080070fe <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80070fe:	b480      	push	{r7}
 8007100:	b087      	sub	sp, #28
 8007102:	af00      	add	r7, sp, #0
 8007104:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800710a:	697b      	ldr	r3, [r7, #20]
 800710c:	781b      	ldrb	r3, [r3, #0]
 800710e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	3301      	adds	r3, #1
 8007114:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	781b      	ldrb	r3, [r3, #0]
 800711a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800711c:	8a3b      	ldrh	r3, [r7, #16]
 800711e:	021b      	lsls	r3, r3, #8
 8007120:	b21a      	sxth	r2, r3
 8007122:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007126:	4313      	orrs	r3, r2
 8007128:	b21b      	sxth	r3, r3
 800712a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800712c:	89fb      	ldrh	r3, [r7, #14]
}
 800712e:	4618      	mov	r0, r3
 8007130:	371c      	adds	r7, #28
 8007132:	46bd      	mov	sp, r7
 8007134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007138:	4770      	bx	lr
	...

0800713c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b084      	sub	sp, #16
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
 8007144:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007146:	2300      	movs	r3, #0
 8007148:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	781b      	ldrb	r3, [r3, #0]
 800714e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007152:	2b40      	cmp	r3, #64	; 0x40
 8007154:	d005      	beq.n	8007162 <USBD_StdDevReq+0x26>
 8007156:	2b40      	cmp	r3, #64	; 0x40
 8007158:	d853      	bhi.n	8007202 <USBD_StdDevReq+0xc6>
 800715a:	2b00      	cmp	r3, #0
 800715c:	d00b      	beq.n	8007176 <USBD_StdDevReq+0x3a>
 800715e:	2b20      	cmp	r3, #32
 8007160:	d14f      	bne.n	8007202 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007168:	689b      	ldr	r3, [r3, #8]
 800716a:	6839      	ldr	r1, [r7, #0]
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	4798      	blx	r3
 8007170:	4603      	mov	r3, r0
 8007172:	73fb      	strb	r3, [r7, #15]
    break;
 8007174:	e04a      	b.n	800720c <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	785b      	ldrb	r3, [r3, #1]
 800717a:	2b09      	cmp	r3, #9
 800717c:	d83b      	bhi.n	80071f6 <USBD_StdDevReq+0xba>
 800717e:	a201      	add	r2, pc, #4	; (adr r2, 8007184 <USBD_StdDevReq+0x48>)
 8007180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007184:	080071d9 	.word	0x080071d9
 8007188:	080071ed 	.word	0x080071ed
 800718c:	080071f7 	.word	0x080071f7
 8007190:	080071e3 	.word	0x080071e3
 8007194:	080071f7 	.word	0x080071f7
 8007198:	080071b7 	.word	0x080071b7
 800719c:	080071ad 	.word	0x080071ad
 80071a0:	080071f7 	.word	0x080071f7
 80071a4:	080071cf 	.word	0x080071cf
 80071a8:	080071c1 	.word	0x080071c1
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 80071ac:	6839      	ldr	r1, [r7, #0]
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f000 f9d8 	bl	8007564 <USBD_GetDescriptor>
      break;
 80071b4:	e024      	b.n	8007200 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 80071b6:	6839      	ldr	r1, [r7, #0]
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f000 fb67 	bl	800788c <USBD_SetAddress>
      break;
 80071be:	e01f      	b.n	8007200 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 80071c0:	6839      	ldr	r1, [r7, #0]
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	f000 fba6 	bl	8007914 <USBD_SetConfig>
 80071c8:	4603      	mov	r3, r0
 80071ca:	73fb      	strb	r3, [r7, #15]
      break;
 80071cc:	e018      	b.n	8007200 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 80071ce:	6839      	ldr	r1, [r7, #0]
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f000 fc43 	bl	8007a5c <USBD_GetConfig>
      break;
 80071d6:	e013      	b.n	8007200 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 80071d8:	6839      	ldr	r1, [r7, #0]
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	f000 fc73 	bl	8007ac6 <USBD_GetStatus>
      break;
 80071e0:	e00e      	b.n	8007200 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 80071e2:	6839      	ldr	r1, [r7, #0]
 80071e4:	6878      	ldr	r0, [r7, #4]
 80071e6:	f000 fca1 	bl	8007b2c <USBD_SetFeature>
      break;
 80071ea:	e009      	b.n	8007200 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 80071ec:	6839      	ldr	r1, [r7, #0]
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f000 fcb0 	bl	8007b54 <USBD_ClrFeature>
      break;
 80071f4:	e004      	b.n	8007200 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 80071f6:	6839      	ldr	r1, [r7, #0]
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f000 fd06 	bl	8007c0a <USBD_CtlError>
      break;
 80071fe:	bf00      	nop
    }
    break;
 8007200:	e004      	b.n	800720c <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8007202:	6839      	ldr	r1, [r7, #0]
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f000 fd00 	bl	8007c0a <USBD_CtlError>
    break;
 800720a:	bf00      	nop
  }

  return ret;
 800720c:	7bfb      	ldrb	r3, [r7, #15]
}
 800720e:	4618      	mov	r0, r3
 8007210:	3710      	adds	r7, #16
 8007212:	46bd      	mov	sp, r7
 8007214:	bd80      	pop	{r7, pc}
 8007216:	bf00      	nop

08007218 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b084      	sub	sp, #16
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
 8007220:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007222:	2300      	movs	r3, #0
 8007224:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	781b      	ldrb	r3, [r3, #0]
 800722a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800722e:	2b40      	cmp	r3, #64	; 0x40
 8007230:	d005      	beq.n	800723e <USBD_StdItfReq+0x26>
 8007232:	2b40      	cmp	r3, #64	; 0x40
 8007234:	d82e      	bhi.n	8007294 <USBD_StdItfReq+0x7c>
 8007236:	2b00      	cmp	r3, #0
 8007238:	d001      	beq.n	800723e <USBD_StdItfReq+0x26>
 800723a:	2b20      	cmp	r3, #32
 800723c:	d12a      	bne.n	8007294 <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007244:	3b01      	subs	r3, #1
 8007246:	2b02      	cmp	r3, #2
 8007248:	d81d      	bhi.n	8007286 <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	889b      	ldrh	r3, [r3, #4]
 800724e:	b2db      	uxtb	r3, r3
 8007250:	2b01      	cmp	r3, #1
 8007252:	d813      	bhi.n	800727c <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800725a:	689b      	ldr	r3, [r3, #8]
 800725c:	6839      	ldr	r1, [r7, #0]
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	4798      	blx	r3
 8007262:	4603      	mov	r3, r0
 8007264:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	88db      	ldrh	r3, [r3, #6]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d110      	bne.n	8007290 <USBD_StdItfReq+0x78>
 800726e:	7bfb      	ldrb	r3, [r7, #15]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d10d      	bne.n	8007290 <USBD_StdItfReq+0x78>
        {
          (void)USBD_CtlSendStatus(pdev);
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f000 fd93 	bl	8007da0 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800727a:	e009      	b.n	8007290 <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 800727c:	6839      	ldr	r1, [r7, #0]
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f000 fcc3 	bl	8007c0a <USBD_CtlError>
      break;
 8007284:	e004      	b.n	8007290 <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 8007286:	6839      	ldr	r1, [r7, #0]
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f000 fcbe 	bl	8007c0a <USBD_CtlError>
      break;
 800728e:	e000      	b.n	8007292 <USBD_StdItfReq+0x7a>
      break;
 8007290:	bf00      	nop
    }
    break;
 8007292:	e004      	b.n	800729e <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 8007294:	6839      	ldr	r1, [r7, #0]
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	f000 fcb7 	bl	8007c0a <USBD_CtlError>
    break;
 800729c:	bf00      	nop
  }

  return ret;
 800729e:	7bfb      	ldrb	r3, [r7, #15]
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	3710      	adds	r7, #16
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}

080072a8 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b084      	sub	sp, #16
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
 80072b0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80072b2:	2300      	movs	r3, #0
 80072b4:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	889b      	ldrh	r3, [r3, #4]
 80072ba:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	781b      	ldrb	r3, [r3, #0]
 80072c0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80072c4:	2b40      	cmp	r3, #64	; 0x40
 80072c6:	d007      	beq.n	80072d8 <USBD_StdEPReq+0x30>
 80072c8:	2b40      	cmp	r3, #64	; 0x40
 80072ca:	f200 8140 	bhi.w	800754e <USBD_StdEPReq+0x2a6>
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d00c      	beq.n	80072ec <USBD_StdEPReq+0x44>
 80072d2:	2b20      	cmp	r3, #32
 80072d4:	f040 813b 	bne.w	800754e <USBD_StdEPReq+0x2a6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072de:	689b      	ldr	r3, [r3, #8]
 80072e0:	6839      	ldr	r1, [r7, #0]
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	4798      	blx	r3
 80072e6:	4603      	mov	r3, r0
 80072e8:	73fb      	strb	r3, [r7, #15]
    break;
 80072ea:	e135      	b.n	8007558 <USBD_StdEPReq+0x2b0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	785b      	ldrb	r3, [r3, #1]
 80072f0:	2b03      	cmp	r3, #3
 80072f2:	d007      	beq.n	8007304 <USBD_StdEPReq+0x5c>
 80072f4:	2b03      	cmp	r3, #3
 80072f6:	f300 8124 	bgt.w	8007542 <USBD_StdEPReq+0x29a>
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d07b      	beq.n	80073f6 <USBD_StdEPReq+0x14e>
 80072fe:	2b01      	cmp	r3, #1
 8007300:	d03b      	beq.n	800737a <USBD_StdEPReq+0xd2>
 8007302:	e11e      	b.n	8007542 <USBD_StdEPReq+0x29a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800730a:	2b02      	cmp	r3, #2
 800730c:	d002      	beq.n	8007314 <USBD_StdEPReq+0x6c>
 800730e:	2b03      	cmp	r3, #3
 8007310:	d016      	beq.n	8007340 <USBD_StdEPReq+0x98>
 8007312:	e02c      	b.n	800736e <USBD_StdEPReq+0xc6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007314:	7bbb      	ldrb	r3, [r7, #14]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d00d      	beq.n	8007336 <USBD_StdEPReq+0x8e>
 800731a:	7bbb      	ldrb	r3, [r7, #14]
 800731c:	2b80      	cmp	r3, #128	; 0x80
 800731e:	d00a      	beq.n	8007336 <USBD_StdEPReq+0x8e>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8007320:	7bbb      	ldrb	r3, [r7, #14]
 8007322:	4619      	mov	r1, r3
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f001 f9bb 	bl	80086a0 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800732a:	2180      	movs	r1, #128	; 0x80
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f001 f9b7 	bl	80086a0 <USBD_LL_StallEP>
 8007332:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8007334:	e020      	b.n	8007378 <USBD_StdEPReq+0xd0>
          USBD_CtlError(pdev, req);
 8007336:	6839      	ldr	r1, [r7, #0]
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f000 fc66 	bl	8007c0a <USBD_CtlError>
        break;
 800733e:	e01b      	b.n	8007378 <USBD_StdEPReq+0xd0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	885b      	ldrh	r3, [r3, #2]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d10e      	bne.n	8007366 <USBD_StdEPReq+0xbe>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007348:	7bbb      	ldrb	r3, [r7, #14]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d00b      	beq.n	8007366 <USBD_StdEPReq+0xbe>
 800734e:	7bbb      	ldrb	r3, [r7, #14]
 8007350:	2b80      	cmp	r3, #128	; 0x80
 8007352:	d008      	beq.n	8007366 <USBD_StdEPReq+0xbe>
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	88db      	ldrh	r3, [r3, #6]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d104      	bne.n	8007366 <USBD_StdEPReq+0xbe>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800735c:	7bbb      	ldrb	r3, [r7, #14]
 800735e:	4619      	mov	r1, r3
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f001 f99d 	bl	80086a0 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f000 fd1a 	bl	8007da0 <USBD_CtlSendStatus>

        break;
 800736c:	e004      	b.n	8007378 <USBD_StdEPReq+0xd0>

      default:
        USBD_CtlError(pdev, req);
 800736e:	6839      	ldr	r1, [r7, #0]
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f000 fc4a 	bl	8007c0a <USBD_CtlError>
        break;
 8007376:	bf00      	nop
      }
      break;
 8007378:	e0e8      	b.n	800754c <USBD_StdEPReq+0x2a4>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007380:	2b02      	cmp	r3, #2
 8007382:	d002      	beq.n	800738a <USBD_StdEPReq+0xe2>
 8007384:	2b03      	cmp	r3, #3
 8007386:	d016      	beq.n	80073b6 <USBD_StdEPReq+0x10e>
 8007388:	e02e      	b.n	80073e8 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800738a:	7bbb      	ldrb	r3, [r7, #14]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d00d      	beq.n	80073ac <USBD_StdEPReq+0x104>
 8007390:	7bbb      	ldrb	r3, [r7, #14]
 8007392:	2b80      	cmp	r3, #128	; 0x80
 8007394:	d00a      	beq.n	80073ac <USBD_StdEPReq+0x104>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8007396:	7bbb      	ldrb	r3, [r7, #14]
 8007398:	4619      	mov	r1, r3
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f001 f980 	bl	80086a0 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80073a0:	2180      	movs	r1, #128	; 0x80
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f001 f97c 	bl	80086a0 <USBD_LL_StallEP>
 80073a8:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80073aa:	e023      	b.n	80073f4 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 80073ac:	6839      	ldr	r1, [r7, #0]
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f000 fc2b 	bl	8007c0a <USBD_CtlError>
        break;
 80073b4:	e01e      	b.n	80073f4 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	885b      	ldrh	r3, [r3, #2]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d119      	bne.n	80073f2 <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 80073be:	7bbb      	ldrb	r3, [r7, #14]
 80073c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d004      	beq.n	80073d2 <USBD_StdEPReq+0x12a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80073c8:	7bbb      	ldrb	r3, [r7, #14]
 80073ca:	4619      	mov	r1, r3
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f001 f986 	bl	80086de <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f000 fce4 	bl	8007da0 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073de:	689b      	ldr	r3, [r3, #8]
 80073e0:	6839      	ldr	r1, [r7, #0]
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	4798      	blx	r3
        }
        break;
 80073e6:	e004      	b.n	80073f2 <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 80073e8:	6839      	ldr	r1, [r7, #0]
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f000 fc0d 	bl	8007c0a <USBD_CtlError>
        break;
 80073f0:	e000      	b.n	80073f4 <USBD_StdEPReq+0x14c>
        break;
 80073f2:	bf00      	nop
      }
      break;
 80073f4:	e0aa      	b.n	800754c <USBD_StdEPReq+0x2a4>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073fc:	2b02      	cmp	r3, #2
 80073fe:	d002      	beq.n	8007406 <USBD_StdEPReq+0x15e>
 8007400:	2b03      	cmp	r3, #3
 8007402:	d032      	beq.n	800746a <USBD_StdEPReq+0x1c2>
 8007404:	e097      	b.n	8007536 <USBD_StdEPReq+0x28e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007406:	7bbb      	ldrb	r3, [r7, #14]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d007      	beq.n	800741c <USBD_StdEPReq+0x174>
 800740c:	7bbb      	ldrb	r3, [r7, #14]
 800740e:	2b80      	cmp	r3, #128	; 0x80
 8007410:	d004      	beq.n	800741c <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 8007412:	6839      	ldr	r1, [r7, #0]
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	f000 fbf8 	bl	8007c0a <USBD_CtlError>
          break;
 800741a:	e091      	b.n	8007540 <USBD_StdEPReq+0x298>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800741c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007420:	2b00      	cmp	r3, #0
 8007422:	da0b      	bge.n	800743c <USBD_StdEPReq+0x194>
 8007424:	7bbb      	ldrb	r3, [r7, #14]
 8007426:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800742a:	4613      	mov	r3, r2
 800742c:	009b      	lsls	r3, r3, #2
 800742e:	4413      	add	r3, r2
 8007430:	009b      	lsls	r3, r3, #2
 8007432:	3310      	adds	r3, #16
 8007434:	687a      	ldr	r2, [r7, #4]
 8007436:	4413      	add	r3, r2
 8007438:	3304      	adds	r3, #4
 800743a:	e00b      	b.n	8007454 <USBD_StdEPReq+0x1ac>
              &pdev->ep_out[ep_addr & 0x7FU];
 800743c:	7bbb      	ldrb	r3, [r7, #14]
 800743e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007442:	4613      	mov	r3, r2
 8007444:	009b      	lsls	r3, r3, #2
 8007446:	4413      	add	r3, r2
 8007448:	009b      	lsls	r3, r3, #2
 800744a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800744e:	687a      	ldr	r2, [r7, #4]
 8007450:	4413      	add	r3, r2
 8007452:	3304      	adds	r3, #4
 8007454:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	2200      	movs	r2, #0
 800745a:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	2202      	movs	r2, #2
 8007460:	4619      	mov	r1, r3
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f000 fc42 	bl	8007cec <USBD_CtlSendData>
        break;
 8007468:	e06a      	b.n	8007540 <USBD_StdEPReq+0x298>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800746a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800746e:	2b00      	cmp	r3, #0
 8007470:	da11      	bge.n	8007496 <USBD_StdEPReq+0x1ee>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007472:	7bbb      	ldrb	r3, [r7, #14]
 8007474:	f003 020f 	and.w	r2, r3, #15
 8007478:	6879      	ldr	r1, [r7, #4]
 800747a:	4613      	mov	r3, r2
 800747c:	009b      	lsls	r3, r3, #2
 800747e:	4413      	add	r3, r2
 8007480:	009b      	lsls	r3, r3, #2
 8007482:	440b      	add	r3, r1
 8007484:	3324      	adds	r3, #36	; 0x24
 8007486:	881b      	ldrh	r3, [r3, #0]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d117      	bne.n	80074bc <USBD_StdEPReq+0x214>
          {
            USBD_CtlError(pdev, req);
 800748c:	6839      	ldr	r1, [r7, #0]
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f000 fbbb 	bl	8007c0a <USBD_CtlError>
            break;
 8007494:	e054      	b.n	8007540 <USBD_StdEPReq+0x298>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007496:	7bbb      	ldrb	r3, [r7, #14]
 8007498:	f003 020f 	and.w	r2, r3, #15
 800749c:	6879      	ldr	r1, [r7, #4]
 800749e:	4613      	mov	r3, r2
 80074a0:	009b      	lsls	r3, r3, #2
 80074a2:	4413      	add	r3, r2
 80074a4:	009b      	lsls	r3, r3, #2
 80074a6:	440b      	add	r3, r1
 80074a8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80074ac:	881b      	ldrh	r3, [r3, #0]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d104      	bne.n	80074bc <USBD_StdEPReq+0x214>
          {
            USBD_CtlError(pdev, req);
 80074b2:	6839      	ldr	r1, [r7, #0]
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	f000 fba8 	bl	8007c0a <USBD_CtlError>
            break;
 80074ba:	e041      	b.n	8007540 <USBD_StdEPReq+0x298>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80074bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	da0b      	bge.n	80074dc <USBD_StdEPReq+0x234>
 80074c4:	7bbb      	ldrb	r3, [r7, #14]
 80074c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80074ca:	4613      	mov	r3, r2
 80074cc:	009b      	lsls	r3, r3, #2
 80074ce:	4413      	add	r3, r2
 80074d0:	009b      	lsls	r3, r3, #2
 80074d2:	3310      	adds	r3, #16
 80074d4:	687a      	ldr	r2, [r7, #4]
 80074d6:	4413      	add	r3, r2
 80074d8:	3304      	adds	r3, #4
 80074da:	e00b      	b.n	80074f4 <USBD_StdEPReq+0x24c>
              &pdev->ep_out[ep_addr & 0x7FU];
 80074dc:	7bbb      	ldrb	r3, [r7, #14]
 80074de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80074e2:	4613      	mov	r3, r2
 80074e4:	009b      	lsls	r3, r3, #2
 80074e6:	4413      	add	r3, r2
 80074e8:	009b      	lsls	r3, r3, #2
 80074ea:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80074ee:	687a      	ldr	r2, [r7, #4]
 80074f0:	4413      	add	r3, r2
 80074f2:	3304      	adds	r3, #4
 80074f4:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80074f6:	7bbb      	ldrb	r3, [r7, #14]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d002      	beq.n	8007502 <USBD_StdEPReq+0x25a>
 80074fc:	7bbb      	ldrb	r3, [r7, #14]
 80074fe:	2b80      	cmp	r3, #128	; 0x80
 8007500:	d103      	bne.n	800750a <USBD_StdEPReq+0x262>
          {
            pep->status = 0x0000U;
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	2200      	movs	r2, #0
 8007506:	601a      	str	r2, [r3, #0]
 8007508:	e00e      	b.n	8007528 <USBD_StdEPReq+0x280>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800750a:	7bbb      	ldrb	r3, [r7, #14]
 800750c:	4619      	mov	r1, r3
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f001 f904 	bl	800871c <USBD_LL_IsStallEP>
 8007514:	4603      	mov	r3, r0
 8007516:	2b00      	cmp	r3, #0
 8007518:	d003      	beq.n	8007522 <USBD_StdEPReq+0x27a>
          {
            pep->status = 0x0001U;
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	2201      	movs	r2, #1
 800751e:	601a      	str	r2, [r3, #0]
 8007520:	e002      	b.n	8007528 <USBD_StdEPReq+0x280>
          }
          else
          {
            pep->status = 0x0000U;
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	2200      	movs	r2, #0
 8007526:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	2202      	movs	r2, #2
 800752c:	4619      	mov	r1, r3
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f000 fbdc 	bl	8007cec <USBD_CtlSendData>
          break;
 8007534:	e004      	b.n	8007540 <USBD_StdEPReq+0x298>

      default:
        USBD_CtlError(pdev, req);
 8007536:	6839      	ldr	r1, [r7, #0]
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f000 fb66 	bl	8007c0a <USBD_CtlError>
        break;
 800753e:	bf00      	nop
      }
      break;
 8007540:	e004      	b.n	800754c <USBD_StdEPReq+0x2a4>

    default:
      USBD_CtlError(pdev, req);
 8007542:	6839      	ldr	r1, [r7, #0]
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	f000 fb60 	bl	8007c0a <USBD_CtlError>
      break;
 800754a:	bf00      	nop
    }
    break;
 800754c:	e004      	b.n	8007558 <USBD_StdEPReq+0x2b0>

  default:
    USBD_CtlError(pdev, req);
 800754e:	6839      	ldr	r1, [r7, #0]
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f000 fb5a 	bl	8007c0a <USBD_CtlError>
    break;
 8007556:	bf00      	nop
  }

  return ret;
 8007558:	7bfb      	ldrb	r3, [r7, #15]
}
 800755a:	4618      	mov	r0, r3
 800755c:	3710      	adds	r7, #16
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}
	...

08007564 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b084      	sub	sp, #16
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
 800756c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800756e:	2300      	movs	r3, #0
 8007570:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007572:	2300      	movs	r3, #0
 8007574:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007576:	2300      	movs	r3, #0
 8007578:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	885b      	ldrh	r3, [r3, #2]
 800757e:	0a1b      	lsrs	r3, r3, #8
 8007580:	b29b      	uxth	r3, r3
 8007582:	3b01      	subs	r3, #1
 8007584:	2b0e      	cmp	r3, #14
 8007586:	f200 8152 	bhi.w	800782e <USBD_GetDescriptor+0x2ca>
 800758a:	a201      	add	r2, pc, #4	; (adr r2, 8007590 <USBD_GetDescriptor+0x2c>)
 800758c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007590:	08007601 	.word	0x08007601
 8007594:	08007619 	.word	0x08007619
 8007598:	08007659 	.word	0x08007659
 800759c:	0800782f 	.word	0x0800782f
 80075a0:	0800782f 	.word	0x0800782f
 80075a4:	080077cf 	.word	0x080077cf
 80075a8:	080077fb 	.word	0x080077fb
 80075ac:	0800782f 	.word	0x0800782f
 80075b0:	0800782f 	.word	0x0800782f
 80075b4:	0800782f 	.word	0x0800782f
 80075b8:	0800782f 	.word	0x0800782f
 80075bc:	0800782f 	.word	0x0800782f
 80075c0:	0800782f 	.word	0x0800782f
 80075c4:	0800782f 	.word	0x0800782f
 80075c8:	080075cd 	.word	0x080075cd
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075d2:	69db      	ldr	r3, [r3, #28]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d00b      	beq.n	80075f0 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075de:	69db      	ldr	r3, [r3, #28]
 80075e0:	687a      	ldr	r2, [r7, #4]
 80075e2:	7c12      	ldrb	r2, [r2, #16]
 80075e4:	f107 0108 	add.w	r1, r7, #8
 80075e8:	4610      	mov	r0, r2
 80075ea:	4798      	blx	r3
 80075ec:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80075ee:	e126      	b.n	800783e <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 80075f0:	6839      	ldr	r1, [r7, #0]
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f000 fb09 	bl	8007c0a <USBD_CtlError>
      err++;
 80075f8:	7afb      	ldrb	r3, [r7, #11]
 80075fa:	3301      	adds	r3, #1
 80075fc:	72fb      	strb	r3, [r7, #11]
    break;
 80075fe:	e11e      	b.n	800783e <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	687a      	ldr	r2, [r7, #4]
 800760a:	7c12      	ldrb	r2, [r2, #16]
 800760c:	f107 0108 	add.w	r1, r7, #8
 8007610:	4610      	mov	r0, r2
 8007612:	4798      	blx	r3
 8007614:	60f8      	str	r0, [r7, #12]
    break;
 8007616:	e112      	b.n	800783e <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	7c1b      	ldrb	r3, [r3, #16]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d10d      	bne.n	800763c <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007628:	f107 0208 	add.w	r2, r7, #8
 800762c:	4610      	mov	r0, r2
 800762e:	4798      	blx	r3
 8007630:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	3301      	adds	r3, #1
 8007636:	2202      	movs	r2, #2
 8007638:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800763a:	e100      	b.n	800783e <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007644:	f107 0208 	add.w	r2, r7, #8
 8007648:	4610      	mov	r0, r2
 800764a:	4798      	blx	r3
 800764c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	3301      	adds	r3, #1
 8007652:	2202      	movs	r2, #2
 8007654:	701a      	strb	r2, [r3, #0]
    break;
 8007656:	e0f2      	b.n	800783e <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	885b      	ldrh	r3, [r3, #2]
 800765c:	b2db      	uxtb	r3, r3
 800765e:	2b05      	cmp	r3, #5
 8007660:	f200 80ac 	bhi.w	80077bc <USBD_GetDescriptor+0x258>
 8007664:	a201      	add	r2, pc, #4	; (adr r2, 800766c <USBD_GetDescriptor+0x108>)
 8007666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800766a:	bf00      	nop
 800766c:	08007685 	.word	0x08007685
 8007670:	080076b9 	.word	0x080076b9
 8007674:	080076ed 	.word	0x080076ed
 8007678:	08007721 	.word	0x08007721
 800767c:	08007755 	.word	0x08007755
 8007680:	08007789 	.word	0x08007789
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800768a:	685b      	ldr	r3, [r3, #4]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d00b      	beq.n	80076a8 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007696:	685b      	ldr	r3, [r3, #4]
 8007698:	687a      	ldr	r2, [r7, #4]
 800769a:	7c12      	ldrb	r2, [r2, #16]
 800769c:	f107 0108 	add.w	r1, r7, #8
 80076a0:	4610      	mov	r0, r2
 80076a2:	4798      	blx	r3
 80076a4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80076a6:	e091      	b.n	80077cc <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80076a8:	6839      	ldr	r1, [r7, #0]
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f000 faad 	bl	8007c0a <USBD_CtlError>
        err++;
 80076b0:	7afb      	ldrb	r3, [r7, #11]
 80076b2:	3301      	adds	r3, #1
 80076b4:	72fb      	strb	r3, [r7, #11]
      break;
 80076b6:	e089      	b.n	80077cc <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076be:	689b      	ldr	r3, [r3, #8]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d00b      	beq.n	80076dc <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076ca:	689b      	ldr	r3, [r3, #8]
 80076cc:	687a      	ldr	r2, [r7, #4]
 80076ce:	7c12      	ldrb	r2, [r2, #16]
 80076d0:	f107 0108 	add.w	r1, r7, #8
 80076d4:	4610      	mov	r0, r2
 80076d6:	4798      	blx	r3
 80076d8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80076da:	e077      	b.n	80077cc <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80076dc:	6839      	ldr	r1, [r7, #0]
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f000 fa93 	bl	8007c0a <USBD_CtlError>
        err++;
 80076e4:	7afb      	ldrb	r3, [r7, #11]
 80076e6:	3301      	adds	r3, #1
 80076e8:	72fb      	strb	r3, [r7, #11]
      break;
 80076ea:	e06f      	b.n	80077cc <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076f2:	68db      	ldr	r3, [r3, #12]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d00b      	beq.n	8007710 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076fe:	68db      	ldr	r3, [r3, #12]
 8007700:	687a      	ldr	r2, [r7, #4]
 8007702:	7c12      	ldrb	r2, [r2, #16]
 8007704:	f107 0108 	add.w	r1, r7, #8
 8007708:	4610      	mov	r0, r2
 800770a:	4798      	blx	r3
 800770c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800770e:	e05d      	b.n	80077cc <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007710:	6839      	ldr	r1, [r7, #0]
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f000 fa79 	bl	8007c0a <USBD_CtlError>
        err++;
 8007718:	7afb      	ldrb	r3, [r7, #11]
 800771a:	3301      	adds	r3, #1
 800771c:	72fb      	strb	r3, [r7, #11]
      break;
 800771e:	e055      	b.n	80077cc <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007726:	691b      	ldr	r3, [r3, #16]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d00b      	beq.n	8007744 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007732:	691b      	ldr	r3, [r3, #16]
 8007734:	687a      	ldr	r2, [r7, #4]
 8007736:	7c12      	ldrb	r2, [r2, #16]
 8007738:	f107 0108 	add.w	r1, r7, #8
 800773c:	4610      	mov	r0, r2
 800773e:	4798      	blx	r3
 8007740:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007742:	e043      	b.n	80077cc <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007744:	6839      	ldr	r1, [r7, #0]
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f000 fa5f 	bl	8007c0a <USBD_CtlError>
        err++;
 800774c:	7afb      	ldrb	r3, [r7, #11]
 800774e:	3301      	adds	r3, #1
 8007750:	72fb      	strb	r3, [r7, #11]
      break;
 8007752:	e03b      	b.n	80077cc <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800775a:	695b      	ldr	r3, [r3, #20]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d00b      	beq.n	8007778 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007766:	695b      	ldr	r3, [r3, #20]
 8007768:	687a      	ldr	r2, [r7, #4]
 800776a:	7c12      	ldrb	r2, [r2, #16]
 800776c:	f107 0108 	add.w	r1, r7, #8
 8007770:	4610      	mov	r0, r2
 8007772:	4798      	blx	r3
 8007774:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007776:	e029      	b.n	80077cc <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007778:	6839      	ldr	r1, [r7, #0]
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f000 fa45 	bl	8007c0a <USBD_CtlError>
        err++;
 8007780:	7afb      	ldrb	r3, [r7, #11]
 8007782:	3301      	adds	r3, #1
 8007784:	72fb      	strb	r3, [r7, #11]
      break;
 8007786:	e021      	b.n	80077cc <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800778e:	699b      	ldr	r3, [r3, #24]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d00b      	beq.n	80077ac <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800779a:	699b      	ldr	r3, [r3, #24]
 800779c:	687a      	ldr	r2, [r7, #4]
 800779e:	7c12      	ldrb	r2, [r2, #16]
 80077a0:	f107 0108 	add.w	r1, r7, #8
 80077a4:	4610      	mov	r0, r2
 80077a6:	4798      	blx	r3
 80077a8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80077aa:	e00f      	b.n	80077cc <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80077ac:	6839      	ldr	r1, [r7, #0]
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f000 fa2b 	bl	8007c0a <USBD_CtlError>
        err++;
 80077b4:	7afb      	ldrb	r3, [r7, #11]
 80077b6:	3301      	adds	r3, #1
 80077b8:	72fb      	strb	r3, [r7, #11]
      break;
 80077ba:	e007      	b.n	80077cc <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 80077bc:	6839      	ldr	r1, [r7, #0]
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f000 fa23 	bl	8007c0a <USBD_CtlError>
      err++;
 80077c4:	7afb      	ldrb	r3, [r7, #11]
 80077c6:	3301      	adds	r3, #1
 80077c8:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 80077ca:	bf00      	nop
    }
    break;
 80077cc:	e037      	b.n	800783e <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	7c1b      	ldrb	r3, [r3, #16]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d109      	bne.n	80077ea <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077de:	f107 0208 	add.w	r2, r7, #8
 80077e2:	4610      	mov	r0, r2
 80077e4:	4798      	blx	r3
 80077e6:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80077e8:	e029      	b.n	800783e <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 80077ea:	6839      	ldr	r1, [r7, #0]
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f000 fa0c 	bl	8007c0a <USBD_CtlError>
      err++;
 80077f2:	7afb      	ldrb	r3, [r7, #11]
 80077f4:	3301      	adds	r3, #1
 80077f6:	72fb      	strb	r3, [r7, #11]
    break;
 80077f8:	e021      	b.n	800783e <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	7c1b      	ldrb	r3, [r3, #16]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d10d      	bne.n	800781e <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800780a:	f107 0208 	add.w	r2, r7, #8
 800780e:	4610      	mov	r0, r2
 8007810:	4798      	blx	r3
 8007812:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	3301      	adds	r3, #1
 8007818:	2207      	movs	r2, #7
 800781a:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800781c:	e00f      	b.n	800783e <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800781e:	6839      	ldr	r1, [r7, #0]
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	f000 f9f2 	bl	8007c0a <USBD_CtlError>
      err++;
 8007826:	7afb      	ldrb	r3, [r7, #11]
 8007828:	3301      	adds	r3, #1
 800782a:	72fb      	strb	r3, [r7, #11]
    break;
 800782c:	e007      	b.n	800783e <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 800782e:	6839      	ldr	r1, [r7, #0]
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f000 f9ea 	bl	8007c0a <USBD_CtlError>
    err++;
 8007836:	7afb      	ldrb	r3, [r7, #11]
 8007838:	3301      	adds	r3, #1
 800783a:	72fb      	strb	r3, [r7, #11]
    break;
 800783c:	bf00      	nop
  }

  if (err != 0U)
 800783e:	7afb      	ldrb	r3, [r7, #11]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d11e      	bne.n	8007882 <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	88db      	ldrh	r3, [r3, #6]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d016      	beq.n	800787a <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 800784c:	893b      	ldrh	r3, [r7, #8]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d00e      	beq.n	8007870 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	88da      	ldrh	r2, [r3, #6]
 8007856:	893b      	ldrh	r3, [r7, #8]
 8007858:	4293      	cmp	r3, r2
 800785a:	bf28      	it	cs
 800785c:	4613      	movcs	r3, r2
 800785e:	b29b      	uxth	r3, r3
 8007860:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8007862:	893b      	ldrh	r3, [r7, #8]
 8007864:	461a      	mov	r2, r3
 8007866:	68f9      	ldr	r1, [r7, #12]
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f000 fa3f 	bl	8007cec <USBD_CtlSendData>
 800786e:	e009      	b.n	8007884 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8007870:	6839      	ldr	r1, [r7, #0]
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f000 f9c9 	bl	8007c0a <USBD_CtlError>
 8007878:	e004      	b.n	8007884 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f000 fa90 	bl	8007da0 <USBD_CtlSendStatus>
 8007880:	e000      	b.n	8007884 <USBD_GetDescriptor+0x320>
    return;
 8007882:	bf00      	nop
    }
  }
}
 8007884:	3710      	adds	r7, #16
 8007886:	46bd      	mov	sp, r7
 8007888:	bd80      	pop	{r7, pc}
 800788a:	bf00      	nop

0800788c <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b084      	sub	sp, #16
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
 8007894:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	889b      	ldrh	r3, [r3, #4]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d130      	bne.n	8007900 <USBD_SetAddress+0x74>
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	88db      	ldrh	r3, [r3, #6]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d12c      	bne.n	8007900 <USBD_SetAddress+0x74>
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	885b      	ldrh	r3, [r3, #2]
 80078aa:	2b7f      	cmp	r3, #127	; 0x7f
 80078ac:	d828      	bhi.n	8007900 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	885b      	ldrh	r3, [r3, #2]
 80078b2:	b2db      	uxtb	r3, r3
 80078b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078b8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078c0:	2b03      	cmp	r3, #3
 80078c2:	d104      	bne.n	80078ce <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80078c4:	6839      	ldr	r1, [r7, #0]
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f000 f99f 	bl	8007c0a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078cc:	e01d      	b.n	800790a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	7bfa      	ldrb	r2, [r7, #15]
 80078d2:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80078d6:	7bfb      	ldrb	r3, [r7, #15]
 80078d8:	4619      	mov	r1, r3
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	f000 ff4a 	bl	8008774 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f000 fa5d 	bl	8007da0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80078e6:	7bfb      	ldrb	r3, [r7, #15]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d004      	beq.n	80078f6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2202      	movs	r2, #2
 80078f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078f4:	e009      	b.n	800790a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2201      	movs	r2, #1
 80078fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078fe:	e004      	b.n	800790a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007900:	6839      	ldr	r1, [r7, #0]
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f000 f981 	bl	8007c0a <USBD_CtlError>
  }
}
 8007908:	bf00      	nop
 800790a:	bf00      	nop
 800790c:	3710      	adds	r7, #16
 800790e:	46bd      	mov	sp, r7
 8007910:	bd80      	pop	{r7, pc}
	...

08007914 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b084      	sub	sp, #16
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
 800791c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800791e:	2300      	movs	r3, #0
 8007920:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	885b      	ldrh	r3, [r3, #2]
 8007926:	b2da      	uxtb	r2, r3
 8007928:	4b4b      	ldr	r3, [pc, #300]	; (8007a58 <USBD_SetConfig+0x144>)
 800792a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800792c:	4b4a      	ldr	r3, [pc, #296]	; (8007a58 <USBD_SetConfig+0x144>)
 800792e:	781b      	ldrb	r3, [r3, #0]
 8007930:	2b01      	cmp	r3, #1
 8007932:	d905      	bls.n	8007940 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007934:	6839      	ldr	r1, [r7, #0]
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f000 f967 	bl	8007c0a <USBD_CtlError>
    return USBD_FAIL;
 800793c:	2303      	movs	r3, #3
 800793e:	e087      	b.n	8007a50 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007946:	2b02      	cmp	r3, #2
 8007948:	d002      	beq.n	8007950 <USBD_SetConfig+0x3c>
 800794a:	2b03      	cmp	r3, #3
 800794c:	d025      	beq.n	800799a <USBD_SetConfig+0x86>
 800794e:	e071      	b.n	8007a34 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8007950:	4b41      	ldr	r3, [pc, #260]	; (8007a58 <USBD_SetConfig+0x144>)
 8007952:	781b      	ldrb	r3, [r3, #0]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d01c      	beq.n	8007992 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8007958:	4b3f      	ldr	r3, [pc, #252]	; (8007a58 <USBD_SetConfig+0x144>)
 800795a:	781b      	ldrb	r3, [r3, #0]
 800795c:	461a      	mov	r2, r3
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8007962:	4b3d      	ldr	r3, [pc, #244]	; (8007a58 <USBD_SetConfig+0x144>)
 8007964:	781b      	ldrb	r3, [r3, #0]
 8007966:	4619      	mov	r1, r3
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	f7ff f96f 	bl	8006c4c <USBD_SetClassConfig>
 800796e:	4603      	mov	r3, r0
 8007970:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8007972:	7bfb      	ldrb	r3, [r7, #15]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d004      	beq.n	8007982 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8007978:	6839      	ldr	r1, [r7, #0]
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f000 f945 	bl	8007c0a <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8007980:	e065      	b.n	8007a4e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	f000 fa0c 	bl	8007da0 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2203      	movs	r2, #3
 800798c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8007990:	e05d      	b.n	8007a4e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	f000 fa04 	bl	8007da0 <USBD_CtlSendStatus>
    break;
 8007998:	e059      	b.n	8007a4e <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800799a:	4b2f      	ldr	r3, [pc, #188]	; (8007a58 <USBD_SetConfig+0x144>)
 800799c:	781b      	ldrb	r3, [r3, #0]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d112      	bne.n	80079c8 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2202      	movs	r2, #2
 80079a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 80079aa:	4b2b      	ldr	r3, [pc, #172]	; (8007a58 <USBD_SetConfig+0x144>)
 80079ac:	781b      	ldrb	r3, [r3, #0]
 80079ae:	461a      	mov	r2, r3
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80079b4:	4b28      	ldr	r3, [pc, #160]	; (8007a58 <USBD_SetConfig+0x144>)
 80079b6:	781b      	ldrb	r3, [r3, #0]
 80079b8:	4619      	mov	r1, r3
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f7ff f962 	bl	8006c84 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 80079c0:	6878      	ldr	r0, [r7, #4]
 80079c2:	f000 f9ed 	bl	8007da0 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80079c6:	e042      	b.n	8007a4e <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 80079c8:	4b23      	ldr	r3, [pc, #140]	; (8007a58 <USBD_SetConfig+0x144>)
 80079ca:	781b      	ldrb	r3, [r3, #0]
 80079cc:	461a      	mov	r2, r3
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	685b      	ldr	r3, [r3, #4]
 80079d2:	429a      	cmp	r2, r3
 80079d4:	d02a      	beq.n	8007a2c <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	685b      	ldr	r3, [r3, #4]
 80079da:	b2db      	uxtb	r3, r3
 80079dc:	4619      	mov	r1, r3
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f7ff f950 	bl	8006c84 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 80079e4:	4b1c      	ldr	r3, [pc, #112]	; (8007a58 <USBD_SetConfig+0x144>)
 80079e6:	781b      	ldrb	r3, [r3, #0]
 80079e8:	461a      	mov	r2, r3
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 80079ee:	4b1a      	ldr	r3, [pc, #104]	; (8007a58 <USBD_SetConfig+0x144>)
 80079f0:	781b      	ldrb	r3, [r3, #0]
 80079f2:	4619      	mov	r1, r3
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	f7ff f929 	bl	8006c4c <USBD_SetClassConfig>
 80079fa:	4603      	mov	r3, r0
 80079fc:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 80079fe:	7bfb      	ldrb	r3, [r7, #15]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d00f      	beq.n	8007a24 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8007a04:	6839      	ldr	r1, [r7, #0]
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f000 f8ff 	bl	8007c0a <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	685b      	ldr	r3, [r3, #4]
 8007a10:	b2db      	uxtb	r3, r3
 8007a12:	4619      	mov	r1, r3
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f7ff f935 	bl	8006c84 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2202      	movs	r2, #2
 8007a1e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8007a22:	e014      	b.n	8007a4e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f000 f9bb 	bl	8007da0 <USBD_CtlSendStatus>
    break;
 8007a2a:	e010      	b.n	8007a4e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f000 f9b7 	bl	8007da0 <USBD_CtlSendStatus>
    break;
 8007a32:	e00c      	b.n	8007a4e <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8007a34:	6839      	ldr	r1, [r7, #0]
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f000 f8e7 	bl	8007c0a <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007a3c:	4b06      	ldr	r3, [pc, #24]	; (8007a58 <USBD_SetConfig+0x144>)
 8007a3e:	781b      	ldrb	r3, [r3, #0]
 8007a40:	4619      	mov	r1, r3
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	f7ff f91e 	bl	8006c84 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8007a48:	2303      	movs	r3, #3
 8007a4a:	73fb      	strb	r3, [r7, #15]
    break;
 8007a4c:	bf00      	nop
  }

  return ret;
 8007a4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a50:	4618      	mov	r0, r3
 8007a52:	3710      	adds	r7, #16
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bd80      	pop	{r7, pc}
 8007a58:	2000021c 	.word	0x2000021c

08007a5c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b082      	sub	sp, #8
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
 8007a64:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	88db      	ldrh	r3, [r3, #6]
 8007a6a:	2b01      	cmp	r3, #1
 8007a6c:	d004      	beq.n	8007a78 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007a6e:	6839      	ldr	r1, [r7, #0]
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f000 f8ca 	bl	8007c0a <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8007a76:	e022      	b.n	8007abe <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a7e:	2b02      	cmp	r3, #2
 8007a80:	dc02      	bgt.n	8007a88 <USBD_GetConfig+0x2c>
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	dc03      	bgt.n	8007a8e <USBD_GetConfig+0x32>
 8007a86:	e015      	b.n	8007ab4 <USBD_GetConfig+0x58>
 8007a88:	2b03      	cmp	r3, #3
 8007a8a:	d00b      	beq.n	8007aa4 <USBD_GetConfig+0x48>
 8007a8c:	e012      	b.n	8007ab4 <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2200      	movs	r2, #0
 8007a92:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	3308      	adds	r3, #8
 8007a98:	2201      	movs	r2, #1
 8007a9a:	4619      	mov	r1, r3
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f000 f925 	bl	8007cec <USBD_CtlSendData>
      break;
 8007aa2:	e00c      	b.n	8007abe <USBD_GetConfig+0x62>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	3304      	adds	r3, #4
 8007aa8:	2201      	movs	r2, #1
 8007aaa:	4619      	mov	r1, r3
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f000 f91d 	bl	8007cec <USBD_CtlSendData>
      break;
 8007ab2:	e004      	b.n	8007abe <USBD_GetConfig+0x62>
      USBD_CtlError(pdev, req);
 8007ab4:	6839      	ldr	r1, [r7, #0]
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f000 f8a7 	bl	8007c0a <USBD_CtlError>
      break;
 8007abc:	bf00      	nop
}
 8007abe:	bf00      	nop
 8007ac0:	3708      	adds	r7, #8
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd80      	pop	{r7, pc}

08007ac6 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ac6:	b580      	push	{r7, lr}
 8007ac8:	b082      	sub	sp, #8
 8007aca:	af00      	add	r7, sp, #0
 8007acc:	6078      	str	r0, [r7, #4]
 8007ace:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ad6:	3b01      	subs	r3, #1
 8007ad8:	2b02      	cmp	r3, #2
 8007ada:	d81e      	bhi.n	8007b1a <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	88db      	ldrh	r3, [r3, #6]
 8007ae0:	2b02      	cmp	r3, #2
 8007ae2:	d004      	beq.n	8007aee <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8007ae4:	6839      	ldr	r1, [r7, #0]
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f000 f88f 	bl	8007c0a <USBD_CtlError>
      break;
 8007aec:	e01a      	b.n	8007b24 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2201      	movs	r2, #1
 8007af2:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d005      	beq.n	8007b0a <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	68db      	ldr	r3, [r3, #12]
 8007b02:	f043 0202 	orr.w	r2, r3, #2
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	330c      	adds	r3, #12
 8007b0e:	2202      	movs	r2, #2
 8007b10:	4619      	mov	r1, r3
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f000 f8ea 	bl	8007cec <USBD_CtlSendData>
    break;
 8007b18:	e004      	b.n	8007b24 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8007b1a:	6839      	ldr	r1, [r7, #0]
 8007b1c:	6878      	ldr	r0, [r7, #4]
 8007b1e:	f000 f874 	bl	8007c0a <USBD_CtlError>
    break;
 8007b22:	bf00      	nop
  }
}
 8007b24:	bf00      	nop
 8007b26:	3708      	adds	r7, #8
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	bd80      	pop	{r7, pc}

08007b2c <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b082      	sub	sp, #8
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
 8007b34:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	885b      	ldrh	r3, [r3, #2]
 8007b3a:	2b01      	cmp	r3, #1
 8007b3c:	d106      	bne.n	8007b4c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2201      	movs	r2, #1
 8007b42:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	f000 f92a 	bl	8007da0 <USBD_CtlSendStatus>
  }
}
 8007b4c:	bf00      	nop
 8007b4e:	3708      	adds	r7, #8
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}

08007b54 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b082      	sub	sp, #8
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
 8007b5c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b64:	3b01      	subs	r3, #1
 8007b66:	2b02      	cmp	r3, #2
 8007b68:	d80b      	bhi.n	8007b82 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	885b      	ldrh	r3, [r3, #2]
 8007b6e:	2b01      	cmp	r3, #1
 8007b70:	d10c      	bne.n	8007b8c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2200      	movs	r2, #0
 8007b76:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	f000 f910 	bl	8007da0 <USBD_CtlSendStatus>
      }
      break;
 8007b80:	e004      	b.n	8007b8c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007b82:	6839      	ldr	r1, [r7, #0]
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	f000 f840 	bl	8007c0a <USBD_CtlError>
      break;
 8007b8a:	e000      	b.n	8007b8e <USBD_ClrFeature+0x3a>
      break;
 8007b8c:	bf00      	nop
  }
}
 8007b8e:	bf00      	nop
 8007b90:	3708      	adds	r7, #8
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bd80      	pop	{r7, pc}

08007b96 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007b96:	b580      	push	{r7, lr}
 8007b98:	b084      	sub	sp, #16
 8007b9a:	af00      	add	r7, sp, #0
 8007b9c:	6078      	str	r0, [r7, #4]
 8007b9e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	781a      	ldrb	r2, [r3, #0]
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	3301      	adds	r3, #1
 8007bb0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	781a      	ldrb	r2, [r3, #0]
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	3301      	adds	r3, #1
 8007bbe:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007bc0:	68f8      	ldr	r0, [r7, #12]
 8007bc2:	f7ff fa9c 	bl	80070fe <SWAPBYTE>
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	461a      	mov	r2, r3
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	3301      	adds	r3, #1
 8007bd2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	3301      	adds	r3, #1
 8007bd8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007bda:	68f8      	ldr	r0, [r7, #12]
 8007bdc:	f7ff fa8f 	bl	80070fe <SWAPBYTE>
 8007be0:	4603      	mov	r3, r0
 8007be2:	461a      	mov	r2, r3
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	3301      	adds	r3, #1
 8007bec:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	3301      	adds	r3, #1
 8007bf2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007bf4:	68f8      	ldr	r0, [r7, #12]
 8007bf6:	f7ff fa82 	bl	80070fe <SWAPBYTE>
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	461a      	mov	r2, r3
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	80da      	strh	r2, [r3, #6]
}
 8007c02:	bf00      	nop
 8007c04:	3710      	adds	r7, #16
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}

08007c0a <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c0a:	b580      	push	{r7, lr}
 8007c0c:	b082      	sub	sp, #8
 8007c0e:	af00      	add	r7, sp, #0
 8007c10:	6078      	str	r0, [r7, #4]
 8007c12:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007c14:	2180      	movs	r1, #128	; 0x80
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f000 fd42 	bl	80086a0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007c1c:	2100      	movs	r1, #0
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f000 fd3e 	bl	80086a0 <USBD_LL_StallEP>
}
 8007c24:	bf00      	nop
 8007c26:	3708      	adds	r7, #8
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bd80      	pop	{r7, pc}

08007c2c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b086      	sub	sp, #24
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	60f8      	str	r0, [r7, #12]
 8007c34:	60b9      	str	r1, [r7, #8]
 8007c36:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007c38:	2300      	movs	r3, #0
 8007c3a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d036      	beq.n	8007cb0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007c46:	6938      	ldr	r0, [r7, #16]
 8007c48:	f000 f836 	bl	8007cb8 <USBD_GetLen>
 8007c4c:	4603      	mov	r3, r0
 8007c4e:	3301      	adds	r3, #1
 8007c50:	b29b      	uxth	r3, r3
 8007c52:	005b      	lsls	r3, r3, #1
 8007c54:	b29a      	uxth	r2, r3
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007c5a:	7dfb      	ldrb	r3, [r7, #23]
 8007c5c:	68ba      	ldr	r2, [r7, #8]
 8007c5e:	4413      	add	r3, r2
 8007c60:	687a      	ldr	r2, [r7, #4]
 8007c62:	7812      	ldrb	r2, [r2, #0]
 8007c64:	701a      	strb	r2, [r3, #0]
  idx++;
 8007c66:	7dfb      	ldrb	r3, [r7, #23]
 8007c68:	3301      	adds	r3, #1
 8007c6a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007c6c:	7dfb      	ldrb	r3, [r7, #23]
 8007c6e:	68ba      	ldr	r2, [r7, #8]
 8007c70:	4413      	add	r3, r2
 8007c72:	2203      	movs	r2, #3
 8007c74:	701a      	strb	r2, [r3, #0]
  idx++;
 8007c76:	7dfb      	ldrb	r3, [r7, #23]
 8007c78:	3301      	adds	r3, #1
 8007c7a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007c7c:	e013      	b.n	8007ca6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007c7e:	7dfb      	ldrb	r3, [r7, #23]
 8007c80:	68ba      	ldr	r2, [r7, #8]
 8007c82:	4413      	add	r3, r2
 8007c84:	693a      	ldr	r2, [r7, #16]
 8007c86:	7812      	ldrb	r2, [r2, #0]
 8007c88:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007c8a:	693b      	ldr	r3, [r7, #16]
 8007c8c:	3301      	adds	r3, #1
 8007c8e:	613b      	str	r3, [r7, #16]
    idx++;
 8007c90:	7dfb      	ldrb	r3, [r7, #23]
 8007c92:	3301      	adds	r3, #1
 8007c94:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007c96:	7dfb      	ldrb	r3, [r7, #23]
 8007c98:	68ba      	ldr	r2, [r7, #8]
 8007c9a:	4413      	add	r3, r2
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	701a      	strb	r2, [r3, #0]
    idx++;
 8007ca0:	7dfb      	ldrb	r3, [r7, #23]
 8007ca2:	3301      	adds	r3, #1
 8007ca4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007ca6:	693b      	ldr	r3, [r7, #16]
 8007ca8:	781b      	ldrb	r3, [r3, #0]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d1e7      	bne.n	8007c7e <USBD_GetString+0x52>
 8007cae:	e000      	b.n	8007cb2 <USBD_GetString+0x86>
    return;
 8007cb0:	bf00      	nop
  }
}
 8007cb2:	3718      	adds	r7, #24
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	bd80      	pop	{r7, pc}

08007cb8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007cb8:	b480      	push	{r7}
 8007cba:	b085      	sub	sp, #20
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007cc8:	e005      	b.n	8007cd6 <USBD_GetLen+0x1e>
  {
    len++;
 8007cca:	7bfb      	ldrb	r3, [r7, #15]
 8007ccc:	3301      	adds	r3, #1
 8007cce:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	3301      	adds	r3, #1
 8007cd4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	781b      	ldrb	r3, [r3, #0]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d1f5      	bne.n	8007cca <USBD_GetLen+0x12>
  }

  return len;
 8007cde:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	3714      	adds	r7, #20
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cea:	4770      	bx	lr

08007cec <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b084      	sub	sp, #16
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	60f8      	str	r0, [r7, #12]
 8007cf4:	60b9      	str	r1, [r7, #8]
 8007cf6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	2202      	movs	r2, #2
 8007cfc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	687a      	ldr	r2, [r7, #4]
 8007d04:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	687a      	ldr	r2, [r7, #4]
 8007d0a:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	68ba      	ldr	r2, [r7, #8]
 8007d10:	2100      	movs	r1, #0
 8007d12:	68f8      	ldr	r0, [r7, #12]
 8007d14:	f000 fd4d 	bl	80087b2 <USBD_LL_Transmit>

  return USBD_OK;
 8007d18:	2300      	movs	r3, #0
}
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	3710      	adds	r7, #16
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}

08007d22 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007d22:	b580      	push	{r7, lr}
 8007d24:	b084      	sub	sp, #16
 8007d26:	af00      	add	r7, sp, #0
 8007d28:	60f8      	str	r0, [r7, #12]
 8007d2a:	60b9      	str	r1, [r7, #8]
 8007d2c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	68ba      	ldr	r2, [r7, #8]
 8007d32:	2100      	movs	r1, #0
 8007d34:	68f8      	ldr	r0, [r7, #12]
 8007d36:	f000 fd3c 	bl	80087b2 <USBD_LL_Transmit>

  return USBD_OK;
 8007d3a:	2300      	movs	r3, #0
}
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	3710      	adds	r7, #16
 8007d40:	46bd      	mov	sp, r7
 8007d42:	bd80      	pop	{r7, pc}

08007d44 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b084      	sub	sp, #16
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	60f8      	str	r0, [r7, #12]
 8007d4c:	60b9      	str	r1, [r7, #8]
 8007d4e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	2203      	movs	r2, #3
 8007d54:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	687a      	ldr	r2, [r7, #4]
 8007d5c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	687a      	ldr	r2, [r7, #4]
 8007d64:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	68ba      	ldr	r2, [r7, #8]
 8007d6c:	2100      	movs	r1, #0
 8007d6e:	68f8      	ldr	r0, [r7, #12]
 8007d70:	f000 fd40 	bl	80087f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007d74:	2300      	movs	r3, #0
}
 8007d76:	4618      	mov	r0, r3
 8007d78:	3710      	adds	r7, #16
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bd80      	pop	{r7, pc}

08007d7e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007d7e:	b580      	push	{r7, lr}
 8007d80:	b084      	sub	sp, #16
 8007d82:	af00      	add	r7, sp, #0
 8007d84:	60f8      	str	r0, [r7, #12]
 8007d86:	60b9      	str	r1, [r7, #8]
 8007d88:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	68ba      	ldr	r2, [r7, #8]
 8007d8e:	2100      	movs	r1, #0
 8007d90:	68f8      	ldr	r0, [r7, #12]
 8007d92:	f000 fd2f 	bl	80087f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007d96:	2300      	movs	r3, #0
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	3710      	adds	r7, #16
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bd80      	pop	{r7, pc}

08007da0 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b082      	sub	sp, #8
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2204      	movs	r2, #4
 8007dac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007db0:	2300      	movs	r3, #0
 8007db2:	2200      	movs	r2, #0
 8007db4:	2100      	movs	r1, #0
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	f000 fcfb 	bl	80087b2 <USBD_LL_Transmit>

  return USBD_OK;
 8007dbc:	2300      	movs	r3, #0
}
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	3708      	adds	r7, #8
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bd80      	pop	{r7, pc}

08007dc6 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007dc6:	b580      	push	{r7, lr}
 8007dc8:	b082      	sub	sp, #8
 8007dca:	af00      	add	r7, sp, #0
 8007dcc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2205      	movs	r2, #5
 8007dd2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	2200      	movs	r2, #0
 8007dda:	2100      	movs	r1, #0
 8007ddc:	6878      	ldr	r0, [r7, #4]
 8007dde:	f000 fd09 	bl	80087f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007de2:	2300      	movs	r3, #0
}
 8007de4:	4618      	mov	r0, r3
 8007de6:	3708      	adds	r7, #8
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}

08007dec <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007df0:	2200      	movs	r2, #0
 8007df2:	4912      	ldr	r1, [pc, #72]	; (8007e3c <MX_USB_DEVICE_Init+0x50>)
 8007df4:	4812      	ldr	r0, [pc, #72]	; (8007e40 <MX_USB_DEVICE_Init+0x54>)
 8007df6:	f7fe febb 	bl	8006b70 <USBD_Init>
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d001      	beq.n	8007e04 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007e00:	f7f8 fef4 	bl	8000bec <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007e04:	490f      	ldr	r1, [pc, #60]	; (8007e44 <MX_USB_DEVICE_Init+0x58>)
 8007e06:	480e      	ldr	r0, [pc, #56]	; (8007e40 <MX_USB_DEVICE_Init+0x54>)
 8007e08:	f7fe fee8 	bl	8006bdc <USBD_RegisterClass>
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d001      	beq.n	8007e16 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007e12:	f7f8 feeb 	bl	8000bec <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007e16:	490c      	ldr	r1, [pc, #48]	; (8007e48 <MX_USB_DEVICE_Init+0x5c>)
 8007e18:	4809      	ldr	r0, [pc, #36]	; (8007e40 <MX_USB_DEVICE_Init+0x54>)
 8007e1a:	f7fe fe0d 	bl	8006a38 <USBD_CDC_RegisterInterface>
 8007e1e:	4603      	mov	r3, r0
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d001      	beq.n	8007e28 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007e24:	f7f8 fee2 	bl	8000bec <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007e28:	4805      	ldr	r0, [pc, #20]	; (8007e40 <MX_USB_DEVICE_Init+0x54>)
 8007e2a:	f7fe fef8 	bl	8006c1e <USBD_Start>
 8007e2e:	4603      	mov	r3, r0
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d001      	beq.n	8007e38 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007e34:	f7f8 feda 	bl	8000bec <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007e38:	bf00      	nop
 8007e3a:	bd80      	pop	{r7, pc}
 8007e3c:	20000130 	.word	0x20000130
 8007e40:	20000378 	.word	0x20000378
 8007e44:	20000018 	.word	0x20000018
 8007e48:	2000011c 	.word	0x2000011c

08007e4c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007e50:	2200      	movs	r2, #0
 8007e52:	4905      	ldr	r1, [pc, #20]	; (8007e68 <CDC_Init_FS+0x1c>)
 8007e54:	4805      	ldr	r0, [pc, #20]	; (8007e6c <CDC_Init_FS+0x20>)
 8007e56:	f7fe fe04 	bl	8006a62 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007e5a:	4905      	ldr	r1, [pc, #20]	; (8007e70 <CDC_Init_FS+0x24>)
 8007e5c:	4803      	ldr	r0, [pc, #12]	; (8007e6c <CDC_Init_FS+0x20>)
 8007e5e:	f7fe fe19 	bl	8006a94 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007e62:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007e64:	4618      	mov	r0, r3
 8007e66:	bd80      	pop	{r7, pc}
 8007e68:	20000e48 	.word	0x20000e48
 8007e6c:	20000378 	.word	0x20000378
 8007e70:	20000648 	.word	0x20000648

08007e74 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007e74:	b480      	push	{r7}
 8007e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007e78:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e82:	4770      	bx	lr

08007e84 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007e84:	b480      	push	{r7}
 8007e86:	b085      	sub	sp, #20
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	6039      	str	r1, [r7, #0]
 8007e8e:	71fb      	strb	r3, [r7, #7]
 8007e90:	4613      	mov	r3, r2
 8007e92:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  uint8_t tempbuf[7] = {0,0,0,0,0,0,0};
 8007e94:	4a49      	ldr	r2, [pc, #292]	; (8007fbc <CDC_Control_FS+0x138>)
 8007e96:	f107 0308 	add.w	r3, r7, #8
 8007e9a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007e9e:	6018      	str	r0, [r3, #0]
 8007ea0:	3304      	adds	r3, #4
 8007ea2:	8019      	strh	r1, [r3, #0]
 8007ea4:	3302      	adds	r3, #2
 8007ea6:	0c0a      	lsrs	r2, r1, #16
 8007ea8:	701a      	strb	r2, [r3, #0]
  switch(cmd)
 8007eaa:	79fb      	ldrb	r3, [r7, #7]
 8007eac:	2b23      	cmp	r3, #35	; 0x23
 8007eae:	d87d      	bhi.n	8007fac <CDC_Control_FS+0x128>
 8007eb0:	a201      	add	r2, pc, #4	; (adr r2, 8007eb8 <CDC_Control_FS+0x34>)
 8007eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eb6:	bf00      	nop
 8007eb8:	08007fad 	.word	0x08007fad
 8007ebc:	08007fad 	.word	0x08007fad
 8007ec0:	08007fad 	.word	0x08007fad
 8007ec4:	08007fad 	.word	0x08007fad
 8007ec8:	08007fad 	.word	0x08007fad
 8007ecc:	08007fad 	.word	0x08007fad
 8007ed0:	08007fad 	.word	0x08007fad
 8007ed4:	08007fad 	.word	0x08007fad
 8007ed8:	08007fad 	.word	0x08007fad
 8007edc:	08007fad 	.word	0x08007fad
 8007ee0:	08007fad 	.word	0x08007fad
 8007ee4:	08007fad 	.word	0x08007fad
 8007ee8:	08007fad 	.word	0x08007fad
 8007eec:	08007fad 	.word	0x08007fad
 8007ef0:	08007fad 	.word	0x08007fad
 8007ef4:	08007fad 	.word	0x08007fad
 8007ef8:	08007fad 	.word	0x08007fad
 8007efc:	08007fad 	.word	0x08007fad
 8007f00:	08007fad 	.word	0x08007fad
 8007f04:	08007fad 	.word	0x08007fad
 8007f08:	08007fad 	.word	0x08007fad
 8007f0c:	08007fad 	.word	0x08007fad
 8007f10:	08007fad 	.word	0x08007fad
 8007f14:	08007fad 	.word	0x08007fad
 8007f18:	08007fad 	.word	0x08007fad
 8007f1c:	08007fad 	.word	0x08007fad
 8007f20:	08007fad 	.word	0x08007fad
 8007f24:	08007fad 	.word	0x08007fad
 8007f28:	08007fad 	.word	0x08007fad
 8007f2c:	08007fad 	.word	0x08007fad
 8007f30:	08007fad 	.word	0x08007fad
 8007f34:	08007fad 	.word	0x08007fad
 8007f38:	08007f49 	.word	0x08007f49
 8007f3c:	08007f75 	.word	0x08007f75
 8007f40:	08007fad 	.word	0x08007fad
 8007f44:	08007fad 	.word	0x08007fad
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:

		tempbuf[0] = pbuf[0];
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	781b      	ldrb	r3, [r3, #0]
 8007f4c:	723b      	strb	r3, [r7, #8]
		tempbuf[1] = pbuf[1];
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	785b      	ldrb	r3, [r3, #1]
 8007f52:	727b      	strb	r3, [r7, #9]
		tempbuf[2] = pbuf[2];
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	789b      	ldrb	r3, [r3, #2]
 8007f58:	72bb      	strb	r3, [r7, #10]
		tempbuf[3] = pbuf[3];
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	78db      	ldrb	r3, [r3, #3]
 8007f5e:	72fb      	strb	r3, [r7, #11]
		tempbuf[4] = pbuf[4];
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	791b      	ldrb	r3, [r3, #4]
 8007f64:	733b      	strb	r3, [r7, #12]
		tempbuf[5] = pbuf[5];
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	795b      	ldrb	r3, [r3, #5]
 8007f6a:	737b      	strb	r3, [r7, #13]
		tempbuf[6] = pbuf[6];
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	799b      	ldrb	r3, [r3, #6]
 8007f70:	73bb      	strb	r3, [r7, #14]
		break;
 8007f72:	e01c      	b.n	8007fae <CDC_Control_FS+0x12a>

    case CDC_GET_LINE_CODING:
		pbuf[0] = tempbuf[0];
 8007f74:	7a3a      	ldrb	r2, [r7, #8]
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	701a      	strb	r2, [r3, #0]
		pbuf[1] = tempbuf[1];
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	3301      	adds	r3, #1
 8007f7e:	7a7a      	ldrb	r2, [r7, #9]
 8007f80:	701a      	strb	r2, [r3, #0]
		pbuf[2] = tempbuf[2];
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	3302      	adds	r3, #2
 8007f86:	7aba      	ldrb	r2, [r7, #10]
 8007f88:	701a      	strb	r2, [r3, #0]
		pbuf[3] = tempbuf[3];
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	3303      	adds	r3, #3
 8007f8e:	7afa      	ldrb	r2, [r7, #11]
 8007f90:	701a      	strb	r2, [r3, #0]
		pbuf[4] = tempbuf[4];
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	3304      	adds	r3, #4
 8007f96:	7b3a      	ldrb	r2, [r7, #12]
 8007f98:	701a      	strb	r2, [r3, #0]
		pbuf[5] = tempbuf[5];
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	3305      	adds	r3, #5
 8007f9e:	7b7a      	ldrb	r2, [r7, #13]
 8007fa0:	701a      	strb	r2, [r3, #0]
		pbuf[6] = tempbuf[6];
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	3306      	adds	r3, #6
 8007fa6:	7bba      	ldrb	r2, [r7, #14]
 8007fa8:	701a      	strb	r2, [r3, #0]
		break;
 8007faa:	e000      	b.n	8007fae <CDC_Control_FS+0x12a>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007fac:	bf00      	nop
  }

  return (USBD_OK);
 8007fae:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	3714      	adds	r7, #20
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fba:	4770      	bx	lr
 8007fbc:	0800928c 	.word	0x0800928c

08007fc0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b082      	sub	sp, #8
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
 8007fc8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007fca:	6879      	ldr	r1, [r7, #4]
 8007fcc:	4805      	ldr	r0, [pc, #20]	; (8007fe4 <CDC_Receive_FS+0x24>)
 8007fce:	f7fe fd61 	bl	8006a94 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007fd2:	4804      	ldr	r0, [pc, #16]	; (8007fe4 <CDC_Receive_FS+0x24>)
 8007fd4:	f7fe fda2 	bl	8006b1c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007fd8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	3708      	adds	r7, #8
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bd80      	pop	{r7, pc}
 8007fe2:	bf00      	nop
 8007fe4:	20000378 	.word	0x20000378

08007fe8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b084      	sub	sp, #16
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
 8007ff0:	460b      	mov	r3, r1
 8007ff2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007ff8:	4b0d      	ldr	r3, [pc, #52]	; (8008030 <CDC_Transmit_FS+0x48>)
 8007ffa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ffe:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008000:	68bb      	ldr	r3, [r7, #8]
 8008002:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008006:	2b00      	cmp	r3, #0
 8008008:	d001      	beq.n	800800e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800800a:	2301      	movs	r3, #1
 800800c:	e00b      	b.n	8008026 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800800e:	887b      	ldrh	r3, [r7, #2]
 8008010:	461a      	mov	r2, r3
 8008012:	6879      	ldr	r1, [r7, #4]
 8008014:	4806      	ldr	r0, [pc, #24]	; (8008030 <CDC_Transmit_FS+0x48>)
 8008016:	f7fe fd24 	bl	8006a62 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800801a:	4805      	ldr	r0, [pc, #20]	; (8008030 <CDC_Transmit_FS+0x48>)
 800801c:	f7fe fd4e 	bl	8006abc <USBD_CDC_TransmitPacket>
 8008020:	4603      	mov	r3, r0
 8008022:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008024:	7bfb      	ldrb	r3, [r7, #15]
}
 8008026:	4618      	mov	r0, r3
 8008028:	3710      	adds	r7, #16
 800802a:	46bd      	mov	sp, r7
 800802c:	bd80      	pop	{r7, pc}
 800802e:	bf00      	nop
 8008030:	20000378 	.word	0x20000378

08008034 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008034:	b480      	push	{r7}
 8008036:	b087      	sub	sp, #28
 8008038:	af00      	add	r7, sp, #0
 800803a:	60f8      	str	r0, [r7, #12]
 800803c:	60b9      	str	r1, [r7, #8]
 800803e:	4613      	mov	r3, r2
 8008040:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008042:	2300      	movs	r3, #0
 8008044:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008046:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800804a:	4618      	mov	r0, r3
 800804c:	371c      	adds	r7, #28
 800804e:	46bd      	mov	sp, r7
 8008050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008054:	4770      	bx	lr
	...

08008058 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008058:	b480      	push	{r7}
 800805a:	b083      	sub	sp, #12
 800805c:	af00      	add	r7, sp, #0
 800805e:	4603      	mov	r3, r0
 8008060:	6039      	str	r1, [r7, #0]
 8008062:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	2212      	movs	r2, #18
 8008068:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800806a:	4b03      	ldr	r3, [pc, #12]	; (8008078 <USBD_FS_DeviceDescriptor+0x20>)
}
 800806c:	4618      	mov	r0, r3
 800806e:	370c      	adds	r7, #12
 8008070:	46bd      	mov	sp, r7
 8008072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008076:	4770      	bx	lr
 8008078:	20000150 	.word	0x20000150

0800807c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800807c:	b480      	push	{r7}
 800807e:	b083      	sub	sp, #12
 8008080:	af00      	add	r7, sp, #0
 8008082:	4603      	mov	r3, r0
 8008084:	6039      	str	r1, [r7, #0]
 8008086:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	2204      	movs	r2, #4
 800808c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800808e:	4b03      	ldr	r3, [pc, #12]	; (800809c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008090:	4618      	mov	r0, r3
 8008092:	370c      	adds	r7, #12
 8008094:	46bd      	mov	sp, r7
 8008096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809a:	4770      	bx	lr
 800809c:	20000170 	.word	0x20000170

080080a0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b082      	sub	sp, #8
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	4603      	mov	r3, r0
 80080a8:	6039      	str	r1, [r7, #0]
 80080aa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80080ac:	79fb      	ldrb	r3, [r7, #7]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d105      	bne.n	80080be <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80080b2:	683a      	ldr	r2, [r7, #0]
 80080b4:	4907      	ldr	r1, [pc, #28]	; (80080d4 <USBD_FS_ProductStrDescriptor+0x34>)
 80080b6:	4808      	ldr	r0, [pc, #32]	; (80080d8 <USBD_FS_ProductStrDescriptor+0x38>)
 80080b8:	f7ff fdb8 	bl	8007c2c <USBD_GetString>
 80080bc:	e004      	b.n	80080c8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80080be:	683a      	ldr	r2, [r7, #0]
 80080c0:	4904      	ldr	r1, [pc, #16]	; (80080d4 <USBD_FS_ProductStrDescriptor+0x34>)
 80080c2:	4805      	ldr	r0, [pc, #20]	; (80080d8 <USBD_FS_ProductStrDescriptor+0x38>)
 80080c4:	f7ff fdb2 	bl	8007c2c <USBD_GetString>
  }
  return USBD_StrDesc;
 80080c8:	4b02      	ldr	r3, [pc, #8]	; (80080d4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80080ca:	4618      	mov	r0, r3
 80080cc:	3708      	adds	r7, #8
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bd80      	pop	{r7, pc}
 80080d2:	bf00      	nop
 80080d4:	20001648 	.word	0x20001648
 80080d8:	08009294 	.word	0x08009294

080080dc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b082      	sub	sp, #8
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	4603      	mov	r3, r0
 80080e4:	6039      	str	r1, [r7, #0]
 80080e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80080e8:	683a      	ldr	r2, [r7, #0]
 80080ea:	4904      	ldr	r1, [pc, #16]	; (80080fc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80080ec:	4804      	ldr	r0, [pc, #16]	; (8008100 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80080ee:	f7ff fd9d 	bl	8007c2c <USBD_GetString>
  return USBD_StrDesc;
 80080f2:	4b02      	ldr	r3, [pc, #8]	; (80080fc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80080f4:	4618      	mov	r0, r3
 80080f6:	3708      	adds	r7, #8
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd80      	pop	{r7, pc}
 80080fc:	20001648 	.word	0x20001648
 8008100:	080092ac 	.word	0x080092ac

08008104 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b082      	sub	sp, #8
 8008108:	af00      	add	r7, sp, #0
 800810a:	4603      	mov	r3, r0
 800810c:	6039      	str	r1, [r7, #0]
 800810e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	221a      	movs	r2, #26
 8008114:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008116:	f000 f855 	bl	80081c4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800811a:	4b02      	ldr	r3, [pc, #8]	; (8008124 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800811c:	4618      	mov	r0, r3
 800811e:	3708      	adds	r7, #8
 8008120:	46bd      	mov	sp, r7
 8008122:	bd80      	pop	{r7, pc}
 8008124:	20000174 	.word	0x20000174

08008128 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b082      	sub	sp, #8
 800812c:	af00      	add	r7, sp, #0
 800812e:	4603      	mov	r3, r0
 8008130:	6039      	str	r1, [r7, #0]
 8008132:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008134:	79fb      	ldrb	r3, [r7, #7]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d105      	bne.n	8008146 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800813a:	683a      	ldr	r2, [r7, #0]
 800813c:	4907      	ldr	r1, [pc, #28]	; (800815c <USBD_FS_ConfigStrDescriptor+0x34>)
 800813e:	4808      	ldr	r0, [pc, #32]	; (8008160 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008140:	f7ff fd74 	bl	8007c2c <USBD_GetString>
 8008144:	e004      	b.n	8008150 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008146:	683a      	ldr	r2, [r7, #0]
 8008148:	4904      	ldr	r1, [pc, #16]	; (800815c <USBD_FS_ConfigStrDescriptor+0x34>)
 800814a:	4805      	ldr	r0, [pc, #20]	; (8008160 <USBD_FS_ConfigStrDescriptor+0x38>)
 800814c:	f7ff fd6e 	bl	8007c2c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008150:	4b02      	ldr	r3, [pc, #8]	; (800815c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008152:	4618      	mov	r0, r3
 8008154:	3708      	adds	r7, #8
 8008156:	46bd      	mov	sp, r7
 8008158:	bd80      	pop	{r7, pc}
 800815a:	bf00      	nop
 800815c:	20001648 	.word	0x20001648
 8008160:	080092c0 	.word	0x080092c0

08008164 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b082      	sub	sp, #8
 8008168:	af00      	add	r7, sp, #0
 800816a:	4603      	mov	r3, r0
 800816c:	6039      	str	r1, [r7, #0]
 800816e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008170:	79fb      	ldrb	r3, [r7, #7]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d105      	bne.n	8008182 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008176:	683a      	ldr	r2, [r7, #0]
 8008178:	4907      	ldr	r1, [pc, #28]	; (8008198 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800817a:	4808      	ldr	r0, [pc, #32]	; (800819c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800817c:	f7ff fd56 	bl	8007c2c <USBD_GetString>
 8008180:	e004      	b.n	800818c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008182:	683a      	ldr	r2, [r7, #0]
 8008184:	4904      	ldr	r1, [pc, #16]	; (8008198 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008186:	4805      	ldr	r0, [pc, #20]	; (800819c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008188:	f7ff fd50 	bl	8007c2c <USBD_GetString>
  }
  return USBD_StrDesc;
 800818c:	4b02      	ldr	r3, [pc, #8]	; (8008198 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800818e:	4618      	mov	r0, r3
 8008190:	3708      	adds	r7, #8
 8008192:	46bd      	mov	sp, r7
 8008194:	bd80      	pop	{r7, pc}
 8008196:	bf00      	nop
 8008198:	20001648 	.word	0x20001648
 800819c:	080092cc 	.word	0x080092cc

080081a0 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081a0:	b480      	push	{r7}
 80081a2:	b083      	sub	sp, #12
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	4603      	mov	r3, r0
 80081a8:	6039      	str	r1, [r7, #0]
 80081aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	220c      	movs	r2, #12
 80081b0:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 80081b2:	4b03      	ldr	r3, [pc, #12]	; (80081c0 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 80081b4:	4618      	mov	r0, r3
 80081b6:	370c      	adds	r7, #12
 80081b8:	46bd      	mov	sp, r7
 80081ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081be:	4770      	bx	lr
 80081c0:	20000164 	.word	0x20000164

080081c4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b084      	sub	sp, #16
 80081c8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80081ca:	4b0f      	ldr	r3, [pc, #60]	; (8008208 <Get_SerialNum+0x44>)
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80081d0:	4b0e      	ldr	r3, [pc, #56]	; (800820c <Get_SerialNum+0x48>)
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80081d6:	4b0e      	ldr	r3, [pc, #56]	; (8008210 <Get_SerialNum+0x4c>)
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80081dc:	68fa      	ldr	r2, [r7, #12]
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	4413      	add	r3, r2
 80081e2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d009      	beq.n	80081fe <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80081ea:	2208      	movs	r2, #8
 80081ec:	4909      	ldr	r1, [pc, #36]	; (8008214 <Get_SerialNum+0x50>)
 80081ee:	68f8      	ldr	r0, [r7, #12]
 80081f0:	f000 f814 	bl	800821c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80081f4:	2204      	movs	r2, #4
 80081f6:	4908      	ldr	r1, [pc, #32]	; (8008218 <Get_SerialNum+0x54>)
 80081f8:	68b8      	ldr	r0, [r7, #8]
 80081fa:	f000 f80f 	bl	800821c <IntToUnicode>
  }
}
 80081fe:	bf00      	nop
 8008200:	3710      	adds	r7, #16
 8008202:	46bd      	mov	sp, r7
 8008204:	bd80      	pop	{r7, pc}
 8008206:	bf00      	nop
 8008208:	1ff0f420 	.word	0x1ff0f420
 800820c:	1ff0f424 	.word	0x1ff0f424
 8008210:	1ff0f428 	.word	0x1ff0f428
 8008214:	20000176 	.word	0x20000176
 8008218:	20000186 	.word	0x20000186

0800821c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800821c:	b480      	push	{r7}
 800821e:	b087      	sub	sp, #28
 8008220:	af00      	add	r7, sp, #0
 8008222:	60f8      	str	r0, [r7, #12]
 8008224:	60b9      	str	r1, [r7, #8]
 8008226:	4613      	mov	r3, r2
 8008228:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800822a:	2300      	movs	r3, #0
 800822c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800822e:	2300      	movs	r3, #0
 8008230:	75fb      	strb	r3, [r7, #23]
 8008232:	e027      	b.n	8008284 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	0f1b      	lsrs	r3, r3, #28
 8008238:	2b09      	cmp	r3, #9
 800823a:	d80b      	bhi.n	8008254 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	0f1b      	lsrs	r3, r3, #28
 8008240:	b2da      	uxtb	r2, r3
 8008242:	7dfb      	ldrb	r3, [r7, #23]
 8008244:	005b      	lsls	r3, r3, #1
 8008246:	4619      	mov	r1, r3
 8008248:	68bb      	ldr	r3, [r7, #8]
 800824a:	440b      	add	r3, r1
 800824c:	3230      	adds	r2, #48	; 0x30
 800824e:	b2d2      	uxtb	r2, r2
 8008250:	701a      	strb	r2, [r3, #0]
 8008252:	e00a      	b.n	800826a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	0f1b      	lsrs	r3, r3, #28
 8008258:	b2da      	uxtb	r2, r3
 800825a:	7dfb      	ldrb	r3, [r7, #23]
 800825c:	005b      	lsls	r3, r3, #1
 800825e:	4619      	mov	r1, r3
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	440b      	add	r3, r1
 8008264:	3237      	adds	r2, #55	; 0x37
 8008266:	b2d2      	uxtb	r2, r2
 8008268:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	011b      	lsls	r3, r3, #4
 800826e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008270:	7dfb      	ldrb	r3, [r7, #23]
 8008272:	005b      	lsls	r3, r3, #1
 8008274:	3301      	adds	r3, #1
 8008276:	68ba      	ldr	r2, [r7, #8]
 8008278:	4413      	add	r3, r2
 800827a:	2200      	movs	r2, #0
 800827c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800827e:	7dfb      	ldrb	r3, [r7, #23]
 8008280:	3301      	adds	r3, #1
 8008282:	75fb      	strb	r3, [r7, #23]
 8008284:	7dfa      	ldrb	r2, [r7, #23]
 8008286:	79fb      	ldrb	r3, [r7, #7]
 8008288:	429a      	cmp	r2, r3
 800828a:	d3d3      	bcc.n	8008234 <IntToUnicode+0x18>
  }
}
 800828c:	bf00      	nop
 800828e:	bf00      	nop
 8008290:	371c      	adds	r7, #28
 8008292:	46bd      	mov	sp, r7
 8008294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008298:	4770      	bx	lr
	...

0800829c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b08a      	sub	sp, #40	; 0x28
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80082a4:	f107 0314 	add.w	r3, r7, #20
 80082a8:	2200      	movs	r2, #0
 80082aa:	601a      	str	r2, [r3, #0]
 80082ac:	605a      	str	r2, [r3, #4]
 80082ae:	609a      	str	r2, [r3, #8]
 80082b0:	60da      	str	r2, [r3, #12]
 80082b2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80082bc:	d149      	bne.n	8008352 <HAL_PCD_MspInit+0xb6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80082be:	4b27      	ldr	r3, [pc, #156]	; (800835c <HAL_PCD_MspInit+0xc0>)
 80082c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082c2:	4a26      	ldr	r2, [pc, #152]	; (800835c <HAL_PCD_MspInit+0xc0>)
 80082c4:	f043 0301 	orr.w	r3, r3, #1
 80082c8:	6313      	str	r3, [r2, #48]	; 0x30
 80082ca:	4b24      	ldr	r3, [pc, #144]	; (800835c <HAL_PCD_MspInit+0xc0>)
 80082cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082ce:	f003 0301 	and.w	r3, r3, #1
 80082d2:	613b      	str	r3, [r7, #16]
 80082d4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80082d6:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80082da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80082dc:	2302      	movs	r3, #2
 80082de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082e0:	2300      	movs	r3, #0
 80082e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80082e4:	2303      	movs	r3, #3
 80082e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80082e8:	230a      	movs	r3, #10
 80082ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80082ec:	f107 0314 	add.w	r3, r7, #20
 80082f0:	4619      	mov	r1, r3
 80082f2:	481b      	ldr	r0, [pc, #108]	; (8008360 <HAL_PCD_MspInit+0xc4>)
 80082f4:	f7f8 ff88 	bl	8001208 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80082f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80082fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80082fe:	2300      	movs	r3, #0
 8008300:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008302:	2300      	movs	r3, #0
 8008304:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8008306:	f107 0314 	add.w	r3, r7, #20
 800830a:	4619      	mov	r1, r3
 800830c:	4814      	ldr	r0, [pc, #80]	; (8008360 <HAL_PCD_MspInit+0xc4>)
 800830e:	f7f8 ff7b 	bl	8001208 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008312:	4b12      	ldr	r3, [pc, #72]	; (800835c <HAL_PCD_MspInit+0xc0>)
 8008314:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008316:	4a11      	ldr	r2, [pc, #68]	; (800835c <HAL_PCD_MspInit+0xc0>)
 8008318:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800831c:	6353      	str	r3, [r2, #52]	; 0x34
 800831e:	4b0f      	ldr	r3, [pc, #60]	; (800835c <HAL_PCD_MspInit+0xc0>)
 8008320:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008322:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008326:	60fb      	str	r3, [r7, #12]
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	4b0c      	ldr	r3, [pc, #48]	; (800835c <HAL_PCD_MspInit+0xc0>)
 800832c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800832e:	4a0b      	ldr	r2, [pc, #44]	; (800835c <HAL_PCD_MspInit+0xc0>)
 8008330:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008334:	6453      	str	r3, [r2, #68]	; 0x44
 8008336:	4b09      	ldr	r3, [pc, #36]	; (800835c <HAL_PCD_MspInit+0xc0>)
 8008338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800833a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800833e:	60bb      	str	r3, [r7, #8]
 8008340:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008342:	2200      	movs	r2, #0
 8008344:	2100      	movs	r1, #0
 8008346:	2043      	movs	r0, #67	; 0x43
 8008348:	f7f8 ff27 	bl	800119a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800834c:	2043      	movs	r0, #67	; 0x43
 800834e:	f7f8 ff40 	bl	80011d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008352:	bf00      	nop
 8008354:	3728      	adds	r7, #40	; 0x28
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}
 800835a:	bf00      	nop
 800835c:	40023800 	.word	0x40023800
 8008360:	40020000 	.word	0x40020000

08008364 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b082      	sub	sp, #8
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008378:	4619      	mov	r1, r3
 800837a:	4610      	mov	r0, r2
 800837c:	f7fe fc9a 	bl	8006cb4 <USBD_LL_SetupStage>
}
 8008380:	bf00      	nop
 8008382:	3708      	adds	r7, #8
 8008384:	46bd      	mov	sp, r7
 8008386:	bd80      	pop	{r7, pc}

08008388 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b082      	sub	sp, #8
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
 8008390:	460b      	mov	r3, r1
 8008392:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
 800839a:	78fa      	ldrb	r2, [r7, #3]
 800839c:	6879      	ldr	r1, [r7, #4]
 800839e:	4613      	mov	r3, r2
 80083a0:	00db      	lsls	r3, r3, #3
 80083a2:	1a9b      	subs	r3, r3, r2
 80083a4:	009b      	lsls	r3, r3, #2
 80083a6:	440b      	add	r3, r1
 80083a8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80083ac:	681a      	ldr	r2, [r3, #0]
 80083ae:	78fb      	ldrb	r3, [r7, #3]
 80083b0:	4619      	mov	r1, r3
 80083b2:	f7fe fcd4 	bl	8006d5e <USBD_LL_DataOutStage>
}
 80083b6:	bf00      	nop
 80083b8:	3708      	adds	r7, #8
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}

080083be <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083be:	b580      	push	{r7, lr}
 80083c0:	b082      	sub	sp, #8
 80083c2:	af00      	add	r7, sp, #0
 80083c4:	6078      	str	r0, [r7, #4]
 80083c6:	460b      	mov	r3, r1
 80083c8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
 80083d0:	78fa      	ldrb	r2, [r7, #3]
 80083d2:	6879      	ldr	r1, [r7, #4]
 80083d4:	4613      	mov	r3, r2
 80083d6:	00db      	lsls	r3, r3, #3
 80083d8:	1a9b      	subs	r3, r3, r2
 80083da:	009b      	lsls	r3, r3, #2
 80083dc:	440b      	add	r3, r1
 80083de:	3348      	adds	r3, #72	; 0x48
 80083e0:	681a      	ldr	r2, [r3, #0]
 80083e2:	78fb      	ldrb	r3, [r7, #3]
 80083e4:	4619      	mov	r1, r3
 80083e6:	f7fe fd1d 	bl	8006e24 <USBD_LL_DataInStage>
}
 80083ea:	bf00      	nop
 80083ec:	3708      	adds	r7, #8
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bd80      	pop	{r7, pc}

080083f2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083f2:	b580      	push	{r7, lr}
 80083f4:	b082      	sub	sp, #8
 80083f6:	af00      	add	r7, sp, #0
 80083f8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008400:	4618      	mov	r0, r3
 8008402:	f7fe fe21 	bl	8007048 <USBD_LL_SOF>
}
 8008406:	bf00      	nop
 8008408:	3708      	adds	r7, #8
 800840a:	46bd      	mov	sp, r7
 800840c:	bd80      	pop	{r7, pc}

0800840e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800840e:	b580      	push	{r7, lr}
 8008410:	b084      	sub	sp, #16
 8008412:	af00      	add	r7, sp, #0
 8008414:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008416:	2301      	movs	r3, #1
 8008418:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	68db      	ldr	r3, [r3, #12]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d102      	bne.n	8008428 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008422:	2300      	movs	r3, #0
 8008424:	73fb      	strb	r3, [r7, #15]
 8008426:	e008      	b.n	800843a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	68db      	ldr	r3, [r3, #12]
 800842c:	2b02      	cmp	r3, #2
 800842e:	d102      	bne.n	8008436 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008430:	2301      	movs	r3, #1
 8008432:	73fb      	strb	r3, [r7, #15]
 8008434:	e001      	b.n	800843a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8008436:	f7f8 fbd9 	bl	8000bec <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008440:	7bfa      	ldrb	r2, [r7, #15]
 8008442:	4611      	mov	r1, r2
 8008444:	4618      	mov	r0, r3
 8008446:	f7fe fdc4 	bl	8006fd2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008450:	4618      	mov	r0, r3
 8008452:	f7fe fd7d 	bl	8006f50 <USBD_LL_Reset>
}
 8008456:	bf00      	nop
 8008458:	3710      	adds	r7, #16
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}
	...

08008460 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b082      	sub	sp, #8
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800846e:	4618      	mov	r0, r3
 8008470:	f7fe fdbf 	bl	8006ff2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	687a      	ldr	r2, [r7, #4]
 8008480:	6812      	ldr	r2, [r2, #0]
 8008482:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008486:	f043 0301 	orr.w	r3, r3, #1
 800848a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	6a1b      	ldr	r3, [r3, #32]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d005      	beq.n	80084a0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008494:	4b04      	ldr	r3, [pc, #16]	; (80084a8 <HAL_PCD_SuspendCallback+0x48>)
 8008496:	691b      	ldr	r3, [r3, #16]
 8008498:	4a03      	ldr	r2, [pc, #12]	; (80084a8 <HAL_PCD_SuspendCallback+0x48>)
 800849a:	f043 0306 	orr.w	r3, r3, #6
 800849e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80084a0:	bf00      	nop
 80084a2:	3708      	adds	r7, #8
 80084a4:	46bd      	mov	sp, r7
 80084a6:	bd80      	pop	{r7, pc}
 80084a8:	e000ed00 	.word	0xe000ed00

080084ac <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b082      	sub	sp, #8
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80084ba:	4618      	mov	r0, r3
 80084bc:	f7fe fdae 	bl	800701c <USBD_LL_Resume>
}
 80084c0:	bf00      	nop
 80084c2:	3708      	adds	r7, #8
 80084c4:	46bd      	mov	sp, r7
 80084c6:	bd80      	pop	{r7, pc}

080084c8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b082      	sub	sp, #8
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
 80084d0:	460b      	mov	r3, r1
 80084d2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80084da:	78fa      	ldrb	r2, [r7, #3]
 80084dc:	4611      	mov	r1, r2
 80084de:	4618      	mov	r0, r3
 80084e0:	f7fe fdd9 	bl	8007096 <USBD_LL_IsoOUTIncomplete>
}
 80084e4:	bf00      	nop
 80084e6:	3708      	adds	r7, #8
 80084e8:	46bd      	mov	sp, r7
 80084ea:	bd80      	pop	{r7, pc}

080084ec <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b082      	sub	sp, #8
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
 80084f4:	460b      	mov	r3, r1
 80084f6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80084fe:	78fa      	ldrb	r2, [r7, #3]
 8008500:	4611      	mov	r1, r2
 8008502:	4618      	mov	r0, r3
 8008504:	f7fe fdba 	bl	800707c <USBD_LL_IsoINIncomplete>
}
 8008508:	bf00      	nop
 800850a:	3708      	adds	r7, #8
 800850c:	46bd      	mov	sp, r7
 800850e:	bd80      	pop	{r7, pc}

08008510 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b082      	sub	sp, #8
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800851e:	4618      	mov	r0, r3
 8008520:	f7fe fdc6 	bl	80070b0 <USBD_LL_DevConnected>
}
 8008524:	bf00      	nop
 8008526:	3708      	adds	r7, #8
 8008528:	46bd      	mov	sp, r7
 800852a:	bd80      	pop	{r7, pc}

0800852c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b082      	sub	sp, #8
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800853a:	4618      	mov	r0, r3
 800853c:	f7fe fdc3 	bl	80070c6 <USBD_LL_DevDisconnected>
}
 8008540:	bf00      	nop
 8008542:	3708      	adds	r7, #8
 8008544:	46bd      	mov	sp, r7
 8008546:	bd80      	pop	{r7, pc}

08008548 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b082      	sub	sp, #8
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	781b      	ldrb	r3, [r3, #0]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d13c      	bne.n	80085d2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008558:	4a20      	ldr	r2, [pc, #128]	; (80085dc <USBD_LL_Init+0x94>)
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
  pdev->pData = &hpcd_USB_OTG_FS;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	4a1e      	ldr	r2, [pc, #120]	; (80085dc <USBD_LL_Init+0x94>)
 8008564:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008568:	4b1c      	ldr	r3, [pc, #112]	; (80085dc <USBD_LL_Init+0x94>)
 800856a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800856e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8008570:	4b1a      	ldr	r3, [pc, #104]	; (80085dc <USBD_LL_Init+0x94>)
 8008572:	2206      	movs	r2, #6
 8008574:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008576:	4b19      	ldr	r3, [pc, #100]	; (80085dc <USBD_LL_Init+0x94>)
 8008578:	2202      	movs	r2, #2
 800857a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800857c:	4b17      	ldr	r3, [pc, #92]	; (80085dc <USBD_LL_Init+0x94>)
 800857e:	2200      	movs	r2, #0
 8008580:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008582:	4b16      	ldr	r3, [pc, #88]	; (80085dc <USBD_LL_Init+0x94>)
 8008584:	2202      	movs	r2, #2
 8008586:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8008588:	4b14      	ldr	r3, [pc, #80]	; (80085dc <USBD_LL_Init+0x94>)
 800858a:	2201      	movs	r2, #1
 800858c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800858e:	4b13      	ldr	r3, [pc, #76]	; (80085dc <USBD_LL_Init+0x94>)
 8008590:	2200      	movs	r2, #0
 8008592:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008594:	4b11      	ldr	r3, [pc, #68]	; (80085dc <USBD_LL_Init+0x94>)
 8008596:	2200      	movs	r2, #0
 8008598:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800859a:	4b10      	ldr	r3, [pc, #64]	; (80085dc <USBD_LL_Init+0x94>)
 800859c:	2200      	movs	r2, #0
 800859e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80085a0:	4b0e      	ldr	r3, [pc, #56]	; (80085dc <USBD_LL_Init+0x94>)
 80085a2:	2200      	movs	r2, #0
 80085a4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80085a6:	480d      	ldr	r0, [pc, #52]	; (80085dc <USBD_LL_Init+0x94>)
 80085a8:	f7f9 f80d 	bl	80015c6 <HAL_PCD_Init>
 80085ac:	4603      	mov	r3, r0
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d001      	beq.n	80085b6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80085b2:	f7f8 fb1b 	bl	8000bec <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80085b6:	2180      	movs	r1, #128	; 0x80
 80085b8:	4808      	ldr	r0, [pc, #32]	; (80085dc <USBD_LL_Init+0x94>)
 80085ba:	f7fa f98e 	bl	80028da <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80085be:	2240      	movs	r2, #64	; 0x40
 80085c0:	2100      	movs	r1, #0
 80085c2:	4806      	ldr	r0, [pc, #24]	; (80085dc <USBD_LL_Init+0x94>)
 80085c4:	f7fa f942 	bl	800284c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80085c8:	2280      	movs	r2, #128	; 0x80
 80085ca:	2101      	movs	r1, #1
 80085cc:	4803      	ldr	r0, [pc, #12]	; (80085dc <USBD_LL_Init+0x94>)
 80085ce:	f7fa f93d 	bl	800284c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80085d2:	2300      	movs	r3, #0
}
 80085d4:	4618      	mov	r0, r3
 80085d6:	3708      	adds	r7, #8
 80085d8:	46bd      	mov	sp, r7
 80085da:	bd80      	pop	{r7, pc}
 80085dc:	20001848 	.word	0x20001848

080085e0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b084      	sub	sp, #16
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085e8:	2300      	movs	r3, #0
 80085ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085ec:	2300      	movs	r3, #0
 80085ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80085f6:	4618      	mov	r0, r3
 80085f8:	f7f9 f909 	bl	800180e <HAL_PCD_Start>
 80085fc:	4603      	mov	r3, r0
 80085fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008600:	7bfb      	ldrb	r3, [r7, #15]
 8008602:	4618      	mov	r0, r3
 8008604:	f000 f97e 	bl	8008904 <USBD_Get_USB_Status>
 8008608:	4603      	mov	r3, r0
 800860a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800860c:	7bbb      	ldrb	r3, [r7, #14]
}
 800860e:	4618      	mov	r0, r3
 8008610:	3710      	adds	r7, #16
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}

08008616 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008616:	b580      	push	{r7, lr}
 8008618:	b084      	sub	sp, #16
 800861a:	af00      	add	r7, sp, #0
 800861c:	6078      	str	r0, [r7, #4]
 800861e:	4608      	mov	r0, r1
 8008620:	4611      	mov	r1, r2
 8008622:	461a      	mov	r2, r3
 8008624:	4603      	mov	r3, r0
 8008626:	70fb      	strb	r3, [r7, #3]
 8008628:	460b      	mov	r3, r1
 800862a:	70bb      	strb	r3, [r7, #2]
 800862c:	4613      	mov	r3, r2
 800862e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008630:	2300      	movs	r3, #0
 8008632:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008634:	2300      	movs	r3, #0
 8008636:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800863e:	78bb      	ldrb	r3, [r7, #2]
 8008640:	883a      	ldrh	r2, [r7, #0]
 8008642:	78f9      	ldrb	r1, [r7, #3]
 8008644:	f7f9 fd09 	bl	800205a <HAL_PCD_EP_Open>
 8008648:	4603      	mov	r3, r0
 800864a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800864c:	7bfb      	ldrb	r3, [r7, #15]
 800864e:	4618      	mov	r0, r3
 8008650:	f000 f958 	bl	8008904 <USBD_Get_USB_Status>
 8008654:	4603      	mov	r3, r0
 8008656:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008658:	7bbb      	ldrb	r3, [r7, #14]
}
 800865a:	4618      	mov	r0, r3
 800865c:	3710      	adds	r7, #16
 800865e:	46bd      	mov	sp, r7
 8008660:	bd80      	pop	{r7, pc}

08008662 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008662:	b580      	push	{r7, lr}
 8008664:	b084      	sub	sp, #16
 8008666:	af00      	add	r7, sp, #0
 8008668:	6078      	str	r0, [r7, #4]
 800866a:	460b      	mov	r3, r1
 800866c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800866e:	2300      	movs	r3, #0
 8008670:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008672:	2300      	movs	r3, #0
 8008674:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800867c:	78fa      	ldrb	r2, [r7, #3]
 800867e:	4611      	mov	r1, r2
 8008680:	4618      	mov	r0, r3
 8008682:	f7f9 fd52 	bl	800212a <HAL_PCD_EP_Close>
 8008686:	4603      	mov	r3, r0
 8008688:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800868a:	7bfb      	ldrb	r3, [r7, #15]
 800868c:	4618      	mov	r0, r3
 800868e:	f000 f939 	bl	8008904 <USBD_Get_USB_Status>
 8008692:	4603      	mov	r3, r0
 8008694:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008696:	7bbb      	ldrb	r3, [r7, #14]
}
 8008698:	4618      	mov	r0, r3
 800869a:	3710      	adds	r7, #16
 800869c:	46bd      	mov	sp, r7
 800869e:	bd80      	pop	{r7, pc}

080086a0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b084      	sub	sp, #16
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
 80086a8:	460b      	mov	r3, r1
 80086aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086ac:	2300      	movs	r3, #0
 80086ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086b0:	2300      	movs	r3, #0
 80086b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80086ba:	78fa      	ldrb	r2, [r7, #3]
 80086bc:	4611      	mov	r1, r2
 80086be:	4618      	mov	r0, r3
 80086c0:	f7f9 fe2a 	bl	8002318 <HAL_PCD_EP_SetStall>
 80086c4:	4603      	mov	r3, r0
 80086c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80086c8:	7bfb      	ldrb	r3, [r7, #15]
 80086ca:	4618      	mov	r0, r3
 80086cc:	f000 f91a 	bl	8008904 <USBD_Get_USB_Status>
 80086d0:	4603      	mov	r3, r0
 80086d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80086d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80086d6:	4618      	mov	r0, r3
 80086d8:	3710      	adds	r7, #16
 80086da:	46bd      	mov	sp, r7
 80086dc:	bd80      	pop	{r7, pc}

080086de <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80086de:	b580      	push	{r7, lr}
 80086e0:	b084      	sub	sp, #16
 80086e2:	af00      	add	r7, sp, #0
 80086e4:	6078      	str	r0, [r7, #4]
 80086e6:	460b      	mov	r3, r1
 80086e8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086ea:	2300      	movs	r3, #0
 80086ec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086ee:	2300      	movs	r3, #0
 80086f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80086f8:	78fa      	ldrb	r2, [r7, #3]
 80086fa:	4611      	mov	r1, r2
 80086fc:	4618      	mov	r0, r3
 80086fe:	f7f9 fe6f 	bl	80023e0 <HAL_PCD_EP_ClrStall>
 8008702:	4603      	mov	r3, r0
 8008704:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008706:	7bfb      	ldrb	r3, [r7, #15]
 8008708:	4618      	mov	r0, r3
 800870a:	f000 f8fb 	bl	8008904 <USBD_Get_USB_Status>
 800870e:	4603      	mov	r3, r0
 8008710:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008712:	7bbb      	ldrb	r3, [r7, #14]
}
 8008714:	4618      	mov	r0, r3
 8008716:	3710      	adds	r7, #16
 8008718:	46bd      	mov	sp, r7
 800871a:	bd80      	pop	{r7, pc}

0800871c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800871c:	b480      	push	{r7}
 800871e:	b085      	sub	sp, #20
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
 8008724:	460b      	mov	r3, r1
 8008726:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800872e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008730:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008734:	2b00      	cmp	r3, #0
 8008736:	da0b      	bge.n	8008750 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008738:	78fb      	ldrb	r3, [r7, #3]
 800873a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800873e:	68f9      	ldr	r1, [r7, #12]
 8008740:	4613      	mov	r3, r2
 8008742:	00db      	lsls	r3, r3, #3
 8008744:	1a9b      	subs	r3, r3, r2
 8008746:	009b      	lsls	r3, r3, #2
 8008748:	440b      	add	r3, r1
 800874a:	333e      	adds	r3, #62	; 0x3e
 800874c:	781b      	ldrb	r3, [r3, #0]
 800874e:	e00b      	b.n	8008768 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008750:	78fb      	ldrb	r3, [r7, #3]
 8008752:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008756:	68f9      	ldr	r1, [r7, #12]
 8008758:	4613      	mov	r3, r2
 800875a:	00db      	lsls	r3, r3, #3
 800875c:	1a9b      	subs	r3, r3, r2
 800875e:	009b      	lsls	r3, r3, #2
 8008760:	440b      	add	r3, r1
 8008762:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008766:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008768:	4618      	mov	r0, r3
 800876a:	3714      	adds	r7, #20
 800876c:	46bd      	mov	sp, r7
 800876e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008772:	4770      	bx	lr

08008774 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b084      	sub	sp, #16
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
 800877c:	460b      	mov	r3, r1
 800877e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008780:	2300      	movs	r3, #0
 8008782:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008784:	2300      	movs	r3, #0
 8008786:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800878e:	78fa      	ldrb	r2, [r7, #3]
 8008790:	4611      	mov	r1, r2
 8008792:	4618      	mov	r0, r3
 8008794:	f7f9 fc3c 	bl	8002010 <HAL_PCD_SetAddress>
 8008798:	4603      	mov	r3, r0
 800879a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800879c:	7bfb      	ldrb	r3, [r7, #15]
 800879e:	4618      	mov	r0, r3
 80087a0:	f000 f8b0 	bl	8008904 <USBD_Get_USB_Status>
 80087a4:	4603      	mov	r3, r0
 80087a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80087a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80087aa:	4618      	mov	r0, r3
 80087ac:	3710      	adds	r7, #16
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bd80      	pop	{r7, pc}

080087b2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80087b2:	b580      	push	{r7, lr}
 80087b4:	b086      	sub	sp, #24
 80087b6:	af00      	add	r7, sp, #0
 80087b8:	60f8      	str	r0, [r7, #12]
 80087ba:	607a      	str	r2, [r7, #4]
 80087bc:	603b      	str	r3, [r7, #0]
 80087be:	460b      	mov	r3, r1
 80087c0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087c2:	2300      	movs	r3, #0
 80087c4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087c6:	2300      	movs	r3, #0
 80087c8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80087d0:	7af9      	ldrb	r1, [r7, #11]
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	687a      	ldr	r2, [r7, #4]
 80087d6:	f7f9 fd55 	bl	8002284 <HAL_PCD_EP_Transmit>
 80087da:	4603      	mov	r3, r0
 80087dc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80087de:	7dfb      	ldrb	r3, [r7, #23]
 80087e0:	4618      	mov	r0, r3
 80087e2:	f000 f88f 	bl	8008904 <USBD_Get_USB_Status>
 80087e6:	4603      	mov	r3, r0
 80087e8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80087ea:	7dbb      	ldrb	r3, [r7, #22]
}
 80087ec:	4618      	mov	r0, r3
 80087ee:	3718      	adds	r7, #24
 80087f0:	46bd      	mov	sp, r7
 80087f2:	bd80      	pop	{r7, pc}

080087f4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b086      	sub	sp, #24
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	60f8      	str	r0, [r7, #12]
 80087fc:	607a      	str	r2, [r7, #4]
 80087fe:	603b      	str	r3, [r7, #0]
 8008800:	460b      	mov	r3, r1
 8008802:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008804:	2300      	movs	r3, #0
 8008806:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008808:	2300      	movs	r3, #0
 800880a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008812:	7af9      	ldrb	r1, [r7, #11]
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	687a      	ldr	r2, [r7, #4]
 8008818:	f7f9 fcd1 	bl	80021be <HAL_PCD_EP_Receive>
 800881c:	4603      	mov	r3, r0
 800881e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008820:	7dfb      	ldrb	r3, [r7, #23]
 8008822:	4618      	mov	r0, r3
 8008824:	f000 f86e 	bl	8008904 <USBD_Get_USB_Status>
 8008828:	4603      	mov	r3, r0
 800882a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800882c:	7dbb      	ldrb	r3, [r7, #22]
}
 800882e:	4618      	mov	r0, r3
 8008830:	3718      	adds	r7, #24
 8008832:	46bd      	mov	sp, r7
 8008834:	bd80      	pop	{r7, pc}

08008836 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008836:	b580      	push	{r7, lr}
 8008838:	b082      	sub	sp, #8
 800883a:	af00      	add	r7, sp, #0
 800883c:	6078      	str	r0, [r7, #4]
 800883e:	460b      	mov	r3, r1
 8008840:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008848:	78fa      	ldrb	r2, [r7, #3]
 800884a:	4611      	mov	r1, r2
 800884c:	4618      	mov	r0, r3
 800884e:	f7f9 fd01 	bl	8002254 <HAL_PCD_EP_GetRxCount>
 8008852:	4603      	mov	r3, r0
}
 8008854:	4618      	mov	r0, r3
 8008856:	3708      	adds	r7, #8
 8008858:	46bd      	mov	sp, r7
 800885a:	bd80      	pop	{r7, pc}

0800885c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b082      	sub	sp, #8
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
 8008864:	460b      	mov	r3, r1
 8008866:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8008868:	78fb      	ldrb	r3, [r7, #3]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d002      	beq.n	8008874 <HAL_PCDEx_LPM_Callback+0x18>
 800886e:	2b01      	cmp	r3, #1
 8008870:	d01f      	beq.n	80088b2 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8008872:	e03b      	b.n	80088ec <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	6a1b      	ldr	r3, [r3, #32]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d007      	beq.n	800888c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800887c:	f000 f83c 	bl	80088f8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008880:	4b1c      	ldr	r3, [pc, #112]	; (80088f4 <HAL_PCDEx_LPM_Callback+0x98>)
 8008882:	691b      	ldr	r3, [r3, #16]
 8008884:	4a1b      	ldr	r2, [pc, #108]	; (80088f4 <HAL_PCDEx_LPM_Callback+0x98>)
 8008886:	f023 0306 	bic.w	r3, r3, #6
 800888a:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	687a      	ldr	r2, [r7, #4]
 8008898:	6812      	ldr	r2, [r2, #0]
 800889a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800889e:	f023 0301 	bic.w	r3, r3, #1
 80088a2:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80088aa:	4618      	mov	r0, r3
 80088ac:	f7fe fbb6 	bl	800701c <USBD_LL_Resume>
    break;
 80088b0:	e01c      	b.n	80088ec <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	687a      	ldr	r2, [r7, #4]
 80088be:	6812      	ldr	r2, [r2, #0]
 80088c0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80088c4:	f043 0301 	orr.w	r3, r3, #1
 80088c8:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80088d0:	4618      	mov	r0, r3
 80088d2:	f7fe fb8e 	bl	8006ff2 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	6a1b      	ldr	r3, [r3, #32]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d005      	beq.n	80088ea <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80088de:	4b05      	ldr	r3, [pc, #20]	; (80088f4 <HAL_PCDEx_LPM_Callback+0x98>)
 80088e0:	691b      	ldr	r3, [r3, #16]
 80088e2:	4a04      	ldr	r2, [pc, #16]	; (80088f4 <HAL_PCDEx_LPM_Callback+0x98>)
 80088e4:	f043 0306 	orr.w	r3, r3, #6
 80088e8:	6113      	str	r3, [r2, #16]
    break;
 80088ea:	bf00      	nop
}
 80088ec:	bf00      	nop
 80088ee:	3708      	adds	r7, #8
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bd80      	pop	{r7, pc}
 80088f4:	e000ed00 	.word	0xe000ed00

080088f8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80088fc:	f7f7 ff78 	bl	80007f0 <SystemClock_Config>
}
 8008900:	bf00      	nop
 8008902:	bd80      	pop	{r7, pc}

08008904 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008904:	b480      	push	{r7}
 8008906:	b085      	sub	sp, #20
 8008908:	af00      	add	r7, sp, #0
 800890a:	4603      	mov	r3, r0
 800890c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800890e:	2300      	movs	r3, #0
 8008910:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008912:	79fb      	ldrb	r3, [r7, #7]
 8008914:	2b03      	cmp	r3, #3
 8008916:	d817      	bhi.n	8008948 <USBD_Get_USB_Status+0x44>
 8008918:	a201      	add	r2, pc, #4	; (adr r2, 8008920 <USBD_Get_USB_Status+0x1c>)
 800891a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800891e:	bf00      	nop
 8008920:	08008931 	.word	0x08008931
 8008924:	08008937 	.word	0x08008937
 8008928:	0800893d 	.word	0x0800893d
 800892c:	08008943 	.word	0x08008943
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008930:	2300      	movs	r3, #0
 8008932:	73fb      	strb	r3, [r7, #15]
    break;
 8008934:	e00b      	b.n	800894e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008936:	2303      	movs	r3, #3
 8008938:	73fb      	strb	r3, [r7, #15]
    break;
 800893a:	e008      	b.n	800894e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800893c:	2301      	movs	r3, #1
 800893e:	73fb      	strb	r3, [r7, #15]
    break;
 8008940:	e005      	b.n	800894e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008942:	2303      	movs	r3, #3
 8008944:	73fb      	strb	r3, [r7, #15]
    break;
 8008946:	e002      	b.n	800894e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008948:	2303      	movs	r3, #3
 800894a:	73fb      	strb	r3, [r7, #15]
    break;
 800894c:	bf00      	nop
  }
  return usb_status;
 800894e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008950:	4618      	mov	r0, r3
 8008952:	3714      	adds	r7, #20
 8008954:	46bd      	mov	sp, r7
 8008956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895a:	4770      	bx	lr

0800895c <__errno>:
 800895c:	4b01      	ldr	r3, [pc, #4]	; (8008964 <__errno+0x8>)
 800895e:	6818      	ldr	r0, [r3, #0]
 8008960:	4770      	bx	lr
 8008962:	bf00      	nop
 8008964:	20000190 	.word	0x20000190

08008968 <__libc_init_array>:
 8008968:	b570      	push	{r4, r5, r6, lr}
 800896a:	4d0d      	ldr	r5, [pc, #52]	; (80089a0 <__libc_init_array+0x38>)
 800896c:	4c0d      	ldr	r4, [pc, #52]	; (80089a4 <__libc_init_array+0x3c>)
 800896e:	1b64      	subs	r4, r4, r5
 8008970:	10a4      	asrs	r4, r4, #2
 8008972:	2600      	movs	r6, #0
 8008974:	42a6      	cmp	r6, r4
 8008976:	d109      	bne.n	800898c <__libc_init_array+0x24>
 8008978:	4d0b      	ldr	r5, [pc, #44]	; (80089a8 <__libc_init_array+0x40>)
 800897a:	4c0c      	ldr	r4, [pc, #48]	; (80089ac <__libc_init_array+0x44>)
 800897c:	f000 fc5e 	bl	800923c <_init>
 8008980:	1b64      	subs	r4, r4, r5
 8008982:	10a4      	asrs	r4, r4, #2
 8008984:	2600      	movs	r6, #0
 8008986:	42a6      	cmp	r6, r4
 8008988:	d105      	bne.n	8008996 <__libc_init_array+0x2e>
 800898a:	bd70      	pop	{r4, r5, r6, pc}
 800898c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008990:	4798      	blx	r3
 8008992:	3601      	adds	r6, #1
 8008994:	e7ee      	b.n	8008974 <__libc_init_array+0xc>
 8008996:	f855 3b04 	ldr.w	r3, [r5], #4
 800899a:	4798      	blx	r3
 800899c:	3601      	adds	r6, #1
 800899e:	e7f2      	b.n	8008986 <__libc_init_array+0x1e>
 80089a0:	08009334 	.word	0x08009334
 80089a4:	08009334 	.word	0x08009334
 80089a8:	08009334 	.word	0x08009334
 80089ac:	08009338 	.word	0x08009338

080089b0 <malloc>:
 80089b0:	4b02      	ldr	r3, [pc, #8]	; (80089bc <malloc+0xc>)
 80089b2:	4601      	mov	r1, r0
 80089b4:	6818      	ldr	r0, [r3, #0]
 80089b6:	f000 b863 	b.w	8008a80 <_malloc_r>
 80089ba:	bf00      	nop
 80089bc:	20000190 	.word	0x20000190

080089c0 <free>:
 80089c0:	4b02      	ldr	r3, [pc, #8]	; (80089cc <free+0xc>)
 80089c2:	4601      	mov	r1, r0
 80089c4:	6818      	ldr	r0, [r3, #0]
 80089c6:	f000 b80b 	b.w	80089e0 <_free_r>
 80089ca:	bf00      	nop
 80089cc:	20000190 	.word	0x20000190

080089d0 <memset>:
 80089d0:	4402      	add	r2, r0
 80089d2:	4603      	mov	r3, r0
 80089d4:	4293      	cmp	r3, r2
 80089d6:	d100      	bne.n	80089da <memset+0xa>
 80089d8:	4770      	bx	lr
 80089da:	f803 1b01 	strb.w	r1, [r3], #1
 80089de:	e7f9      	b.n	80089d4 <memset+0x4>

080089e0 <_free_r>:
 80089e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80089e2:	2900      	cmp	r1, #0
 80089e4:	d048      	beq.n	8008a78 <_free_r+0x98>
 80089e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80089ea:	9001      	str	r0, [sp, #4]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	f1a1 0404 	sub.w	r4, r1, #4
 80089f2:	bfb8      	it	lt
 80089f4:	18e4      	addlt	r4, r4, r3
 80089f6:	f000 f8cd 	bl	8008b94 <__malloc_lock>
 80089fa:	4a20      	ldr	r2, [pc, #128]	; (8008a7c <_free_r+0x9c>)
 80089fc:	9801      	ldr	r0, [sp, #4]
 80089fe:	6813      	ldr	r3, [r2, #0]
 8008a00:	4615      	mov	r5, r2
 8008a02:	b933      	cbnz	r3, 8008a12 <_free_r+0x32>
 8008a04:	6063      	str	r3, [r4, #4]
 8008a06:	6014      	str	r4, [r2, #0]
 8008a08:	b003      	add	sp, #12
 8008a0a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008a0e:	f000 b8c7 	b.w	8008ba0 <__malloc_unlock>
 8008a12:	42a3      	cmp	r3, r4
 8008a14:	d90b      	bls.n	8008a2e <_free_r+0x4e>
 8008a16:	6821      	ldr	r1, [r4, #0]
 8008a18:	1862      	adds	r2, r4, r1
 8008a1a:	4293      	cmp	r3, r2
 8008a1c:	bf04      	itt	eq
 8008a1e:	681a      	ldreq	r2, [r3, #0]
 8008a20:	685b      	ldreq	r3, [r3, #4]
 8008a22:	6063      	str	r3, [r4, #4]
 8008a24:	bf04      	itt	eq
 8008a26:	1852      	addeq	r2, r2, r1
 8008a28:	6022      	streq	r2, [r4, #0]
 8008a2a:	602c      	str	r4, [r5, #0]
 8008a2c:	e7ec      	b.n	8008a08 <_free_r+0x28>
 8008a2e:	461a      	mov	r2, r3
 8008a30:	685b      	ldr	r3, [r3, #4]
 8008a32:	b10b      	cbz	r3, 8008a38 <_free_r+0x58>
 8008a34:	42a3      	cmp	r3, r4
 8008a36:	d9fa      	bls.n	8008a2e <_free_r+0x4e>
 8008a38:	6811      	ldr	r1, [r2, #0]
 8008a3a:	1855      	adds	r5, r2, r1
 8008a3c:	42a5      	cmp	r5, r4
 8008a3e:	d10b      	bne.n	8008a58 <_free_r+0x78>
 8008a40:	6824      	ldr	r4, [r4, #0]
 8008a42:	4421      	add	r1, r4
 8008a44:	1854      	adds	r4, r2, r1
 8008a46:	42a3      	cmp	r3, r4
 8008a48:	6011      	str	r1, [r2, #0]
 8008a4a:	d1dd      	bne.n	8008a08 <_free_r+0x28>
 8008a4c:	681c      	ldr	r4, [r3, #0]
 8008a4e:	685b      	ldr	r3, [r3, #4]
 8008a50:	6053      	str	r3, [r2, #4]
 8008a52:	4421      	add	r1, r4
 8008a54:	6011      	str	r1, [r2, #0]
 8008a56:	e7d7      	b.n	8008a08 <_free_r+0x28>
 8008a58:	d902      	bls.n	8008a60 <_free_r+0x80>
 8008a5a:	230c      	movs	r3, #12
 8008a5c:	6003      	str	r3, [r0, #0]
 8008a5e:	e7d3      	b.n	8008a08 <_free_r+0x28>
 8008a60:	6825      	ldr	r5, [r4, #0]
 8008a62:	1961      	adds	r1, r4, r5
 8008a64:	428b      	cmp	r3, r1
 8008a66:	bf04      	itt	eq
 8008a68:	6819      	ldreq	r1, [r3, #0]
 8008a6a:	685b      	ldreq	r3, [r3, #4]
 8008a6c:	6063      	str	r3, [r4, #4]
 8008a6e:	bf04      	itt	eq
 8008a70:	1949      	addeq	r1, r1, r5
 8008a72:	6021      	streq	r1, [r4, #0]
 8008a74:	6054      	str	r4, [r2, #4]
 8008a76:	e7c7      	b.n	8008a08 <_free_r+0x28>
 8008a78:	b003      	add	sp, #12
 8008a7a:	bd30      	pop	{r4, r5, pc}
 8008a7c:	20000220 	.word	0x20000220

08008a80 <_malloc_r>:
 8008a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a82:	1ccd      	adds	r5, r1, #3
 8008a84:	f025 0503 	bic.w	r5, r5, #3
 8008a88:	3508      	adds	r5, #8
 8008a8a:	2d0c      	cmp	r5, #12
 8008a8c:	bf38      	it	cc
 8008a8e:	250c      	movcc	r5, #12
 8008a90:	2d00      	cmp	r5, #0
 8008a92:	4606      	mov	r6, r0
 8008a94:	db01      	blt.n	8008a9a <_malloc_r+0x1a>
 8008a96:	42a9      	cmp	r1, r5
 8008a98:	d903      	bls.n	8008aa2 <_malloc_r+0x22>
 8008a9a:	230c      	movs	r3, #12
 8008a9c:	6033      	str	r3, [r6, #0]
 8008a9e:	2000      	movs	r0, #0
 8008aa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008aa2:	f000 f877 	bl	8008b94 <__malloc_lock>
 8008aa6:	4921      	ldr	r1, [pc, #132]	; (8008b2c <_malloc_r+0xac>)
 8008aa8:	680a      	ldr	r2, [r1, #0]
 8008aaa:	4614      	mov	r4, r2
 8008aac:	b99c      	cbnz	r4, 8008ad6 <_malloc_r+0x56>
 8008aae:	4f20      	ldr	r7, [pc, #128]	; (8008b30 <_malloc_r+0xb0>)
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	b923      	cbnz	r3, 8008abe <_malloc_r+0x3e>
 8008ab4:	4621      	mov	r1, r4
 8008ab6:	4630      	mov	r0, r6
 8008ab8:	f000 f83c 	bl	8008b34 <_sbrk_r>
 8008abc:	6038      	str	r0, [r7, #0]
 8008abe:	4629      	mov	r1, r5
 8008ac0:	4630      	mov	r0, r6
 8008ac2:	f000 f837 	bl	8008b34 <_sbrk_r>
 8008ac6:	1c43      	adds	r3, r0, #1
 8008ac8:	d123      	bne.n	8008b12 <_malloc_r+0x92>
 8008aca:	230c      	movs	r3, #12
 8008acc:	6033      	str	r3, [r6, #0]
 8008ace:	4630      	mov	r0, r6
 8008ad0:	f000 f866 	bl	8008ba0 <__malloc_unlock>
 8008ad4:	e7e3      	b.n	8008a9e <_malloc_r+0x1e>
 8008ad6:	6823      	ldr	r3, [r4, #0]
 8008ad8:	1b5b      	subs	r3, r3, r5
 8008ada:	d417      	bmi.n	8008b0c <_malloc_r+0x8c>
 8008adc:	2b0b      	cmp	r3, #11
 8008ade:	d903      	bls.n	8008ae8 <_malloc_r+0x68>
 8008ae0:	6023      	str	r3, [r4, #0]
 8008ae2:	441c      	add	r4, r3
 8008ae4:	6025      	str	r5, [r4, #0]
 8008ae6:	e004      	b.n	8008af2 <_malloc_r+0x72>
 8008ae8:	6863      	ldr	r3, [r4, #4]
 8008aea:	42a2      	cmp	r2, r4
 8008aec:	bf0c      	ite	eq
 8008aee:	600b      	streq	r3, [r1, #0]
 8008af0:	6053      	strne	r3, [r2, #4]
 8008af2:	4630      	mov	r0, r6
 8008af4:	f000 f854 	bl	8008ba0 <__malloc_unlock>
 8008af8:	f104 000b 	add.w	r0, r4, #11
 8008afc:	1d23      	adds	r3, r4, #4
 8008afe:	f020 0007 	bic.w	r0, r0, #7
 8008b02:	1ac2      	subs	r2, r0, r3
 8008b04:	d0cc      	beq.n	8008aa0 <_malloc_r+0x20>
 8008b06:	1a1b      	subs	r3, r3, r0
 8008b08:	50a3      	str	r3, [r4, r2]
 8008b0a:	e7c9      	b.n	8008aa0 <_malloc_r+0x20>
 8008b0c:	4622      	mov	r2, r4
 8008b0e:	6864      	ldr	r4, [r4, #4]
 8008b10:	e7cc      	b.n	8008aac <_malloc_r+0x2c>
 8008b12:	1cc4      	adds	r4, r0, #3
 8008b14:	f024 0403 	bic.w	r4, r4, #3
 8008b18:	42a0      	cmp	r0, r4
 8008b1a:	d0e3      	beq.n	8008ae4 <_malloc_r+0x64>
 8008b1c:	1a21      	subs	r1, r4, r0
 8008b1e:	4630      	mov	r0, r6
 8008b20:	f000 f808 	bl	8008b34 <_sbrk_r>
 8008b24:	3001      	adds	r0, #1
 8008b26:	d1dd      	bne.n	8008ae4 <_malloc_r+0x64>
 8008b28:	e7cf      	b.n	8008aca <_malloc_r+0x4a>
 8008b2a:	bf00      	nop
 8008b2c:	20000220 	.word	0x20000220
 8008b30:	20000224 	.word	0x20000224

08008b34 <_sbrk_r>:
 8008b34:	b538      	push	{r3, r4, r5, lr}
 8008b36:	4d06      	ldr	r5, [pc, #24]	; (8008b50 <_sbrk_r+0x1c>)
 8008b38:	2300      	movs	r3, #0
 8008b3a:	4604      	mov	r4, r0
 8008b3c:	4608      	mov	r0, r1
 8008b3e:	602b      	str	r3, [r5, #0]
 8008b40:	f7f8 f95e 	bl	8000e00 <_sbrk>
 8008b44:	1c43      	adds	r3, r0, #1
 8008b46:	d102      	bne.n	8008b4e <_sbrk_r+0x1a>
 8008b48:	682b      	ldr	r3, [r5, #0]
 8008b4a:	b103      	cbz	r3, 8008b4e <_sbrk_r+0x1a>
 8008b4c:	6023      	str	r3, [r4, #0]
 8008b4e:	bd38      	pop	{r3, r4, r5, pc}
 8008b50:	20001c4c 	.word	0x20001c4c

08008b54 <siprintf>:
 8008b54:	b40e      	push	{r1, r2, r3}
 8008b56:	b500      	push	{lr}
 8008b58:	b09c      	sub	sp, #112	; 0x70
 8008b5a:	ab1d      	add	r3, sp, #116	; 0x74
 8008b5c:	9002      	str	r0, [sp, #8]
 8008b5e:	9006      	str	r0, [sp, #24]
 8008b60:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008b64:	4809      	ldr	r0, [pc, #36]	; (8008b8c <siprintf+0x38>)
 8008b66:	9107      	str	r1, [sp, #28]
 8008b68:	9104      	str	r1, [sp, #16]
 8008b6a:	4909      	ldr	r1, [pc, #36]	; (8008b90 <siprintf+0x3c>)
 8008b6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b70:	9105      	str	r1, [sp, #20]
 8008b72:	6800      	ldr	r0, [r0, #0]
 8008b74:	9301      	str	r3, [sp, #4]
 8008b76:	a902      	add	r1, sp, #8
 8008b78:	f000 f874 	bl	8008c64 <_svfiprintf_r>
 8008b7c:	9b02      	ldr	r3, [sp, #8]
 8008b7e:	2200      	movs	r2, #0
 8008b80:	701a      	strb	r2, [r3, #0]
 8008b82:	b01c      	add	sp, #112	; 0x70
 8008b84:	f85d eb04 	ldr.w	lr, [sp], #4
 8008b88:	b003      	add	sp, #12
 8008b8a:	4770      	bx	lr
 8008b8c:	20000190 	.word	0x20000190
 8008b90:	ffff0208 	.word	0xffff0208

08008b94 <__malloc_lock>:
 8008b94:	4801      	ldr	r0, [pc, #4]	; (8008b9c <__malloc_lock+0x8>)
 8008b96:	f000 baf9 	b.w	800918c <__retarget_lock_acquire_recursive>
 8008b9a:	bf00      	nop
 8008b9c:	20001c54 	.word	0x20001c54

08008ba0 <__malloc_unlock>:
 8008ba0:	4801      	ldr	r0, [pc, #4]	; (8008ba8 <__malloc_unlock+0x8>)
 8008ba2:	f000 baf4 	b.w	800918e <__retarget_lock_release_recursive>
 8008ba6:	bf00      	nop
 8008ba8:	20001c54 	.word	0x20001c54

08008bac <__ssputs_r>:
 8008bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bb0:	688e      	ldr	r6, [r1, #8]
 8008bb2:	429e      	cmp	r6, r3
 8008bb4:	4682      	mov	sl, r0
 8008bb6:	460c      	mov	r4, r1
 8008bb8:	4690      	mov	r8, r2
 8008bba:	461f      	mov	r7, r3
 8008bbc:	d838      	bhi.n	8008c30 <__ssputs_r+0x84>
 8008bbe:	898a      	ldrh	r2, [r1, #12]
 8008bc0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008bc4:	d032      	beq.n	8008c2c <__ssputs_r+0x80>
 8008bc6:	6825      	ldr	r5, [r4, #0]
 8008bc8:	6909      	ldr	r1, [r1, #16]
 8008bca:	eba5 0901 	sub.w	r9, r5, r1
 8008bce:	6965      	ldr	r5, [r4, #20]
 8008bd0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008bd4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008bd8:	3301      	adds	r3, #1
 8008bda:	444b      	add	r3, r9
 8008bdc:	106d      	asrs	r5, r5, #1
 8008bde:	429d      	cmp	r5, r3
 8008be0:	bf38      	it	cc
 8008be2:	461d      	movcc	r5, r3
 8008be4:	0553      	lsls	r3, r2, #21
 8008be6:	d531      	bpl.n	8008c4c <__ssputs_r+0xa0>
 8008be8:	4629      	mov	r1, r5
 8008bea:	f7ff ff49 	bl	8008a80 <_malloc_r>
 8008bee:	4606      	mov	r6, r0
 8008bf0:	b950      	cbnz	r0, 8008c08 <__ssputs_r+0x5c>
 8008bf2:	230c      	movs	r3, #12
 8008bf4:	f8ca 3000 	str.w	r3, [sl]
 8008bf8:	89a3      	ldrh	r3, [r4, #12]
 8008bfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008bfe:	81a3      	strh	r3, [r4, #12]
 8008c00:	f04f 30ff 	mov.w	r0, #4294967295
 8008c04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c08:	6921      	ldr	r1, [r4, #16]
 8008c0a:	464a      	mov	r2, r9
 8008c0c:	f000 fac0 	bl	8009190 <memcpy>
 8008c10:	89a3      	ldrh	r3, [r4, #12]
 8008c12:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008c16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c1a:	81a3      	strh	r3, [r4, #12]
 8008c1c:	6126      	str	r6, [r4, #16]
 8008c1e:	6165      	str	r5, [r4, #20]
 8008c20:	444e      	add	r6, r9
 8008c22:	eba5 0509 	sub.w	r5, r5, r9
 8008c26:	6026      	str	r6, [r4, #0]
 8008c28:	60a5      	str	r5, [r4, #8]
 8008c2a:	463e      	mov	r6, r7
 8008c2c:	42be      	cmp	r6, r7
 8008c2e:	d900      	bls.n	8008c32 <__ssputs_r+0x86>
 8008c30:	463e      	mov	r6, r7
 8008c32:	4632      	mov	r2, r6
 8008c34:	6820      	ldr	r0, [r4, #0]
 8008c36:	4641      	mov	r1, r8
 8008c38:	f000 fab8 	bl	80091ac <memmove>
 8008c3c:	68a3      	ldr	r3, [r4, #8]
 8008c3e:	6822      	ldr	r2, [r4, #0]
 8008c40:	1b9b      	subs	r3, r3, r6
 8008c42:	4432      	add	r2, r6
 8008c44:	60a3      	str	r3, [r4, #8]
 8008c46:	6022      	str	r2, [r4, #0]
 8008c48:	2000      	movs	r0, #0
 8008c4a:	e7db      	b.n	8008c04 <__ssputs_r+0x58>
 8008c4c:	462a      	mov	r2, r5
 8008c4e:	f000 fac7 	bl	80091e0 <_realloc_r>
 8008c52:	4606      	mov	r6, r0
 8008c54:	2800      	cmp	r0, #0
 8008c56:	d1e1      	bne.n	8008c1c <__ssputs_r+0x70>
 8008c58:	6921      	ldr	r1, [r4, #16]
 8008c5a:	4650      	mov	r0, sl
 8008c5c:	f7ff fec0 	bl	80089e0 <_free_r>
 8008c60:	e7c7      	b.n	8008bf2 <__ssputs_r+0x46>
	...

08008c64 <_svfiprintf_r>:
 8008c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c68:	4698      	mov	r8, r3
 8008c6a:	898b      	ldrh	r3, [r1, #12]
 8008c6c:	061b      	lsls	r3, r3, #24
 8008c6e:	b09d      	sub	sp, #116	; 0x74
 8008c70:	4607      	mov	r7, r0
 8008c72:	460d      	mov	r5, r1
 8008c74:	4614      	mov	r4, r2
 8008c76:	d50e      	bpl.n	8008c96 <_svfiprintf_r+0x32>
 8008c78:	690b      	ldr	r3, [r1, #16]
 8008c7a:	b963      	cbnz	r3, 8008c96 <_svfiprintf_r+0x32>
 8008c7c:	2140      	movs	r1, #64	; 0x40
 8008c7e:	f7ff feff 	bl	8008a80 <_malloc_r>
 8008c82:	6028      	str	r0, [r5, #0]
 8008c84:	6128      	str	r0, [r5, #16]
 8008c86:	b920      	cbnz	r0, 8008c92 <_svfiprintf_r+0x2e>
 8008c88:	230c      	movs	r3, #12
 8008c8a:	603b      	str	r3, [r7, #0]
 8008c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8008c90:	e0d1      	b.n	8008e36 <_svfiprintf_r+0x1d2>
 8008c92:	2340      	movs	r3, #64	; 0x40
 8008c94:	616b      	str	r3, [r5, #20]
 8008c96:	2300      	movs	r3, #0
 8008c98:	9309      	str	r3, [sp, #36]	; 0x24
 8008c9a:	2320      	movs	r3, #32
 8008c9c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008ca0:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ca4:	2330      	movs	r3, #48	; 0x30
 8008ca6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008e50 <_svfiprintf_r+0x1ec>
 8008caa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008cae:	f04f 0901 	mov.w	r9, #1
 8008cb2:	4623      	mov	r3, r4
 8008cb4:	469a      	mov	sl, r3
 8008cb6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008cba:	b10a      	cbz	r2, 8008cc0 <_svfiprintf_r+0x5c>
 8008cbc:	2a25      	cmp	r2, #37	; 0x25
 8008cbe:	d1f9      	bne.n	8008cb4 <_svfiprintf_r+0x50>
 8008cc0:	ebba 0b04 	subs.w	fp, sl, r4
 8008cc4:	d00b      	beq.n	8008cde <_svfiprintf_r+0x7a>
 8008cc6:	465b      	mov	r3, fp
 8008cc8:	4622      	mov	r2, r4
 8008cca:	4629      	mov	r1, r5
 8008ccc:	4638      	mov	r0, r7
 8008cce:	f7ff ff6d 	bl	8008bac <__ssputs_r>
 8008cd2:	3001      	adds	r0, #1
 8008cd4:	f000 80aa 	beq.w	8008e2c <_svfiprintf_r+0x1c8>
 8008cd8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008cda:	445a      	add	r2, fp
 8008cdc:	9209      	str	r2, [sp, #36]	; 0x24
 8008cde:	f89a 3000 	ldrb.w	r3, [sl]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	f000 80a2 	beq.w	8008e2c <_svfiprintf_r+0x1c8>
 8008ce8:	2300      	movs	r3, #0
 8008cea:	f04f 32ff 	mov.w	r2, #4294967295
 8008cee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008cf2:	f10a 0a01 	add.w	sl, sl, #1
 8008cf6:	9304      	str	r3, [sp, #16]
 8008cf8:	9307      	str	r3, [sp, #28]
 8008cfa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008cfe:	931a      	str	r3, [sp, #104]	; 0x68
 8008d00:	4654      	mov	r4, sl
 8008d02:	2205      	movs	r2, #5
 8008d04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d08:	4851      	ldr	r0, [pc, #324]	; (8008e50 <_svfiprintf_r+0x1ec>)
 8008d0a:	f7f7 fa99 	bl	8000240 <memchr>
 8008d0e:	9a04      	ldr	r2, [sp, #16]
 8008d10:	b9d8      	cbnz	r0, 8008d4a <_svfiprintf_r+0xe6>
 8008d12:	06d0      	lsls	r0, r2, #27
 8008d14:	bf44      	itt	mi
 8008d16:	2320      	movmi	r3, #32
 8008d18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d1c:	0711      	lsls	r1, r2, #28
 8008d1e:	bf44      	itt	mi
 8008d20:	232b      	movmi	r3, #43	; 0x2b
 8008d22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d26:	f89a 3000 	ldrb.w	r3, [sl]
 8008d2a:	2b2a      	cmp	r3, #42	; 0x2a
 8008d2c:	d015      	beq.n	8008d5a <_svfiprintf_r+0xf6>
 8008d2e:	9a07      	ldr	r2, [sp, #28]
 8008d30:	4654      	mov	r4, sl
 8008d32:	2000      	movs	r0, #0
 8008d34:	f04f 0c0a 	mov.w	ip, #10
 8008d38:	4621      	mov	r1, r4
 8008d3a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d3e:	3b30      	subs	r3, #48	; 0x30
 8008d40:	2b09      	cmp	r3, #9
 8008d42:	d94e      	bls.n	8008de2 <_svfiprintf_r+0x17e>
 8008d44:	b1b0      	cbz	r0, 8008d74 <_svfiprintf_r+0x110>
 8008d46:	9207      	str	r2, [sp, #28]
 8008d48:	e014      	b.n	8008d74 <_svfiprintf_r+0x110>
 8008d4a:	eba0 0308 	sub.w	r3, r0, r8
 8008d4e:	fa09 f303 	lsl.w	r3, r9, r3
 8008d52:	4313      	orrs	r3, r2
 8008d54:	9304      	str	r3, [sp, #16]
 8008d56:	46a2      	mov	sl, r4
 8008d58:	e7d2      	b.n	8008d00 <_svfiprintf_r+0x9c>
 8008d5a:	9b03      	ldr	r3, [sp, #12]
 8008d5c:	1d19      	adds	r1, r3, #4
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	9103      	str	r1, [sp, #12]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	bfbb      	ittet	lt
 8008d66:	425b      	neglt	r3, r3
 8008d68:	f042 0202 	orrlt.w	r2, r2, #2
 8008d6c:	9307      	strge	r3, [sp, #28]
 8008d6e:	9307      	strlt	r3, [sp, #28]
 8008d70:	bfb8      	it	lt
 8008d72:	9204      	strlt	r2, [sp, #16]
 8008d74:	7823      	ldrb	r3, [r4, #0]
 8008d76:	2b2e      	cmp	r3, #46	; 0x2e
 8008d78:	d10c      	bne.n	8008d94 <_svfiprintf_r+0x130>
 8008d7a:	7863      	ldrb	r3, [r4, #1]
 8008d7c:	2b2a      	cmp	r3, #42	; 0x2a
 8008d7e:	d135      	bne.n	8008dec <_svfiprintf_r+0x188>
 8008d80:	9b03      	ldr	r3, [sp, #12]
 8008d82:	1d1a      	adds	r2, r3, #4
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	9203      	str	r2, [sp, #12]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	bfb8      	it	lt
 8008d8c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008d90:	3402      	adds	r4, #2
 8008d92:	9305      	str	r3, [sp, #20]
 8008d94:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008e60 <_svfiprintf_r+0x1fc>
 8008d98:	7821      	ldrb	r1, [r4, #0]
 8008d9a:	2203      	movs	r2, #3
 8008d9c:	4650      	mov	r0, sl
 8008d9e:	f7f7 fa4f 	bl	8000240 <memchr>
 8008da2:	b140      	cbz	r0, 8008db6 <_svfiprintf_r+0x152>
 8008da4:	2340      	movs	r3, #64	; 0x40
 8008da6:	eba0 000a 	sub.w	r0, r0, sl
 8008daa:	fa03 f000 	lsl.w	r0, r3, r0
 8008dae:	9b04      	ldr	r3, [sp, #16]
 8008db0:	4303      	orrs	r3, r0
 8008db2:	3401      	adds	r4, #1
 8008db4:	9304      	str	r3, [sp, #16]
 8008db6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008dba:	4826      	ldr	r0, [pc, #152]	; (8008e54 <_svfiprintf_r+0x1f0>)
 8008dbc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008dc0:	2206      	movs	r2, #6
 8008dc2:	f7f7 fa3d 	bl	8000240 <memchr>
 8008dc6:	2800      	cmp	r0, #0
 8008dc8:	d038      	beq.n	8008e3c <_svfiprintf_r+0x1d8>
 8008dca:	4b23      	ldr	r3, [pc, #140]	; (8008e58 <_svfiprintf_r+0x1f4>)
 8008dcc:	bb1b      	cbnz	r3, 8008e16 <_svfiprintf_r+0x1b2>
 8008dce:	9b03      	ldr	r3, [sp, #12]
 8008dd0:	3307      	adds	r3, #7
 8008dd2:	f023 0307 	bic.w	r3, r3, #7
 8008dd6:	3308      	adds	r3, #8
 8008dd8:	9303      	str	r3, [sp, #12]
 8008dda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ddc:	4433      	add	r3, r6
 8008dde:	9309      	str	r3, [sp, #36]	; 0x24
 8008de0:	e767      	b.n	8008cb2 <_svfiprintf_r+0x4e>
 8008de2:	fb0c 3202 	mla	r2, ip, r2, r3
 8008de6:	460c      	mov	r4, r1
 8008de8:	2001      	movs	r0, #1
 8008dea:	e7a5      	b.n	8008d38 <_svfiprintf_r+0xd4>
 8008dec:	2300      	movs	r3, #0
 8008dee:	3401      	adds	r4, #1
 8008df0:	9305      	str	r3, [sp, #20]
 8008df2:	4619      	mov	r1, r3
 8008df4:	f04f 0c0a 	mov.w	ip, #10
 8008df8:	4620      	mov	r0, r4
 8008dfa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008dfe:	3a30      	subs	r2, #48	; 0x30
 8008e00:	2a09      	cmp	r2, #9
 8008e02:	d903      	bls.n	8008e0c <_svfiprintf_r+0x1a8>
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d0c5      	beq.n	8008d94 <_svfiprintf_r+0x130>
 8008e08:	9105      	str	r1, [sp, #20]
 8008e0a:	e7c3      	b.n	8008d94 <_svfiprintf_r+0x130>
 8008e0c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e10:	4604      	mov	r4, r0
 8008e12:	2301      	movs	r3, #1
 8008e14:	e7f0      	b.n	8008df8 <_svfiprintf_r+0x194>
 8008e16:	ab03      	add	r3, sp, #12
 8008e18:	9300      	str	r3, [sp, #0]
 8008e1a:	462a      	mov	r2, r5
 8008e1c:	4b0f      	ldr	r3, [pc, #60]	; (8008e5c <_svfiprintf_r+0x1f8>)
 8008e1e:	a904      	add	r1, sp, #16
 8008e20:	4638      	mov	r0, r7
 8008e22:	f3af 8000 	nop.w
 8008e26:	1c42      	adds	r2, r0, #1
 8008e28:	4606      	mov	r6, r0
 8008e2a:	d1d6      	bne.n	8008dda <_svfiprintf_r+0x176>
 8008e2c:	89ab      	ldrh	r3, [r5, #12]
 8008e2e:	065b      	lsls	r3, r3, #25
 8008e30:	f53f af2c 	bmi.w	8008c8c <_svfiprintf_r+0x28>
 8008e34:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008e36:	b01d      	add	sp, #116	; 0x74
 8008e38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e3c:	ab03      	add	r3, sp, #12
 8008e3e:	9300      	str	r3, [sp, #0]
 8008e40:	462a      	mov	r2, r5
 8008e42:	4b06      	ldr	r3, [pc, #24]	; (8008e5c <_svfiprintf_r+0x1f8>)
 8008e44:	a904      	add	r1, sp, #16
 8008e46:	4638      	mov	r0, r7
 8008e48:	f000 f87a 	bl	8008f40 <_printf_i>
 8008e4c:	e7eb      	b.n	8008e26 <_svfiprintf_r+0x1c2>
 8008e4e:	bf00      	nop
 8008e50:	080092f8 	.word	0x080092f8
 8008e54:	08009302 	.word	0x08009302
 8008e58:	00000000 	.word	0x00000000
 8008e5c:	08008bad 	.word	0x08008bad
 8008e60:	080092fe 	.word	0x080092fe

08008e64 <_printf_common>:
 8008e64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e68:	4616      	mov	r6, r2
 8008e6a:	4699      	mov	r9, r3
 8008e6c:	688a      	ldr	r2, [r1, #8]
 8008e6e:	690b      	ldr	r3, [r1, #16]
 8008e70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008e74:	4293      	cmp	r3, r2
 8008e76:	bfb8      	it	lt
 8008e78:	4613      	movlt	r3, r2
 8008e7a:	6033      	str	r3, [r6, #0]
 8008e7c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008e80:	4607      	mov	r7, r0
 8008e82:	460c      	mov	r4, r1
 8008e84:	b10a      	cbz	r2, 8008e8a <_printf_common+0x26>
 8008e86:	3301      	adds	r3, #1
 8008e88:	6033      	str	r3, [r6, #0]
 8008e8a:	6823      	ldr	r3, [r4, #0]
 8008e8c:	0699      	lsls	r1, r3, #26
 8008e8e:	bf42      	ittt	mi
 8008e90:	6833      	ldrmi	r3, [r6, #0]
 8008e92:	3302      	addmi	r3, #2
 8008e94:	6033      	strmi	r3, [r6, #0]
 8008e96:	6825      	ldr	r5, [r4, #0]
 8008e98:	f015 0506 	ands.w	r5, r5, #6
 8008e9c:	d106      	bne.n	8008eac <_printf_common+0x48>
 8008e9e:	f104 0a19 	add.w	sl, r4, #25
 8008ea2:	68e3      	ldr	r3, [r4, #12]
 8008ea4:	6832      	ldr	r2, [r6, #0]
 8008ea6:	1a9b      	subs	r3, r3, r2
 8008ea8:	42ab      	cmp	r3, r5
 8008eaa:	dc26      	bgt.n	8008efa <_printf_common+0x96>
 8008eac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008eb0:	1e13      	subs	r3, r2, #0
 8008eb2:	6822      	ldr	r2, [r4, #0]
 8008eb4:	bf18      	it	ne
 8008eb6:	2301      	movne	r3, #1
 8008eb8:	0692      	lsls	r2, r2, #26
 8008eba:	d42b      	bmi.n	8008f14 <_printf_common+0xb0>
 8008ebc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008ec0:	4649      	mov	r1, r9
 8008ec2:	4638      	mov	r0, r7
 8008ec4:	47c0      	blx	r8
 8008ec6:	3001      	adds	r0, #1
 8008ec8:	d01e      	beq.n	8008f08 <_printf_common+0xa4>
 8008eca:	6823      	ldr	r3, [r4, #0]
 8008ecc:	68e5      	ldr	r5, [r4, #12]
 8008ece:	6832      	ldr	r2, [r6, #0]
 8008ed0:	f003 0306 	and.w	r3, r3, #6
 8008ed4:	2b04      	cmp	r3, #4
 8008ed6:	bf08      	it	eq
 8008ed8:	1aad      	subeq	r5, r5, r2
 8008eda:	68a3      	ldr	r3, [r4, #8]
 8008edc:	6922      	ldr	r2, [r4, #16]
 8008ede:	bf0c      	ite	eq
 8008ee0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008ee4:	2500      	movne	r5, #0
 8008ee6:	4293      	cmp	r3, r2
 8008ee8:	bfc4      	itt	gt
 8008eea:	1a9b      	subgt	r3, r3, r2
 8008eec:	18ed      	addgt	r5, r5, r3
 8008eee:	2600      	movs	r6, #0
 8008ef0:	341a      	adds	r4, #26
 8008ef2:	42b5      	cmp	r5, r6
 8008ef4:	d11a      	bne.n	8008f2c <_printf_common+0xc8>
 8008ef6:	2000      	movs	r0, #0
 8008ef8:	e008      	b.n	8008f0c <_printf_common+0xa8>
 8008efa:	2301      	movs	r3, #1
 8008efc:	4652      	mov	r2, sl
 8008efe:	4649      	mov	r1, r9
 8008f00:	4638      	mov	r0, r7
 8008f02:	47c0      	blx	r8
 8008f04:	3001      	adds	r0, #1
 8008f06:	d103      	bne.n	8008f10 <_printf_common+0xac>
 8008f08:	f04f 30ff 	mov.w	r0, #4294967295
 8008f0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f10:	3501      	adds	r5, #1
 8008f12:	e7c6      	b.n	8008ea2 <_printf_common+0x3e>
 8008f14:	18e1      	adds	r1, r4, r3
 8008f16:	1c5a      	adds	r2, r3, #1
 8008f18:	2030      	movs	r0, #48	; 0x30
 8008f1a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008f1e:	4422      	add	r2, r4
 8008f20:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008f24:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008f28:	3302      	adds	r3, #2
 8008f2a:	e7c7      	b.n	8008ebc <_printf_common+0x58>
 8008f2c:	2301      	movs	r3, #1
 8008f2e:	4622      	mov	r2, r4
 8008f30:	4649      	mov	r1, r9
 8008f32:	4638      	mov	r0, r7
 8008f34:	47c0      	blx	r8
 8008f36:	3001      	adds	r0, #1
 8008f38:	d0e6      	beq.n	8008f08 <_printf_common+0xa4>
 8008f3a:	3601      	adds	r6, #1
 8008f3c:	e7d9      	b.n	8008ef2 <_printf_common+0x8e>
	...

08008f40 <_printf_i>:
 8008f40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f44:	460c      	mov	r4, r1
 8008f46:	4691      	mov	r9, r2
 8008f48:	7e27      	ldrb	r7, [r4, #24]
 8008f4a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008f4c:	2f78      	cmp	r7, #120	; 0x78
 8008f4e:	4680      	mov	r8, r0
 8008f50:	469a      	mov	sl, r3
 8008f52:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008f56:	d807      	bhi.n	8008f68 <_printf_i+0x28>
 8008f58:	2f62      	cmp	r7, #98	; 0x62
 8008f5a:	d80a      	bhi.n	8008f72 <_printf_i+0x32>
 8008f5c:	2f00      	cmp	r7, #0
 8008f5e:	f000 80d8 	beq.w	8009112 <_printf_i+0x1d2>
 8008f62:	2f58      	cmp	r7, #88	; 0x58
 8008f64:	f000 80a3 	beq.w	80090ae <_printf_i+0x16e>
 8008f68:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008f6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008f70:	e03a      	b.n	8008fe8 <_printf_i+0xa8>
 8008f72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008f76:	2b15      	cmp	r3, #21
 8008f78:	d8f6      	bhi.n	8008f68 <_printf_i+0x28>
 8008f7a:	a001      	add	r0, pc, #4	; (adr r0, 8008f80 <_printf_i+0x40>)
 8008f7c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008f80:	08008fd9 	.word	0x08008fd9
 8008f84:	08008fed 	.word	0x08008fed
 8008f88:	08008f69 	.word	0x08008f69
 8008f8c:	08008f69 	.word	0x08008f69
 8008f90:	08008f69 	.word	0x08008f69
 8008f94:	08008f69 	.word	0x08008f69
 8008f98:	08008fed 	.word	0x08008fed
 8008f9c:	08008f69 	.word	0x08008f69
 8008fa0:	08008f69 	.word	0x08008f69
 8008fa4:	08008f69 	.word	0x08008f69
 8008fa8:	08008f69 	.word	0x08008f69
 8008fac:	080090f9 	.word	0x080090f9
 8008fb0:	0800901d 	.word	0x0800901d
 8008fb4:	080090db 	.word	0x080090db
 8008fb8:	08008f69 	.word	0x08008f69
 8008fbc:	08008f69 	.word	0x08008f69
 8008fc0:	0800911b 	.word	0x0800911b
 8008fc4:	08008f69 	.word	0x08008f69
 8008fc8:	0800901d 	.word	0x0800901d
 8008fcc:	08008f69 	.word	0x08008f69
 8008fd0:	08008f69 	.word	0x08008f69
 8008fd4:	080090e3 	.word	0x080090e3
 8008fd8:	680b      	ldr	r3, [r1, #0]
 8008fda:	1d1a      	adds	r2, r3, #4
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	600a      	str	r2, [r1, #0]
 8008fe0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008fe4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008fe8:	2301      	movs	r3, #1
 8008fea:	e0a3      	b.n	8009134 <_printf_i+0x1f4>
 8008fec:	6825      	ldr	r5, [r4, #0]
 8008fee:	6808      	ldr	r0, [r1, #0]
 8008ff0:	062e      	lsls	r6, r5, #24
 8008ff2:	f100 0304 	add.w	r3, r0, #4
 8008ff6:	d50a      	bpl.n	800900e <_printf_i+0xce>
 8008ff8:	6805      	ldr	r5, [r0, #0]
 8008ffa:	600b      	str	r3, [r1, #0]
 8008ffc:	2d00      	cmp	r5, #0
 8008ffe:	da03      	bge.n	8009008 <_printf_i+0xc8>
 8009000:	232d      	movs	r3, #45	; 0x2d
 8009002:	426d      	negs	r5, r5
 8009004:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009008:	485e      	ldr	r0, [pc, #376]	; (8009184 <_printf_i+0x244>)
 800900a:	230a      	movs	r3, #10
 800900c:	e019      	b.n	8009042 <_printf_i+0x102>
 800900e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009012:	6805      	ldr	r5, [r0, #0]
 8009014:	600b      	str	r3, [r1, #0]
 8009016:	bf18      	it	ne
 8009018:	b22d      	sxthne	r5, r5
 800901a:	e7ef      	b.n	8008ffc <_printf_i+0xbc>
 800901c:	680b      	ldr	r3, [r1, #0]
 800901e:	6825      	ldr	r5, [r4, #0]
 8009020:	1d18      	adds	r0, r3, #4
 8009022:	6008      	str	r0, [r1, #0]
 8009024:	0628      	lsls	r0, r5, #24
 8009026:	d501      	bpl.n	800902c <_printf_i+0xec>
 8009028:	681d      	ldr	r5, [r3, #0]
 800902a:	e002      	b.n	8009032 <_printf_i+0xf2>
 800902c:	0669      	lsls	r1, r5, #25
 800902e:	d5fb      	bpl.n	8009028 <_printf_i+0xe8>
 8009030:	881d      	ldrh	r5, [r3, #0]
 8009032:	4854      	ldr	r0, [pc, #336]	; (8009184 <_printf_i+0x244>)
 8009034:	2f6f      	cmp	r7, #111	; 0x6f
 8009036:	bf0c      	ite	eq
 8009038:	2308      	moveq	r3, #8
 800903a:	230a      	movne	r3, #10
 800903c:	2100      	movs	r1, #0
 800903e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009042:	6866      	ldr	r6, [r4, #4]
 8009044:	60a6      	str	r6, [r4, #8]
 8009046:	2e00      	cmp	r6, #0
 8009048:	bfa2      	ittt	ge
 800904a:	6821      	ldrge	r1, [r4, #0]
 800904c:	f021 0104 	bicge.w	r1, r1, #4
 8009050:	6021      	strge	r1, [r4, #0]
 8009052:	b90d      	cbnz	r5, 8009058 <_printf_i+0x118>
 8009054:	2e00      	cmp	r6, #0
 8009056:	d04d      	beq.n	80090f4 <_printf_i+0x1b4>
 8009058:	4616      	mov	r6, r2
 800905a:	fbb5 f1f3 	udiv	r1, r5, r3
 800905e:	fb03 5711 	mls	r7, r3, r1, r5
 8009062:	5dc7      	ldrb	r7, [r0, r7]
 8009064:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009068:	462f      	mov	r7, r5
 800906a:	42bb      	cmp	r3, r7
 800906c:	460d      	mov	r5, r1
 800906e:	d9f4      	bls.n	800905a <_printf_i+0x11a>
 8009070:	2b08      	cmp	r3, #8
 8009072:	d10b      	bne.n	800908c <_printf_i+0x14c>
 8009074:	6823      	ldr	r3, [r4, #0]
 8009076:	07df      	lsls	r7, r3, #31
 8009078:	d508      	bpl.n	800908c <_printf_i+0x14c>
 800907a:	6923      	ldr	r3, [r4, #16]
 800907c:	6861      	ldr	r1, [r4, #4]
 800907e:	4299      	cmp	r1, r3
 8009080:	bfde      	ittt	le
 8009082:	2330      	movle	r3, #48	; 0x30
 8009084:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009088:	f106 36ff 	addle.w	r6, r6, #4294967295
 800908c:	1b92      	subs	r2, r2, r6
 800908e:	6122      	str	r2, [r4, #16]
 8009090:	f8cd a000 	str.w	sl, [sp]
 8009094:	464b      	mov	r3, r9
 8009096:	aa03      	add	r2, sp, #12
 8009098:	4621      	mov	r1, r4
 800909a:	4640      	mov	r0, r8
 800909c:	f7ff fee2 	bl	8008e64 <_printf_common>
 80090a0:	3001      	adds	r0, #1
 80090a2:	d14c      	bne.n	800913e <_printf_i+0x1fe>
 80090a4:	f04f 30ff 	mov.w	r0, #4294967295
 80090a8:	b004      	add	sp, #16
 80090aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090ae:	4835      	ldr	r0, [pc, #212]	; (8009184 <_printf_i+0x244>)
 80090b0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80090b4:	6823      	ldr	r3, [r4, #0]
 80090b6:	680e      	ldr	r6, [r1, #0]
 80090b8:	061f      	lsls	r7, r3, #24
 80090ba:	f856 5b04 	ldr.w	r5, [r6], #4
 80090be:	600e      	str	r6, [r1, #0]
 80090c0:	d514      	bpl.n	80090ec <_printf_i+0x1ac>
 80090c2:	07d9      	lsls	r1, r3, #31
 80090c4:	bf44      	itt	mi
 80090c6:	f043 0320 	orrmi.w	r3, r3, #32
 80090ca:	6023      	strmi	r3, [r4, #0]
 80090cc:	b91d      	cbnz	r5, 80090d6 <_printf_i+0x196>
 80090ce:	6823      	ldr	r3, [r4, #0]
 80090d0:	f023 0320 	bic.w	r3, r3, #32
 80090d4:	6023      	str	r3, [r4, #0]
 80090d6:	2310      	movs	r3, #16
 80090d8:	e7b0      	b.n	800903c <_printf_i+0xfc>
 80090da:	6823      	ldr	r3, [r4, #0]
 80090dc:	f043 0320 	orr.w	r3, r3, #32
 80090e0:	6023      	str	r3, [r4, #0]
 80090e2:	2378      	movs	r3, #120	; 0x78
 80090e4:	4828      	ldr	r0, [pc, #160]	; (8009188 <_printf_i+0x248>)
 80090e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80090ea:	e7e3      	b.n	80090b4 <_printf_i+0x174>
 80090ec:	065e      	lsls	r6, r3, #25
 80090ee:	bf48      	it	mi
 80090f0:	b2ad      	uxthmi	r5, r5
 80090f2:	e7e6      	b.n	80090c2 <_printf_i+0x182>
 80090f4:	4616      	mov	r6, r2
 80090f6:	e7bb      	b.n	8009070 <_printf_i+0x130>
 80090f8:	680b      	ldr	r3, [r1, #0]
 80090fa:	6826      	ldr	r6, [r4, #0]
 80090fc:	6960      	ldr	r0, [r4, #20]
 80090fe:	1d1d      	adds	r5, r3, #4
 8009100:	600d      	str	r5, [r1, #0]
 8009102:	0635      	lsls	r5, r6, #24
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	d501      	bpl.n	800910c <_printf_i+0x1cc>
 8009108:	6018      	str	r0, [r3, #0]
 800910a:	e002      	b.n	8009112 <_printf_i+0x1d2>
 800910c:	0671      	lsls	r1, r6, #25
 800910e:	d5fb      	bpl.n	8009108 <_printf_i+0x1c8>
 8009110:	8018      	strh	r0, [r3, #0]
 8009112:	2300      	movs	r3, #0
 8009114:	6123      	str	r3, [r4, #16]
 8009116:	4616      	mov	r6, r2
 8009118:	e7ba      	b.n	8009090 <_printf_i+0x150>
 800911a:	680b      	ldr	r3, [r1, #0]
 800911c:	1d1a      	adds	r2, r3, #4
 800911e:	600a      	str	r2, [r1, #0]
 8009120:	681e      	ldr	r6, [r3, #0]
 8009122:	6862      	ldr	r2, [r4, #4]
 8009124:	2100      	movs	r1, #0
 8009126:	4630      	mov	r0, r6
 8009128:	f7f7 f88a 	bl	8000240 <memchr>
 800912c:	b108      	cbz	r0, 8009132 <_printf_i+0x1f2>
 800912e:	1b80      	subs	r0, r0, r6
 8009130:	6060      	str	r0, [r4, #4]
 8009132:	6863      	ldr	r3, [r4, #4]
 8009134:	6123      	str	r3, [r4, #16]
 8009136:	2300      	movs	r3, #0
 8009138:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800913c:	e7a8      	b.n	8009090 <_printf_i+0x150>
 800913e:	6923      	ldr	r3, [r4, #16]
 8009140:	4632      	mov	r2, r6
 8009142:	4649      	mov	r1, r9
 8009144:	4640      	mov	r0, r8
 8009146:	47d0      	blx	sl
 8009148:	3001      	adds	r0, #1
 800914a:	d0ab      	beq.n	80090a4 <_printf_i+0x164>
 800914c:	6823      	ldr	r3, [r4, #0]
 800914e:	079b      	lsls	r3, r3, #30
 8009150:	d413      	bmi.n	800917a <_printf_i+0x23a>
 8009152:	68e0      	ldr	r0, [r4, #12]
 8009154:	9b03      	ldr	r3, [sp, #12]
 8009156:	4298      	cmp	r0, r3
 8009158:	bfb8      	it	lt
 800915a:	4618      	movlt	r0, r3
 800915c:	e7a4      	b.n	80090a8 <_printf_i+0x168>
 800915e:	2301      	movs	r3, #1
 8009160:	4632      	mov	r2, r6
 8009162:	4649      	mov	r1, r9
 8009164:	4640      	mov	r0, r8
 8009166:	47d0      	blx	sl
 8009168:	3001      	adds	r0, #1
 800916a:	d09b      	beq.n	80090a4 <_printf_i+0x164>
 800916c:	3501      	adds	r5, #1
 800916e:	68e3      	ldr	r3, [r4, #12]
 8009170:	9903      	ldr	r1, [sp, #12]
 8009172:	1a5b      	subs	r3, r3, r1
 8009174:	42ab      	cmp	r3, r5
 8009176:	dcf2      	bgt.n	800915e <_printf_i+0x21e>
 8009178:	e7eb      	b.n	8009152 <_printf_i+0x212>
 800917a:	2500      	movs	r5, #0
 800917c:	f104 0619 	add.w	r6, r4, #25
 8009180:	e7f5      	b.n	800916e <_printf_i+0x22e>
 8009182:	bf00      	nop
 8009184:	08009309 	.word	0x08009309
 8009188:	0800931a 	.word	0x0800931a

0800918c <__retarget_lock_acquire_recursive>:
 800918c:	4770      	bx	lr

0800918e <__retarget_lock_release_recursive>:
 800918e:	4770      	bx	lr

08009190 <memcpy>:
 8009190:	440a      	add	r2, r1
 8009192:	4291      	cmp	r1, r2
 8009194:	f100 33ff 	add.w	r3, r0, #4294967295
 8009198:	d100      	bne.n	800919c <memcpy+0xc>
 800919a:	4770      	bx	lr
 800919c:	b510      	push	{r4, lr}
 800919e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80091a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80091a6:	4291      	cmp	r1, r2
 80091a8:	d1f9      	bne.n	800919e <memcpy+0xe>
 80091aa:	bd10      	pop	{r4, pc}

080091ac <memmove>:
 80091ac:	4288      	cmp	r0, r1
 80091ae:	b510      	push	{r4, lr}
 80091b0:	eb01 0402 	add.w	r4, r1, r2
 80091b4:	d902      	bls.n	80091bc <memmove+0x10>
 80091b6:	4284      	cmp	r4, r0
 80091b8:	4623      	mov	r3, r4
 80091ba:	d807      	bhi.n	80091cc <memmove+0x20>
 80091bc:	1e43      	subs	r3, r0, #1
 80091be:	42a1      	cmp	r1, r4
 80091c0:	d008      	beq.n	80091d4 <memmove+0x28>
 80091c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80091c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80091ca:	e7f8      	b.n	80091be <memmove+0x12>
 80091cc:	4402      	add	r2, r0
 80091ce:	4601      	mov	r1, r0
 80091d0:	428a      	cmp	r2, r1
 80091d2:	d100      	bne.n	80091d6 <memmove+0x2a>
 80091d4:	bd10      	pop	{r4, pc}
 80091d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80091da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80091de:	e7f7      	b.n	80091d0 <memmove+0x24>

080091e0 <_realloc_r>:
 80091e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091e2:	4607      	mov	r7, r0
 80091e4:	4614      	mov	r4, r2
 80091e6:	460e      	mov	r6, r1
 80091e8:	b921      	cbnz	r1, 80091f4 <_realloc_r+0x14>
 80091ea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80091ee:	4611      	mov	r1, r2
 80091f0:	f7ff bc46 	b.w	8008a80 <_malloc_r>
 80091f4:	b922      	cbnz	r2, 8009200 <_realloc_r+0x20>
 80091f6:	f7ff fbf3 	bl	80089e0 <_free_r>
 80091fa:	4625      	mov	r5, r4
 80091fc:	4628      	mov	r0, r5
 80091fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009200:	f000 f814 	bl	800922c <_malloc_usable_size_r>
 8009204:	42a0      	cmp	r0, r4
 8009206:	d20f      	bcs.n	8009228 <_realloc_r+0x48>
 8009208:	4621      	mov	r1, r4
 800920a:	4638      	mov	r0, r7
 800920c:	f7ff fc38 	bl	8008a80 <_malloc_r>
 8009210:	4605      	mov	r5, r0
 8009212:	2800      	cmp	r0, #0
 8009214:	d0f2      	beq.n	80091fc <_realloc_r+0x1c>
 8009216:	4631      	mov	r1, r6
 8009218:	4622      	mov	r2, r4
 800921a:	f7ff ffb9 	bl	8009190 <memcpy>
 800921e:	4631      	mov	r1, r6
 8009220:	4638      	mov	r0, r7
 8009222:	f7ff fbdd 	bl	80089e0 <_free_r>
 8009226:	e7e9      	b.n	80091fc <_realloc_r+0x1c>
 8009228:	4635      	mov	r5, r6
 800922a:	e7e7      	b.n	80091fc <_realloc_r+0x1c>

0800922c <_malloc_usable_size_r>:
 800922c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009230:	1f18      	subs	r0, r3, #4
 8009232:	2b00      	cmp	r3, #0
 8009234:	bfbc      	itt	lt
 8009236:	580b      	ldrlt	r3, [r1, r0]
 8009238:	18c0      	addlt	r0, r0, r3
 800923a:	4770      	bx	lr

0800923c <_init>:
 800923c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800923e:	bf00      	nop
 8009240:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009242:	bc08      	pop	{r3}
 8009244:	469e      	mov	lr, r3
 8009246:	4770      	bx	lr

08009248 <_fini>:
 8009248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800924a:	bf00      	nop
 800924c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800924e:	bc08      	pop	{r3}
 8009250:	469e      	mov	lr, r3
 8009252:	4770      	bx	lr
